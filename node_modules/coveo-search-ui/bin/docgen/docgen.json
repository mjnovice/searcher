[
	{
		"name": "AdvancedSearch",
		"notSupportedIn": "",
		"comment": "<p>The <code>AdvancedSearch</code> component is meant to render a section in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\"><code>Settings</code></a> menu to allow the end\nuser to easily create complex queries to send to the index.\n<strong>Note:</strong></p>\n<blockquote>\n<p>You can write custom code to add new sections in the <strong>Advanced Search</strong> modal box generated by this component by\nattaching a handler to the <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\"><code>buildingAdvancedSearch</code></a> event.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearch.options.includeDate",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to include the built-in <strong>Date</strong> section.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "AdvancedSearch.options.includeDocument",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to include the built-in <strong>Document</strong> section.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "AdvancedSearch.options.includeKeywords",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to include the built-in <strong>Keywords</strong> section.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "AdvancedSearch.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>AdvancedSearch</code> component.\nTriggers the <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\"><code>buildingAdvancedSearch</code></a> event.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate",
		"notSupportedIn": "",
		"comment": "<p>The Aggregate component allows to display the result on an aggregate operation on the index.\nIt hooks itself to the query to add a new <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>, then displays the result.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Aggregate.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field on which to do the aggregate operation. This parameter is mandatory.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "Aggregate.options.format",
		"notSupportedIn": "",
		"comment": "<p>Specifies how to format the value.\nThe available formats are defined in the Globalize library (see\n<a href=\"https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-\">Globalize</a>.</p>\n<p>The most commonly used formats are:</p>\n<ul>\n<li><code>c0</code> - Formats the value as a currency.</li>\n<li><code>n0</code> - Formats the value as an integer.</li>\n<li><code>n2</code> - Formats the value as a floating point with 2 decimal digits.</li>\n</ul>\n<p>Default value is <code>c0</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "c0"
		}
	},
	{
		"name": "Aggregate.options.operation",
		"notSupportedIn": "",
		"comment": "<p>Specifies the aggregate operation to perform.\nThe possible values are:</p>\n<ul>\n<li><code>sum</code> - Computes the sum of the computed field values.</li>\n<li><code>average</code> - Computes the average of the computed field values.</li>\n<li><code>minimum</code> - Finds the minimum value of the computed field values.</li>\n<li><code>maximum</code> - Finds the maximum value of the computed field values.</li>\n</ul>\n<p>Default value is <code>sum</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "sum"
		}
	},
	{
		"name": "Aggregate.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Aggregate component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics",
		"notSupportedIn": "",
		"comment": "<p>The <code>Analytics</code> component can log user actions performed in the search interface and send them to a REST web service\nexposed through the Coveo Cloud Platform.\nYou can use analytics data to evaluate how users are interacting with your search interface, improve relevance and\nproduce analytics dashboards within the Coveo Cloud Platform.</p>\n<p>See <a href=\"https://docs.coveo.com/en/347/\">Step 7 - Usage Analytics</a> of the Getting Started with the JavaScript\nSearch Framework V1 tutorial for an introduction to usage analytics.</p>\n<p>See also <a href=\"https://docs.coveo.com/en/2726/#logging-your-own-search-events\">Logging Your Own Search Events</a> for more advanced use cases.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.client",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <code>AnalyticsClient</code>, which performs the heavy duty part of sending the usage analytics events to\nthe Coveo Usage Analytics service.</p>\n",
		"type": "IAnalyticsClient",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.options",
		"notSupportedIn": "",
		"comment": "<p>Options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.options.anonymous",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to convert search user identities to unique hash when logging analytics data, so that\nanalytics reviewers and managers will not be able to clearly identify which user is performing which query.\nWhen you set this option to <code>true</code>, the Coveo Usage Analytics service can still properly differentiate sessions\nmade by anonymous users from sessions made by users authenticated in some way on the site containing the search\npage.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Analytics.options.autoPushToGtmDataLayer",
		"notSupportedIn": "",
		"comment": "<p>Whether to automatically attempt to push Coveo usage analytics events to the Google Tag Manager <a href=\"https://developers.google.com/tag-manager/devguide#datalayer\">data layer</a>.\nSee also <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.gtmdatalayername\"><code>gtmDataLayerName</code></a>.</p>\n<p><strong>Default:</strong> <code>false</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Analytics.options.endpoint",
		"notSupportedIn": "",
		"comment": "<p>Specifies the URL of the Usage Analytics service. You do not have to specify a value for this option, unless\nthe location of the service you use differs from the default Coveo Cloud Usage Analytics endpoint.\nDefault value is <code>https://usageanalytics.coveo.com</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.options.gtmDataLayerName",
		"notSupportedIn": "",
		"comment": "<p>The name of the Google Tag Manager data layer initialized in the page.\nSee also <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.autopushtogtmdatalayer\"><code>autoPushToGtmDataLayer</code></a>.</p>\n<p><strong>Note:</strong>\nSetting this option is only useful if the <a href=\"https://developers.google.com/tag-manager/devguide#renaming\">GTM data layer was renamed</a> in the page.</p>\n<p><strong>Default:</strong> <code>dataLayer</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "dataLayer"
		}
	},
	{
		"name": "Analytics.options.organization",
		"notSupportedIn": "",
		"comment": "<p>Specifies the organization bound to the access token. This is necessary when using an access token, because a\nsingle access token can be associated to more than one organization.\nDefault value is <code>undefined</code>, and the value of this parameter will fallback to the organization used for the\nsearch endpoint.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.options.searchHub",
		"notSupportedIn": "",
		"comment": "<p>Sets the Search Hub dimension on the search events.\nThe Search Hub dimension is typically a name that refers to a specific search page. For example, you could use\nthe <code>CommunitySite</code> value to refer to a search page on a public community site.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>If you wish to use the search hub dimension for security reasons (e.g., to provide different query suggestions\nfor internal and external users), you should specify the search hub when generating the search token for the\nend user (in safe, server-side code), rather than setting it with this option (see\n<a href=\"https://docs.coveo.com/en/56/\">Search Token Authentication</a>).</p>\n</blockquote>\n<p>Default value is <code>default</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "default"
		}
	},
	{
		"name": "Analytics.options.splitTestRunName",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the split test run that the search page is part of.\nYou can use this dimension to perform A/B testing using different search page layouts and features inside the\nCoveo Query pipeline.</p>\n<p>Default value is <code>undefined</code> and no split test run name is reported to the Coveo Usage Analytics service.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.options.splitTestRunVersion",
		"notSupportedIn": "",
		"comment": "<p>Specifies the version name for the page when a split test run is active.\nWhen reporting on A/B testing analytics data, this value specifies the test run version name that was\npresented to the user.</p>\n<p>Default value is <code>undefined</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.options.token",
		"notSupportedIn": "",
		"comment": "<p>Specifies the token to use to access the usage analytics endpoint.\nDefault value is <code>undefined</code>, and the component uses the search token.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.options.user",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the user for the usage analytics logs.\nDefault value is <code>undefined</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.options.userDisplayName",
		"notSupportedIn": "",
		"comment": "<p>Specifies the user display name for the usage analytics logs.\nDefault value is <code>undefined</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Analytics.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>Analytics</code> component. Creates the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsclient.html\"><code>AnalyticsClient</code></a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions",
		"notSupportedIn": "",
		"comment": "<p>The AnalyticsSuggestion component provides query suggestions based on the queries that a Coveo Analytics service most\ncommonly logs.\nThis component orders possible query suggestions by their respective number of successful item views, thus\nprioritizing the most relevant query suggestions. Consequently, when better options are available, this component\ndoes not suggest queries resulting in no clicks from users or requiring refinements.</p>\n<p>The query suggestions appear in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> Component. The AnalyticsSuggestion component strongly\nrelates to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component. While a user is typing in a query box, the AnalyticsSuggestion component\nallows them to see and select the most commonly used and relevant queries.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.options.headerTitle",
		"notSupportedIn": "",
		"comment": "<p>Specifies the title of the query suggestions group in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component. This option is not available\nwhen using the default Lightning Friendly Theme.\nDefault value is the localized string for <code>&quot;Suggested Queries&quot;</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsSuggestions.options.numberOfSuggestions",
		"notSupportedIn": "",
		"comment": "<p>Specifies the number of query suggestions to request and display in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component.\nDefault value is <code>5</code> and minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1",
			"defaultValue": "5"
		}
	},
	{
		"name": "AnalyticsSuggestions.options.omniboxZIndex",
		"notSupportedIn": "",
		"comment": "<p>Specifies the z-index position at which the query suggestions render themselves in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a>\ncomponent. Higher values are placed first.\nDefault value is <code>52</code> and minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "52"
		}
	},
	{
		"name": "AnalyticsSuggestions.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new AnalyticsSuggestions component.\nAlso binds event handlers so that when a user selects a suggestion, an <code>omniboxFromLink</code> usage analytics event is\nlogged if the suggestion comes from a standalone search box, or an <code>omniboxAnalytics</code> usage analytics\nevent is logged otherwise.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider",
		"notSupportedIn": "",
		"comment": "<p>The <code>AuthenticationProvider</code> component makes it possible to execute queries with an identity that the end user\ncan obtain using an authentication provider configured on the Coveo REST Search API\n(see <a href=\"https://docs.coveo.com/en/113/\">Claims Authentication</a>).\nWhen necessary, this component handles redirecting the browser to the address that starts the authentication process.</p>\n<p>You can use the <code>data-tab</code> attribute to enable the <code>AuthenticationProvider</code> component only for the tabs of your\nsearch interface that require authentication (see the <a href=\"https://coveo.github.io/search-ui/components/tab.html\"><code>Tab</code></a> component).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component.</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.options.caption",
		"notSupportedIn": "",
		"comment": "<p>Specifies the display name of the authentication provider. This is the name that you want to appear in the user\ninterface when the end user is logging in.\nDefault value is the <a href=\"https://coveo.github.io/search-ui/components/authenticationprovider.html#options.name\"><code>name</code></a> option value.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.options.name",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the authentication provider.\nSee <a href=\"https://docs.coveo.com/en/91/\">SAML Authentication</a>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AuthenticationProvider.options.showIFrame",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/authenticationprovider.html#options.useiframe\"><code>useIFrame</code></a> option is <code>true</code>, specifies whether to make\nthe authentication <code>&lt;iframe&gt;</code> visible to the user (inside a popup).\nWhen the underlying authentication provider requires no user interaction (for example, when a user authenticates\nusing Windows authentication along with SharePoint claims), setting this option to <code>false</code> reduces the visual\nimpact of the authentication process.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "useIFrame",
			"defaultValue": "true"
		}
	},
	{
		"name": "AuthenticationProvider.options.useIFrame",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to use an <code>&lt;iframe&gt;</code> to host the chain of redirection that make up the authentication\nprocess.\nUsing an <code>&lt;iframe&gt;</code> prevents leaving the search page as part of the authentication process. However, some login\nproviders refuse to load in an <code>&lt;iframe&gt;</code>.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "AuthenticationProvider.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>AuthenticationProvider</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop",
		"notSupportedIn": "",
		"comment": "<p>The Backdrop component renders an image URL (either passed as a direct URL or contained in a result field) as a\nbackground image. It is useful for displaying information in front of a dynamic background image.\nThe Backdrop component will automatically initialize components embedded within itself:</p>\n<pre><code class=\"lang-html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoBackdrop\"</span> <span class=\"hljs-attr\">data-image-field</span>=<span class=\"hljs-string\">\"ytthumbnailurl\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoFieldValue\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"somefield\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.options.imageField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field from which the background image will be pulled.\nIf <a href=\"https://coveo.github.io/search-ui/components/backdrop.html#options.imageurl\">Backdrop.options.imageUrl</a> is specified, it will override this option.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.options.imageUrl",
		"notSupportedIn": "",
		"comment": "<p>Specifies a direct URL from which the background image will be sourced.\nHas priority over <a href=\"https://coveo.github.io/search-ui/components/backdrop.html#options.imagefield\">Backdrop.options.imageField</a>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.options.overlayColor",
		"notSupportedIn": "",
		"comment": "<p>Specifies the color that will be overlaid on top of the background image.\nThis option needs to be declared as a CSS color. Be sure to use RGBA with an alpha value lower than 1 in order to\nbe able to see the image behind the overlay color.\nExample value : &quot;<code>rgba(101, 123, 76, 0.5)</code>&quot;</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Backdrop.options.overlayGradient",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the overlay color should be instead be rendered as a top-to-bottom gradient from\n<a href=\"https://coveo.github.io/search-ui/components/backdrop.html#options.overlaycolor\">Backdrop.options.overlayColor</a> to transparent.\nDefault value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "overlayColor",
			"defaultValue": "false"
		}
	},
	{
		"name": "Backdrop.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Backdrop component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge",
		"notSupportedIn": "",
		"comment": "<p>The Badge component outputs a field value with customizable colors and an icon preceding it.\nThis component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>). It\nextends the <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html\">FieldValue</a> component. Therefore all FieldValue options are also available for a Badge component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.options.colors",
		"notSupportedIn": "",
		"comment": "<p>Specifies the colors for the Badge component.\nYou must specify the colors in a JSON format similar to what follows:</p>\n<pre><code class=\"lang-json\">{\n  <span class=\"hljs-attr\">\"values\"</span>:{\n    <span class=\"hljs-attr\">\"foo\"</span>:{\n      <span class=\"hljs-attr\">\"icon\"</span>:<span class=\"hljs-string\">\"blue\"</span>,\n      <span class=\"hljs-attr\">\"text\"</span>:<span class=\"hljs-string\">\"#222\"</span>\n    },\n    <span class=\"hljs-attr\">\"bar\"</span>:{\n      <span class=\"hljs-attr\">\"icon\"</span>:<span class=\"hljs-string\">\"green\"</span>,\n      <span class=\"hljs-attr\">\"text\"</span>:<span class=\"hljs-string\">\"lightgreen\"</span>\n    }\n  },\n  <span class=\"hljs-attr\">\"icon\"</span>:<span class=\"hljs-string\">\"red\"</span>,\n  <span class=\"hljs-attr\">\"text\"</span>:<span class=\"hljs-string\">\"#9ab52b\"</span>\n}\n</code></pre>\n<p>This format allows you to customize both the icon and text colors for each field value as well as the default\nvalues.</p>\n<p>Colors can be specified in HTML or hexadecimal format.</p>\n",
		"type": "IBadgeColors",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Badge.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Badge component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb",
		"notSupportedIn": "",
		"comment": "<p>The Breadcrumb component displays a summary of the currently active query filters.\nFor example, when the user selects a <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> value, the breadcrumbs display this value.</p>\n<p>The active filters are obtained by the component by firing an event in the Breadcrumb component.</p>\n<p>All other components having an active state can react to this event by providing custom bits of HTML to display\ninside the breadcrumbs.</p>\n<p>Thus, it is possible to easily extend the Breadcrumb component using custom code to display information about custom\nstates and filters.</p>\n<p>See <a href=\"https://coveo.github.io/search-ui/classes/breadcrumbevents.html\">BreadcrumbEvents</a> for the list of events and parameters sent when a Breadcrumb component is populated.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Breadcrumb.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Breadcrumb component. Binds event on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#deferredquerysuccess\">QueryEvents.deferredQuerySuccess</a> to draw the\nbreadcrumbs.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar",
		"notSupportedIn": "",
		"comment": "<p>The <code>CardActionBar</code> component displays an action bar at the bottom of a card result (see\n<a href=\"https://docs.coveo.com/en/360/\">Result Layouts</a>). It is a simple container for buttons or complementary\ninformation.\nYou should place this component at the bottom of a card result template (i.e., as the last child of the surrounding\n<code>coveo-result-frame</code> div).</p>\n<p>See <a href=\"https://docs.coveo.com/en/1349/#using-the-cardactionbar-component\">Using the CardActionBar Component</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardActionBar.options.hidden",
		"notSupportedIn": "",
		"comment": "<p>Whether to hide the component by default and append a visual indicator to its parent query result.\nIf this option is set to <code>true</code>, the component will show itself when the user clicks its parent query result.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "CardActionBar.options.openOnMouseOver",
		"notSupportedIn": "",
		"comment": "<p>Whether to open the <code>CardActionBar</code> when the cursor hovers over it.\nThis option is only meaningful when <a href=\"https://coveo.github.io/search-ui/components/cardactionbar.html#options.hidden\"><code>hidden</code></a> is set to <code>true</code>.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "hidden",
			"defaultValue": "true"
		}
	},
	{
		"name": "CardActionBar.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>CardActionBar</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay",
		"notSupportedIn": "",
		"comment": "<p>The CardOverlay component displays a button that the user can click to toggle the visibility of an overlay on top of\nan <a href=\"https://coveo.github.io/search-ui/interfaces/iqueryresult.html\">IQueryResult</a>. While this component typically populates a <a href=\"https://coveo.github.io/search-ui/components/cardactionbar.html\">CardActionBar</a> component, it is actually\npossible to place a CardOverlay component anywhere in any result.\nThe primary purpose of the CardOverlay component is to display additional information about a result in a format that\nfits well within a card result layout (see <a href=\"https://docs.coveo.com/en/360/\">Result Layouts</a>).</p>\n<p>When initialized, this component creates a <code>&lt;div class=&quot;coveo-card-overlay&quot;&gt;</code> element as the last child of its parent\nIQueryResult, and displays a button which toggles the visibility of the overlay.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.options.icon",
		"notSupportedIn": "",
		"comment": "<p>Specifies the icon to use for the overlay icon and for the button icon.\nThe name of the icon to use should be specified in dashed case. ie: facet-expand</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlay.options.title",
		"notSupportedIn": "",
		"comment": "<p>Specifies the string to use for the overlay title and for the button text.\nSetting a value for this option is required for this component to work.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "CardOverlay.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new CardOverlay component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>The <code>CategoryFacet</code> component is a facet that renders values in a hierarchical fashion. It determines the filter to apply depending on the\ncurrent selected path of values.\nThe path is a sequence of values that leads to a specific value in the hierarchy.\nIt is an array listing all the parents of a file (e.g., <code>[&#39;c&#39;, &#39;folder1&#39;]</code> for the <code>c:\\folder1\\text1.txt</code> file).</p>\n<p>This facet requires a <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.field\"><code>field</code></a> with a special format to work correctly (see <a href=\"https://docs.coveo.com/en/2667\">Using the Category Facet Component</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.options.basePath",
		"notSupportedIn": "",
		"comment": "<p>The path to use as the path prefix for every query.\n<strong>Example:</strong></p>\n<p>You have the following files indexed on a file system:</p>\n<pre><code>c:<span class=\"hljs-string\">\\</span>\n   folder1<span class=\"hljs-string\">\\</span>\n     text1.txt\n   folder2<span class=\"hljs-string\">\\</span>\n     folder3<span class=\"hljs-string\">\\</span>\n       text2.txt\n</code></pre><p>Setting the <code>basePath</code> to <code>c</code> would display <code>folder1</code> and <code>folder2</code> in the <code>CategoryFacet</code>, but omit <code>c</code>.</p>\n<p>This options accepts an array of values. To specify a &quot;deeper&quot; starting path in your tree, you need to use comma-separated values.</p>\n<p>For example, setting <code>data-base-path=&quot;c,folder1&quot;</code> on the component markup would display <code>folder3</code> in the <code>CategoryFacet</code>, but omit <code>c</code> and <code>folder1</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "[]"
		}
	},
	{
		"name": "CategoryFacet.options.debug",
		"notSupportedIn": "",
		"comment": "<p>Whether to activate field format debugging.\nThis options logs messages in the console for any potential encountered issues.\nThis option can have negative effects on performance, and should only be activated when debugging.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "CategoryFacet.options.delimitingCharacter",
		"notSupportedIn": "",
		"comment": "<p>The character that specifies the hierarchical dependency.\n<strong>Example:</strong></p>\n<p>If your field has the following values:</p>\n<p><code>@field: c; c&gt;folder2; c&gt;folder2&gt;folder3;</code></p>\n<p>The delimiting character is <code>&gt;</code>.</p>\n<p>Default value is <code>|</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "|"
		}
	},
	{
		"name": "CategoryFacet.options.dependsOn",
		"notSupportedIn": "",
		"comment": "<p>The <a href=\"@link Facet.options.id\">id</a> of another facet in which at least one value must be selected in order\nfor the dependent category facet to be visible.\n<strong>Default:</strong> <code>undefined</code> and the category facet does not depend on any other facet to be displayed.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.options.enableFacetSearch",
		"notSupportedIn": "",
		"comment": "<p>Whether to display a search box at the bottom of the facet for searching among the available facet\n<a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.field\"><code>field</code></a> values.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.facetsearchdelay\"><code>facetSearchDelay</code></a>, and\n<a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.numberofresultsinfacetsearch\"><code>numberOfResultsInFacetSearch</code></a> options.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "CategoryFacet.options.enableMoreLess",
		"notSupportedIn": "",
		"comment": "<p>Whether to enable the <strong>More</strong> and <strong>Less</strong> buttons in the Facet.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.pagesize\"><code>pageSize</code></a> option.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "CategoryFacet.options.facetSearchDelay",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.enablefacetsearch\"><code>enableFacetSearch</code></a> option is <code>true</code>, specifies the delay (in\nmilliseconds) before sending a search request to the server when the user starts typing in the category facet search box.\nSpecifying a smaller value makes results appear faster. However, chances of having to cancel many requests\nsent to the server increase as the user keeps on typing new characters.</p>\n<p>Default value is <code>100</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "100"
		}
	},
	{
		"name": "CategoryFacet.options.field",
		"notSupportedIn": "",
		"comment": "<p>The index field whose values the facet should use. The field values should have the form:\n<code>the; the|path; the|path|to; the|path|to|given; the|path|to|given|item;</code>\nwhere the delimiting character is <code>|</code>. This default delimiting character can be changed using the <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.delimitingcharacter\">delimitingCharacter</a> option.\nTo help you verify whether your fields are setup correctly, see the <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.debug\">CategoryFacet.options.debug</a> option\nand the <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#debugvalue\">CategoryFacet.debugValue</a> method.</p>\n<p>See <a href=\"https://docs.coveo.com/en/2667\">Using the Category Facet Component</a>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "CategoryFacet.options.id",
		"notSupportedIn": "",
		"comment": "<p>A unique identifier for the facet. Among other things, this identifier serves the purpose of saving\nthe facet state in the URL hash.\nIf you have two facets with the same field on the same page, you should specify an <code>id</code> value for at least one of\nthose two facets. This <code>id</code> must be unique among the facets.</p>\n<p>Default value is the <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.field\"><code>field</code></a> option value.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.options.injectionDepth",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>The <em>injection depth</em> to use.\nThe injection depth determines how many results to scan in the index to ensure that the category facet lists all potential\nfacet values. Increasing this value enhances the accuracy of the listed values at the cost of performance.</p>\n<p>Default value is <code>1000</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "1000"
		}
	},
	{
		"name": "CategoryFacet.options.maximumDepth",
		"notSupportedIn": "",
		"comment": "<p>The maximum number of levels to traverse in the hierarchy.\nThis option does not count the length of the base path. The depth depends on what is shown in the interface.\nDefault value is <code>Number.MAX_VALUE</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1"
		}
	},
	{
		"name": "CategoryFacet.options.numberOfResultsInFacetSearch",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.enablefacetsearch\"><code>enableFacetSearch</code></a> option is <code>true</code>, specifies the number of\nvalues to display in the facet search results popup.\nDefault value is <code>15</code>. Minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1",
			"defaultValue": "15"
		}
	},
	{
		"name": "CategoryFacet.options.numberOfValues",
		"notSupportedIn": "",
		"comment": "<p>The maximum number of field values to display by default in the facet before the user\nclicks the arrow to show more.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.enablemoreless\"><code>enableMoreLess</code></a> option.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "5"
		}
	},
	{
		"name": "CategoryFacet.options.pageSize",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html#options.enablemoreless\"><code>enableMoreLess</code></a> option is <code>true</code>, specifies the number of\nadditional results to fetch when clicking the <strong>More</strong> button.\nDefault value is <code>10</code>. Minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableMoreLess",
			"min": "1",
			"defaultValue": "10"
		}
	},
	{
		"name": "CategoryFacet.options.title",
		"notSupportedIn": "",
		"comment": "<p>The title to display at the top of the facet.\nDefault value is the localized string for <code>NoTitle</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.options.valueCaption",
		"notSupportedIn": "",
		"comment": "<p>Specifies a JSON object describing a mapping of facet values to their desired captions. See\n<a href=\"https://developers.coveo.com/x/jBsvAg\">Normalizing Facet Value Captions</a>.\n<strong>Note:</strong>\nIf this option is specified, the facet search box will be unavailable.</p>\n<p><strong>Examples:</strong></p>\n<p>You can set the option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">&#39;init&#39;</a> call:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> myValueCaptions = {\n  <span class=\"hljs-string\">\"txt\"</span> : <span class=\"hljs-string\">\"Text files\"</span>,\n  <span class=\"hljs-string\">\"html\"</span> : <span class=\"hljs-string\">\"Web page\"</span>,\n  [ ... ]\n};\n\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n  <span class=\"hljs-attr\">Facet</span> : {\n    <span class=\"hljs-attr\">valueCaption</span> : myValueCaptions\n  }\n});\n</code></pre>\n<p>Or before the <code>init</code> call, using the &#39;options&#39; top-level function:</p>\n<pre><code class=\"lang-javascript\">Coveo.options(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n  <span class=\"hljs-attr\">Facet</span> : {\n    <span class=\"hljs-attr\">valueCaption</span> : myValueCaptions\n  }\n});\n</code></pre>\n<p>Or directly in the markup:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- Ensure that the double quotes are properly handled in data-value-caption. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoCategoryFacet'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myotherfield'</span> <span class=\"hljs-attr\">data-value-caption</span>=<span class=\"hljs-string\">'{\"txt\":\"Text files\",\"html\":\"Web page\"}'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CategoryFacet.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean",
		"notSupportedIn": "",
		"comment": "<p>The DidYouMean component is responsible for displaying query corrections. If this component is in the page and the\nquery returns no result but finds a possible query correction, the component either suggests the correction or\nautomatically triggers a new query with the suggested term.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DidYouMean.options.enableAutoCorrection",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the DidYouMean component automatically triggers a new query when a query returns no result and\na possible correction is available.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "DidYouMean.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new DidYouMean component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources",
		"notSupportedIn": "",
		"comment": "<p>The <code>DistanceResources</code> component defines a field that computes the distance according to the current position of the\nend user.\nComponents relying on the current distance should be disabled until this component successfully provides a distance.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/classes/distanceevents.html\"><code>DistanceEvents</code></a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.options",
		"notSupportedIn": "",
		"comment": "<p>The possible options for a DistanceResources.</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.options.cancelQueryUntilPositionResolved",
		"notSupportedIn": "",
		"comment": "<p>Whether to cancel all the queries until the <code>DistanceResources</code> component successfully resolves a position.\nDefault value is <code>true</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "DistanceResources.options.disabledDistanceCssClass",
		"notSupportedIn": "",
		"comment": "<p>The CSS class for components that need to be re-enabled when the <code>DistanceResources</code> component successfully\nprovides a distance.\nDefault value is <code>coveo-distance-disabled</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "coveo-distance-disabled"
		}
	},
	{
		"name": "DistanceResources.options.distanceField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the field in which to store the distance value.\nSpecifying a value for this option is required for the <code>DistanceResources</code> component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "DistanceResources.options.googleApiKey",
		"notSupportedIn": "",
		"comment": "<p>The API key to use to request the Google API geolocation service.\nIf you do not specify a value for this option, the <code>DistanceResources</code> component does not try to request the\nservice.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.options.latitudeField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the field that contains the latitude value.\n<strong>Note:</strong></p>\n<blockquote>\n<p>The field you specify for this option must be an existing numerical field in your index (see\n<a href=\"https://docs.coveo.com/en/1833/\">Adding and Managing Fields</a>. Otherwise, your query responses\nwill contain a <code>QueryExceptionInvalidQueryFunctionField</code> or QueryExceptionInvalidQueryFunctionFieldType`\nexception, and the DistanceResources component will be unable to evaluate distances.</p>\n</blockquote>\n<p>Specifying a value for this option is required for the <code>DistanceResources</code> component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "DistanceResources.options.latitudeValue",
		"notSupportedIn": "",
		"comment": "<p>The latitude to use if no other position was provided.\n<strong>Note:</strong></p>\n<blockquote>\n<p>You must also specify a <a href=\"https://coveo.github.io/search-ui/components/distanceresources.html#options.longitudevalue\"><code>longitudeValue</code></a> if you specify a\n<code>latitudeValue</code>.</p>\n</blockquote>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"float": "true"
		}
	},
	{
		"name": "DistanceResources.options.longitudeField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the field that contains the longitude value.\n<strong>Note:</strong></p>\n<blockquote>\n<p>The field you specify for this option must be an existing numerical field in your index (see\n<a href=\"https://docs.coveo.com/en/1833/\">Adding and Managing Fields</a>. Otherwise, your query responses\nwill contain a <code>QueryExceptionInvalidQueryFunctionField</code> or QueryExceptionInvalidQueryFunctionFieldType`\nexception, and the DistanceResources component will be unable to evaluate distances.</p>\n</blockquote>\n<p>Specifying a value for this option is required for the <code>DistanceResources</code> component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "DistanceResources.options.longitudeValue",
		"notSupportedIn": "",
		"comment": "<p>The longitude to use if no other position was provided.\n<strong>Note:</strong></p>\n<blockquote>\n<p>You must also specify a <a href=\"https://coveo.github.io/search-ui/components/distanceresources.html#options.latitudevalue\"><code>latitudeValue</code></a> if you specify a\n<code>longitudeValue</code>.</p>\n</blockquote>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"float": "true"
		}
	},
	{
		"name": "DistanceResources.options.triggerNewQueryOnNewPosition",
		"notSupportedIn": "",
		"comment": "<p>Whether to execute a new query when the <code>DistanceResources</code> component successfully provides a new position.\nDefault value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "DistanceResources.options.unitConversionFactor",
		"notSupportedIn": "",
		"comment": "<p>The conversion factor to apply to the base distance unit (meter).\n<strong>Note:</strong></p>\n<blockquote>\n<ul>\n<li>If you want to convert distances to kilometers, you should set the <code>unitConversionFactor</code> to <code>1000</code>.</li>\n<li>If you want to convert distance to miles, you should set the <code>unitConversionFactor</code> to <code>1610</code> (one mile is\napproximately equal to 1610 meters).</li>\n</ul>\n</blockquote>\n<p>Default value is <code>1000</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "1000"
		}
	},
	{
		"name": "DistanceResources.options.useNavigator",
		"notSupportedIn": "",
		"comment": "<p>Whether to request the geolocation service of the web browser.\nIf not defined, will not try to request the service.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Recent web browsers typically require a site to be in HTTPS to enable their geolocation service.</p>\n</blockquote>\n<p>If you do not specify a value for this option, the <code>DistanceResources</code> component does not try to request the\nservice.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceResources.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>DistanceResources</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>The <code>DynamicFacet</code> component displays a <em>facet</em> of the results for the current query. A facet is a list of values for a\ncertain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\nThe list of values is obtained using an array of <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html\"><code>FacetRequest</code></a> operations performed at the same time\nas the main query.</p>\n<p>The <code>DynamicFacet</code> component allows the end-user to drill down inside a result set by restricting the result to certain\nfield values.</p>\n<p>This facet is more easy to use than the original <a href=\"https://coveo.github.io/search-ui/components/facet.html\"><code>Facet</code></a> component. It implements additional Coveo Machine Learning (Coveo ML) features\nsuch as dynamic navigation experience (DNE).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the DynamicFacet</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.options.collapsedByDefault",
		"notSupportedIn": "",
		"comment": "<p>Whether this facet should be collapsed by default.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableCollapse",
			"defaultValue": "false"
		}
	},
	{
		"name": "DynamicFacet.options.dependsOn",
		"notSupportedIn": "",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.id-1\"><code>id</code></a> of another facet in which at least one value must be selected in order for the dependent facet to be visible.\nBy default, the facet does not depend on any other facet to be displayed.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.options.enableCollapse",
		"notSupportedIn": "",
		"comment": "<p>Whether to allow the end-user to expand and collapse this facet.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "DynamicFacet.options.enableFacetSearch",
		"notSupportedIn": "",
		"comment": "<p>Whether to allow the end-user to search the facet values.\n<strong>Note:</strong> The <a href=\"https://coveo.github.io/search-ui/components/dynamicfacetrange.html\"><code>DynamicFacetRange</code></a> component does not support this option.</p>\n<p>By default, the following behavior applies:</p>\n<ul>\n<li>Enabled when more facet values are available.</li>\n<li>Disabled when all available facet values are already displayed.</li>\n</ul>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.options.enableMoreLess",
		"notSupportedIn": "",
		"comment": "<p>Whether to enable the <strong>Show more</strong> and <strong>Show less</strong> buttons in the facet.\n<strong>Note:</strong> The <a href=\"https://coveo.github.io/search-ui/components/dynamicfacetrange.html\"><code>DynamicFacetRange</code></a> component does not support this option.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "DynamicFacet.options.enableScrollToTop",
		"notSupportedIn": "",
		"comment": "<p>Whether to scroll back to the top of the page whenever the end-user interacts with the facet.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "DynamicFacet.options.field",
		"notSupportedIn": "",
		"comment": "<p>The name of the field on which to base this facet.\nMust be prefixed by <code>@</code>, and must reference an existing field whose\n<strong>Facet</strong> option is enabled.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "DynamicFacet.options.id",
		"notSupportedIn": "",
		"comment": "<p>The unique identifier for this facet.\nAmong other things, this is used to record and read the facet\nstate in the URL fragment identifier (see the\n<a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enablehistory\"><code>enableHistory</code></a> <code>SearchInterface</code>\noption).</p>\n<p><strong>Tip:</strong> When several facets in a given search interface are based on\nthe same field, ensure that each of those facets has a distinct <code>id</code>.</p>\n<p>If specified, must contain between 1 and 60 characters.\nOnly alphanumeric (A-Za-z0-9), underscore (_), and hyphen (-) characters are kept; other characters are automatically removed.</p>\n<p>Defaults to the <a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.field\"><code>field</code></a> option value.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.options.includeInBreadcrumb",
		"notSupportedIn": "",
		"comment": "<p>Whether to notify the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\"><code>Breadcrumb</code></a> component when toggling values in the facet.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.numberofvaluesinbreadcrumb\"><code>numberOfValuesInBreadcrumb</code></a> option.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "DynamicFacet.options.injectionDepth",
		"notSupportedIn": "",
		"comment": "<p>The number of items to scan for facet values.\nSetting this option to a higher value may enhance the accuracy of facet value counts at the cost of slower query performance.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "1000"
		}
	},
	{
		"name": "DynamicFacet.options.numberOfValues",
		"notSupportedIn": "",
		"comment": "<p>The number of values to request for this facet.\nAlso determines the default maximum number of additional values to request each time this facet is expanded,\nand the maximum number of values to display when this facet is collapsed (see the <a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.enablecollapse\"><code>enableCollapse</code></a> option).</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "8"
		}
	},
	{
		"name": "DynamicFacet.options.numberOfValuesInBreadcrumb",
		"notSupportedIn": "",
		"comment": "<p>The maximum number of selected values the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\"><code>Breadcrumb</code></a> component can display before outputting a <strong>N more...</strong> link for the facet.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "includeInBreadcrumb",
			"min": "0"
		}
	},
	{
		"name": "DynamicFacet.options.sortCriteria",
		"notSupportedIn": "",
		"comment": "<p>The sort criterion to use for this facet.\nSee <a href=\"https://coveo.github.io/search-ui/enums/facetsortcriteria.html\"><code>FacetSortCriteria</code></a> for the list and\ndescription of allowed values.</p>\n<p>By default, the following behavior applies:</p>\n<ul>\n<li>If the requested <a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.numberofvalues\"><code>numberOfValues</code></a>\nis greater than or equal to the currently displayed number of values,\nthe <a href=\"https://coveo.github.io/search-ui/enums/facetsortcriteria.html#alphanumeric\"><code>alphanumeric</code></a> criterion is\nused.</li>\n<li>If the requested <code>numberOfValues</code> is less than the currently displayed\nnumber of values and the facet is not currently expanded, the <a href=\"https://coveo.github.io/search-ui/enums/facetsortcriteria.html#score\"><code>score</code></a>\ncriterion is used.</li>\n<li>Otherwise, the <code>alphanumeric</code> criterion is used.</li>\n</ul>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.options.title",
		"notSupportedIn": "",
		"comment": "<p>The title to display for this facet.\nDefaults to the localized string for <code>NoTitle</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.options.useLeadingWildcardInFacetSearch",
		"notSupportedIn": "",
		"comment": "<p>Whether to prepend facet search queries with a wildcard.\n<strong>Note:</strong> The <a href=\"https://coveo.github.io/search-ui/components/dynamicfacetrange.html\"><code>DynamicFacetRange</code></a> component does not support this option.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableFacetSearch",
			"defaultValue": "true"
		}
	},
	{
		"name": "DynamicFacet.options.valueCaption",
		"notSupportedIn": "",
		"comment": "<p>A mapping of facet values to their desired captions.\n<strong>Note:</strong> The <a href=\"https://coveo.github.io/search-ui/components/dynamicfacetrange.html\"><code>DynamicFacetRange</code></a> component does not support this option.</p>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacet.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>DynamicFacet</code> instance.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager",
		"notSupportedIn": "",
		"comment": "<p>The <code>DynamicFacetManager</code> component is meant to be a parent for multiple <a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html\">DynamicFacet</a> &amp; <a href=\"https://coveo.github.io/search-ui/components/dynamicfacetrange.html\">DynamicFacetRange</a> components.\nThis component allows controlling a set of <a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html\"><code>DynamicFacet</code></a> and <a href=\"https://coveo.github.io/search-ui/components/dynamicfacetrange.html\"><code>DynamicFacetRange</code></a> as a group.\nSee <a href=\"https://docs.coveo.com/en/2917/\">Using Dynamic Facets</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the DynamicFacetManager</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.options.compareFacets",
		"notSupportedIn": "",
		"comment": "<p>A custom sort function to execute on facets on every successful query response (see <a href=\"https://docs.coveo.com/en/2902/#implementing-a-custom-dynamic-facet-sort-function\">Implementing a Custom Dynamic Facet Sort Function</a>).\n<strong>Note:</strong></p>\n<blockquote>\n<p>If specified, the function must implement the JavaScript compareFunction (see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">Array.prototype.sort</a>.\nYou cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\n<a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface (see\n<a href=\"https://developers.coveo.com/x/PoGfAQ#Components-PassingComponentOptionsintheinitCall\">Passing Component Options in the init Call</a>),\nor before the <code>init</code> call, using the <code>options</code> top-level function (see\n<a href=\"https://developers.coveo.com/x/PoGfAQ#Components-PassingComponentOptionsBeforetheinitCall\">Passing Component Options Before the init Call</a>).</p>\n</blockquote>\n",
		"type": "IDynamicFacetManagerCompareFacet",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.options.enableReorder",
		"notSupportedIn": "",
		"comment": "<p>Whether to allow the reordering of facets based on Coveo ML and index ranking scores.\n<strong>Default:</strong> <code>true</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "DynamicFacetManager.options.maximumNumberOfExpandedFacets",
		"notSupportedIn": "",
		"comment": "<p>The maximum number of expanded facets inside the manager.\nRemaining facets are collapsed.\n<strong>Note:</strong>\nPrioritizes facets with active values, and then prioritizes first facets.\nIf the number of facets with active values exceeds the value of the <code>maximumNumberOfExpandedFacets</code> option, it overrides the option.</p>\n<p>Using the value <code>-1</code> disables the feature and keeps all facets expanded.</p>\n<p><strong>Default:</strong> <code>4</code></p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "4"
		}
	},
	{
		"name": "DynamicFacetManager.options.onUpdate",
		"notSupportedIn": "",
		"comment": "<p>A function to execute whenever facets are updated in the query response (see <a href=\"https://docs.coveo.com/en/2902/#implementing-custom-dynamic-facet-behaviors\">Implementing Custom Dynamic Facet Behaviors</a>).\n<strong>Note:</strong></p>\n<blockquote>\n<p>You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\n<a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface (see\n<a href=\"https://developers.coveo.com/x/PoGfAQ#Components-PassingComponentOptionsintheinitCall\">Passing Component Options in the init Call</a>),\nor before the <code>init</code> call, using the <code>options</code> top-level function (see\n<a href=\"https://developers.coveo.com/x/PoGfAQ#Components-PassingComponentOptionsBeforetheinitCall\">Passing Component Options Before the init Call</a>).</p>\n</blockquote>\n",
		"type": "IDynamicFacetManagerOnUpdate",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetManager.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>DynamicFacetManager</code> instance.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>A <code>DynamicFacetRange</code> is a <a href=\"https://docs.coveo.com/en/198/\">facet</a> whose values are expressed as ranges.\nYou must set the <a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.field\"><code>field</code></a> option to a value targeting a numeric or date <a href=\"https://docs.coveo.com/en/200/\">field</a>\nin your index for this component to work.</p>\n<p>This component extends the <a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html\"><code>DynamicFacet</code></a> component and supports all <code>DynamicFacet</code> options except:</p>\n<ul>\n<li><a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.enablefacetsearch\"><code>enableFacetSearch</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.useleadingwildcardinfacetsearch\"><code>useLeadingWildcardInFacetSearch</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.enablemoreless\"><code>enableMoreLess</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.valuecaption\"><code>valueCaption</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.sortcriteria\"><code>sortCriteria</code></a></li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the DynamicFacetRange</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.options.currencySymbol",
		"notSupportedIn": "",
		"comment": "<p>The currency symbol to use if the <code>valueFormat</code> is <a href=\"https://coveo.github.io/search-ui/enums/dynamicfacetrangevalueformat.html#currency\"><code>currency</code></a>.\nBy default, the component uses the currency associated with the currently loaded culture file (see <a href=\"https://docs.coveo.com/421/\">Changing the Language of Your Search Interface</a>).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.options.ranges",
		"notSupportedIn": "",
		"comment": "<p>The list of <a href=\"https://coveo.github.io/search-ui/interfaces/irangevalue.html\">range values</a> to request (see <a href=\"https://docs.coveo.com/en/2790/\">Requesting Specific FacetRange Values</a>).\nThis value will override the <a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.numberofvalues\"><code>numberOfValues</code></a> value.</p>\n<p><strong>Required:</strong> Specifying a value for this option is required for the component to work.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "DynamicFacetRange.options.valueFormat",
		"notSupportedIn": "",
		"comment": "<p>The string format to apply to the minimum and maximum value of each range displayed in the facet.\n<strong>Default:</strong> <a href=\"https://coveo.github.io/search-ui/enums/dynamicfacetrangevalueformat.html#number\"><code>number</code></a></p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.options.valueSeparator",
		"notSupportedIn": "",
		"comment": "<p>The label to insert between the minimum and maximum value of each range displayed in the facet.\n<strong>Default:</strong> The localized string for <code>to</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRange.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>DynamicFacetRange</code> instance.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>The <code>DynamicHierarchicalFacet</code> component is a facet that renders values in a hierarchical fashion. It determines the filter to apply depending on the\ncurrent selected path of values.\nThe path is a sequence of values that leads to a specific value in the hierarchy.\nIt is an array listing all the parents of a file (e.g., <code>[&#39;c&#39;, &#39;folder1&#39;]</code> for the <code>c:\\folder1\\text1.txt</code> file).</p>\n<p>This facet requires a <a href=\"https://coveo.github.io/search-ui/components/dynamichierarchicalfacet.html#options.field\"><code>field</code></a> with a special format to work correctly (see <a href=\"https://docs.coveo.com/en/2667\">Using the Hierarchical Facet Component</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the DynamicHierarchicalFacet</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.options.clearLabel",
		"notSupportedIn": "",
		"comment": "<p>The label to display to clear the facet when a value is selected.\nDefault value is the localized string for <code>AllCategories</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.options.collapsedByDefault",
		"notSupportedIn": "",
		"comment": "<p>Whether this facet should be collapsed by default.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/dynamichierarchicalfacet.html#options.enablecollapse\"><code>enableCollapse</code></a>\noption.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableCollapse",
			"defaultValue": "false"
		}
	},
	{
		"name": "DynamicHierarchicalFacet.options.delimitingCharacter",
		"notSupportedIn": "",
		"comment": "<p>The character that specifies the hierarchical dependency.\n<strong>Example:</strong></p>\n<p>If your field has the following values:</p>\n<p><code>@field: c; c&gt;folder2; c&gt;folder2&gt;folder3;</code></p>\n<p>The delimiting character is <code>&gt;</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "|"
		}
	},
	{
		"name": "DynamicHierarchicalFacet.options.dependsOn",
		"notSupportedIn": "",
		"comment": "<p>The <code>id</code> option value of another facet in which at least one value must be selected in order\nfor the dependent hierarchical facet to be visible.\n<strong>Default:</strong> <code>undefined</code> and the hierarchical facet does not depend on any other facet to be displayed.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.options.enableCollapse",
		"notSupportedIn": "",
		"comment": "<p>Whether to allow the end-user to expand and collapse this facet.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "DynamicHierarchicalFacet.options.enableMoreLess",
		"notSupportedIn": "",
		"comment": "<p>Whether to enable the <strong>More</strong> and <strong>Less</strong> buttons in the Facet.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/dynamichierarchicalfacet.html#options.numberofvalues\"><code>numberOfValues</code></a> option.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "DynamicHierarchicalFacet.options.enableScrollToTop",
		"notSupportedIn": "",
		"comment": "<p>Whether to scroll back to the top of the page whenever the end-user interacts with a facet.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "DynamicHierarchicalFacet.options.field",
		"notSupportedIn": "",
		"comment": "<p>The index field whose values the facet should use. The field values should have the form:\n<code>the; the|path; the|path|to; the|path|to|given; the|path|to|given|item;</code>\nwhere the delimiting character is <code>|</code>. This default delimiting character can be changed using the <a href=\"https://coveo.github.io/search-ui/components/dynamichierarchicalfacet.html#options.delimitingcharacter\">delimitingCharacter</a> option.\nTo help you verify whether your fields are setup correctly, see the DynamicHierarchicalFacet.options.debug option\nand the DynamicHierarchicalFacet.debugValue method.</p>\n<p>See <a href=\"https://docs.coveo.com/en/2667\">Using the Hierarchical Facet Component</a>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "DynamicHierarchicalFacet.options.id",
		"notSupportedIn": "",
		"comment": "<p>A unique identifier for the facet. Among other things, this identifier serves the purpose of saving\nthe facet state in the URL hash.\nIf you have two facets with the same field on the same page, you should specify an <code>id</code> value for at least one of\nthose two facets. This <code>id</code> must be unique among the facets.</p>\n<p>Default value is the <a href=\"https://coveo.github.io/search-ui/components/dynamichierarchicalfacet.html#options.field\"><code>field</code></a> option value.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.options.includeInBreadcrumb",
		"notSupportedIn": "",
		"comment": "<p>Whether to notify the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a> component when toggling values in the facet.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "DynamicHierarchicalFacet.options.injectionDepth",
		"notSupportedIn": "",
		"comment": "<p>The number of items to scan for facet values.\nSetting this option to a higher value may enhance the accuracy of facet value counts at the cost of slower query performance.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "1000"
		}
	},
	{
		"name": "DynamicHierarchicalFacet.options.numberOfValues",
		"notSupportedIn": "",
		"comment": "<p>The maximum number of field values to display by default in the facet before the user\nclicks the arrow to show more.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/dynamichierarchicalfacet.html#options.enablemoreless\"><code>enableMoreLess</code></a> option.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "5"
		}
	},
	{
		"name": "DynamicHierarchicalFacet.options.title",
		"notSupportedIn": "",
		"comment": "<p>The title to display at the top of the facet.\nDefault value is the localized string for <code>NoTitle</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.options.valueCaption",
		"notSupportedIn": "",
		"comment": "<p>Specifies a JSON object describing a mapping of facet values to their desired captions. See\n<a href=\"https://developers.coveo.com/x/jBsvAg\">Normalizing Facet Value Captions</a>.\n<strong>Note:</strong>\nIf this option is specified, the facet search box will be unavailable.</p>\n<p><strong>Examples:</strong></p>\n<p>You can set the option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">&#39;init&#39;</a> call:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> myValueCaptions = {\n  <span class=\"hljs-string\">\"txt\"</span> : <span class=\"hljs-string\">\"Text files\"</span>,\n  <span class=\"hljs-string\">\"html\"</span> : <span class=\"hljs-string\">\"Web page\"</span>,\n  [ ... ]\n};\n\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n  <span class=\"hljs-attr\">Facet</span> : {\n    <span class=\"hljs-attr\">valueCaption</span> : myValueCaptions\n  }\n});\n</code></pre>\n<p>Or before the <code>init</code> call, using the &#39;options&#39; top-level function:</p>\n<pre><code class=\"lang-javascript\">Coveo.options(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n  <span class=\"hljs-attr\">Facet</span> : {\n    <span class=\"hljs-attr\">valueCaption</span> : myValueCaptions\n  }\n});\n</code></pre>\n<p>Or directly in the markup:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- Ensure that the double quotes are properly handled in data-value-caption. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoDynamicHierarchicalFacet'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myotherfield'</span> <span class=\"hljs-attr\">data-value-caption</span>=<span class=\"hljs-string\">'{\"txt\":\"Text files\",\"html\":\"Web page\"}'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicHierarchicalFacet.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport",
		"notSupportedIn": "",
		"comment": "<p>The ErrorReport component takes care of handling fatal error when doing a query on the index / Search API.\nFor example, the ErrorReport component displays a message when the service responds with a 401 or 503 error. This\ncomponent also renders a small text area with the JSON content of the error response, for debugging purposes.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ErrorReport.options.showDetailedError",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display a detailed error message as a JSON in a text content area.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "ErrorReport.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new ErrorReport component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt",
		"notSupportedIn": "",
		"comment": "<p>The Excerpt component renders an excerpt of its associated result and highlights the keywords from the query using\nthe appropriate template helpers.\nThis component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Excerpt.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Excerpt component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel",
		"notSupportedIn": "",
		"comment": "<p>The ExportToExcel component renders an item in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu to allow the end user to export the current\nsearch results to the Microsoft Excel format (.xlsx).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the ExportToExcel</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.options.fieldsToInclude",
		"notSupportedIn": "",
		"comment": "<p>Specifies the fields to include in the CSV output.\nNote that this does not affect top level properties such as the title, clickUri, printableUri and sysUri, for example.</p>\n<p>Default value is <code>undefined</code>, meaning all fields will be exported.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExportToExcel.options.numberOfResults",
		"notSupportedIn": "",
		"comment": "<p>Specifies the number of results to include in the resulting Excel file.\nGenerating and downloading the Excel file should take a reasonably short amount of time when using the default\nvalue. However, this amount of time will increase exponentially as you set the value higher.</p>\n<p>Consequently, you should avoid setting this value above the default index limit of 1000 search results.</p>\n<p>Default value is <code>100</code>. Minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1",
			"defaultValue": "100"
		}
	},
	{
		"name": "ExportToExcel.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new ExportToExcel component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet",
		"notSupportedIn": "",
		"comment": "<p>The <code>Facet</code> component displays a <em>facet</em> of the results for the current query. A facet is a list of values for a\ncertain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\nThe list of values is obtained using a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\"><code>GroupByRequest</code></a> operation performed at the same time\nas the main query.</p>\n<p>The <code>Facet</code> component allows the end user to drill down inside a result set by restricting the result to certain\nfield values. It also allows filtering out values from the facet itself, and can provide a search box to look for\nspecific values inside larger sets.</p>\n<p>This is probably the most complex component in the Coveo JavaScript Search Framework and as such, it allows for many\nconfiguration options.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> and <a href=\"https://coveo.github.io/search-ui/components/timespanfacet.html\"><code>TimespanFacet</code></a> components (which\nextend this component), and the <a href=\"https://coveo.github.io/search-ui/components/facetslider.html\"><code>FacetSlider</code></a> and <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html\"><code>CategoryFacet</code></a> components (which do not extend this\ncomponent, but are very similar).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.facetSearch",
		"notSupportedIn": "",
		"comment": "<p>Renders and handles the facet <strong>Search</strong> part of the component.</p>\n",
		"type": "FacetSearch",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.facetSettings",
		"notSupportedIn": "",
		"comment": "<p>Renders and handles the facet <strong>Settings</strong> part of the component</p>\n",
		"type": "FacetSettings",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options",
		"notSupportedIn": "",
		"comment": "<p>The possible options for a facet</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.additionalFilter",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>Specifies an additional query expression (query override) to add to each\n<a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\"><code>GroupByRequest</code></a> that this facet performs.\nExample: <code>@date&gt;=2014/01/01</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.allowedValues",
		"notSupportedIn": "",
		"comment": "<p>Specifies an explicit list of <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html#allowedvalues\"><code>allowedValues</code></a> in the\n<a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\"><code>GroupByRequest</code></a>.\nIf you specify a list of values for this option, the facet uses only these values (if they are available in\nthe current result set).</p>\n<p><strong>Example:</strong></p>\n<p>The following facet only uses the <code>Contact</code>, <code>Account</code>, and <code>File</code> values of the <code>@objecttype</code> field. Even if the\ncurrent result set contains other <code>@objecttype</code> values, such as <code>Message</code>, or <code>Product</code>, the facet does not use\nthose other values.</p>\n<pre><code class=\"lang-html\">\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoFacet\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@objecttype\"</span> <span class=\"hljs-attr\">data-title</span>=<span class=\"hljs-string\">\"Object Type\"</span> <span class=\"hljs-attr\">data-tab</span>=<span class=\"hljs-string\">\"All\"</span> <span class=\"hljs-attr\">data-allowed-values</span>=<span class=\"hljs-string\">\"Contact,Account,File\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Default value is <code>undefined</code>, and the facet uses all available values for its\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> in the current result set.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.availableSorts",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettings\"><code>enableSettings</code></a> option is <code>true</code>, specifies the sort criteria\noptions to display in the facet <strong>Settings</strong> menu.\nPossible values are:</p>\n<ul>\n<li><code>&quot;occurrences&quot;</code></li>\n<li><code>&quot;score&quot;</code></li>\n<li><code>&quot;alphaascending&quot;</code></li>\n<li><code>&quot;alphadescending&quot;</code></li>\n<li><code>&quot;computedfieldascending&quot;</code></li>\n<li><code>&quot;computedfielddescending&quot;</code></li>\n<li><code>&quot;custom&quot;</code></li>\n</ul>\n<p>See <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html#sortcriteria\">IGroupByRequest.sortCriteria</a> for a description of each possible value.</p>\n<p><strong>Notes:</strong></p>\n<blockquote>\n<ul>\n<li>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>Using value captions will disable alphabetical sorts (see the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.valuecaption\">valueCaption</a> option).</li>\n</ul>\n</blockquote>\n<p>Default value is <code>occurrences,score,alphaascending,alphadescending</code>.</p>\n",
		"type": "",
		"constrainedValues": [
			"occurrences",
			"occurrences,score",
			"occurrences,score,alphaascending",
			"occurrences,score,alphaascending,alphadescending",
			"occurrences,score,alphaascending,alphadescending,computedfieldascending",
			"occurrences,score,alphaascending,alphadescending,computedfieldascending,computedfielddescending",
			"occurrences,score,alphaascending,alphadescending,computedfieldascending,computedfielddescending,chisquare",
			"occurrences,score,alphaascending,alphadescending,computedfieldascending,computedfielddescending,chisquare,nosort"
		],
		"miscAttributes": {
			"depend": "enableSettings",
			"defaultValue": "[occurrences, score, alphaascending, alphadescending]"
		}
	},
	{
		"name": "Facet.options.computedField",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>Specifies the name of a field on which to execute an aggregate operation for all distinct values of the facet\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a>.\nThe facet displays the result of the operation along with the number of occurrences for each value.</p>\n<p>You can use this option to compute the sum of a field (like a money amount) for each listed facet value.</p>\n<p>Works in conjunction with the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldoperation\"><code>computedFieldOperation</code></a>,\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldformat\"><code>computedFieldFormat</code></a>, and\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldcaption\"><code>computedFieldCaption</code></a> options.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.computedFieldCaption",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>Specifies what the caption of the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfield\"><code>computedField</code></a> should be in the facet\n<strong>Settings</strong> menu for sorting.\nFor example, setting this option to <code>&quot;Money&quot;</code> will display <code>&quot;Money Ascending&quot;</code> for computed field ascending.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</p>\n</blockquote>\n<p>Default value is the localized string for <code>ComputedField</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.computedFieldFormat",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>Specifies how to format the values resulting from a\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldoperation\"><code>computedFieldOperation</code></a>.\nThe Globalize library defines all available formats (see\n<a href=\"https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-\">Globalize</a>).</p>\n<p>The most commonly used formats are:</p>\n<ul>\n<li><code>c0</code> - Formats the value as a currency.</li>\n<li><code>n0</code> - Formats the value as an integer.</li>\n<li><code>n2</code> - Formats the value as a floating point with 2 decimal digits.</li>\n</ul>\n<p>Default value is <code>&quot;c0&quot;</code>.</p>\n",
		"type": "",
		"constrainedValues": [
			"c0,n0,n2"
		],
		"miscAttributes": {
			"defaultValue": "c0"
		}
	},
	{
		"name": "Facet.options.computedFieldOperation",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>Specifies the type of aggregate operation to perform on the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfield\"><code>computedField</code></a>.\nThe possible values are:</p>\n<ul>\n<li><code>sum</code> - Computes the sum of the computed field values.</li>\n<li><code>average</code> - Computes the average of the computed field values.</li>\n<li><code>minimum</code> - Finds the minimum value of the computed field values.</li>\n<li><code>maximum</code> - Finds the maximum value of the computed field values.</li>\n</ul>\n<p>Default value is <code>sum</code>.</p>\n",
		"type": "",
		"constrainedValues": [
			"sum,average,minimum,maximum"
		],
		"miscAttributes": {
			"defaultValue": "sum"
		}
	},
	{
		"name": "Facet.options.customSort",
		"notSupportedIn": "",
		"comment": "<p>Specifies a custom order by which to sort the facet values.\n<strong>Example:</strong></p>\n<p>You could use this option to specify a logical order for support tickets, such as:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoFacet\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@ticketstatus\"</span> <span class=\"hljs-attr\">data-title</span>=<span class=\"hljs-string\">\"Ticket Status\"</span> <span class=\"hljs-attr\">data-tab</span>=<span class=\"hljs-string\">\"All\"</span> <span class=\"hljs-attr\">data-custom-sort</span>=<span class=\"hljs-string\">\"New,Opened,Feedback,Resolved\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.dependsOn",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether this facet only appears when a value is selected in its &quot;parent&quot; facet.\nTo specify the parent facet, use its <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id-1\"><code>id</code></a>.</p>\n<p>Remember that by default, a facet <code>id</code> value is the same as its <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option\nvalue.</p>\n<p><strong>Examples:</strong></p>\n<p>First case: the &quot;parent&quot; facet has no custom <code>id</code>:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- \"Parent\" Facet: --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFacet'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myfield'</span> <span class=\"hljs-attr\">data-title</span>=<span class=\"hljs-string\">'My Parent Facet'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- The \"dependent\" Facet must refer to the default `id` of its \"parent\" Facet, which is the name of its field. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFacet'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myotherfield'</span> <span class=\"hljs-attr\">data-title</span>=<span class=\"hljs-string\">'My Dependent Facet'</span> <span class=\"hljs-attr\">data-depends-on</span>=<span class=\"hljs-string\">'@myfield'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Second case: the &quot;parent&quot; facet has a custom <code>id</code>:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- \"Parent\" Facet: --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFacet'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myfield'</span> <span class=\"hljs-attr\">data-title</span>=<span class=\"hljs-string\">'My Parent Facet'</span> <span class=\"hljs-attr\">data-id</span>=<span class=\"hljs-string\">'myParentCustomId'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- The \"dependent\" Facet must refer to the custom `id` of its \"parent\" Facet, which is 'myParentCustomId'. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFacet'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myotherfield'</span> <span class=\"hljs-attr\">data-title</span>=<span class=\"hljs-string\">'My Dependent Facet'</span> <span class=\"hljs-attr\">data-depends-on</span>=<span class=\"hljs-string\">'myParentCustomId'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Default value is <code>undefined</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.enableCollapse",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettings\"><code>enableSettings</code></a> option is <code>true</code>, specifies whether the\n<strong>Collapse \\ Expand</strong> menu option is available in the facet <strong>Settings</strong> menu.\n<strong>Note:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</p>\n</blockquote>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableSettings",
			"defaultValue": "true"
		}
	},
	{
		"name": "Facet.options.enableFacetSearch",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display a search box at the bottom of the facet for searching among the available facet\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> values.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.facetsearchdelay\"><code>facetSearchDelay</code></a>,\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.facetsearchignoreaccents\"><code>facetSearchIgnoreAccents</code></a>, and\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.numberofvaluesinfacetsearch\"><code>numberOfValuesInFacetSearch</code></a> options.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</p>\n</blockquote>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Facet.options.enableMoreLess",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to enable the <strong>More</strong> and <strong>Less</strong> buttons in the Facet.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.pagesize\"><code>pageSize</code></a> option.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</p>\n</blockquote>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Facet.options.enableSettings",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display the facet <strong>Settings</strong> menu.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettingsfacetstate\"><code>enableSettingsFacetState</code></a>,\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.availablesorts\"><code>availableSorts</code></a>, and\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablecollapse\"><code>enableCollapse</code></a> options.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</p>\n</blockquote>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Facet.options.enableSettingsFacetState",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettings\"><code>enableSettings</code></a> option is <code>true</code>, specifies whether the\n<strong>Save state</strong> menu option is available in the facet <strong>Settings</strong> menu.\n<strong>Note:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableSettings",
			"defaultValue": "false"
		}
	},
	{
		"name": "Facet.options.enableTogglingOperator",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to allow the user to toggle between the <code>OR</code> and <code>AND</code> modes in the facet.\nSetting this option to <code>true</code> displays an icon in the top right corner of the facet. The user can click this icon\nto toggle between between the two modes.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Facet.options.facetSearchDelay",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablefacetsearch\"><code>enableFacetSearch</code></a> option is <code>true</code>, specifies the delay (in\nmilliseconds) before sending a search request to the server when the user starts typing in the facet search box.\nSpecifying a smaller value makes results appear faster. However, chances of having to cancel many requests\nsent to the server increase as the user keeps on typing new characters.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</p>\n</blockquote>\n<p>Default value is <code>100</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableFacetSearch",
			"min": "0",
			"defaultValue": "100"
		}
	},
	{
		"name": "Facet.options.facetSearchIgnoreAccents",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablefacetsearch\"><code>enableFacetSearch</code></a> option is <code>true</code>, specifies whether to ignore\naccents in the facet search box.\n<strong>Note:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableFacetSearch",
			"defaultValue": "false"
		}
	},
	{
		"name": "Facet.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the index field whose values the facet should use.\nThis requires the given field to be configured correctly in the index as a <em>Facet field</em> (see\n<a href=\"https://docs.coveo.com/en/1982/\">Add or Edit Fields</a>).</p>\n<p>Specifying a value for this option is required for the <code>Facet</code> component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "Facet.options.id",
		"notSupportedIn": "",
		"comment": "<p>Specifies a unique identifier for the facet. Among other things, this identifier serves the purpose of saving\nthe facet state in the URL hash.\nIf you have two facets with the same field on the same page, you should specify an <code>id</code> value for at least one of\nthose two facets. This <code>id</code> must be unique among the facets.</p>\n<p>Non-word characters except - @ $ _ . + ! <em> &#39; ( ) , , ( `^a-zA-Z0-9-@$_.+!</em>&#39;(),,]+<code>) are automatically removed from the</code>id` value.</p>\n<p>Default value is the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option value.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.includeInBreadcrumb",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the facet should push data to the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\"><code>Breadcrumb</code></a> component.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.numberofvaluesinbreadcrumb\"><code>numberOfValuesInBreadcrumb</code></a> option.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Facet.options.includeInOmnibox",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the Facet should push data to the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component.\nSee also <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.numberofvaluesinomnibox\">Facet.options.numberOfValuesInOmnibox</a>.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Facet.options.injectionDepth",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>Specifies the <em>injection depth</em> to use for the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\"><code>GroupByRequest</code></a> operation.\nThe injection depth determines how many results to scan in the index to ensure that the facet lists all potential\nfacet values. Increasing this value enhances the accuracy of the listed values at the cost of performance.</p>\n<p>Default value is <code>1000</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "1000"
		}
	},
	{
		"name": "Facet.options.isMultiValueField",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the facet <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> is configured in the index as a multi-value\nfield (semicolon separated values such as <code>abc;def;ghi</code>).\nDefault value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Facet.options.lookupField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field whose values the Facet should display.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.numberOfValues",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum number of field values to display by default in the facet before the user\nclicks the arrow to show more.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablemoreless\"><code>enableMoreLess</code></a> option.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "5"
		}
	},
	{
		"name": "Facet.options.numberOfValuesInBreadcrumb",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.includeinbreadcrumb\"><code>includeInBreadcrumb</code></a> option is <code>true</code>, specifies the maximum\nnumber of values that the facet should display in the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\"><code>Breadcrumb</code></a> before outputting a\n<strong>more...</strong> button.\nDefault value is <code>5</code> on a desktop computer and <code>3</code> on a mobile device. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "includeInBreadcrumb",
			"min": "0"
		}
	},
	{
		"name": "Facet.options.numberOfValuesInFacetSearch",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablefacetsearch\"><code>enableFacetSearch</code></a> option is <code>true</code>, specifies the number of v\nalues to display in the facet search results popup.\n<strong>Note:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</p>\n</blockquote>\n<p>Default value is <code>15</code>. Minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1",
			"defaultValue": "15"
		}
	},
	{
		"name": "Facet.options.numberOfValuesInOmnibox",
		"notSupportedIn": "",
		"comment": "<p>When <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.includeinomnibox\">Facet.options.includeInOmnibox</a> is <code>true</code>, specifies the number of values to populate the\n<a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a> with.\nDefault value is <code>5</code> on desktop computer and <code>3</code> on a mobile device. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "includeInOmnibox",
			"min": "0"
		}
	},
	{
		"name": "Facet.options.paddingContainer",
		"notSupportedIn": "",
		"comment": "<p>Specifies the parent container of the facets.\nUsed by the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.preserveposition\"><code>preservePosition</code></a> option.</p>\n<p>Default value is <code>element.parentElement</code>.</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.pageSize",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablemoreless\"><code>enableMoreLess</code></a> option is <code>true</code>, specifies the number of\nadditional results to fetch when clicking the <strong>More</strong> button.\n<strong>Note:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\"><code>FacetRange</code></a> component does not support this option.</p>\n</blockquote>\n<p>Default value is <code>10</code>. Minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableMoreLess",
			"min": "1",
			"defaultValue": "10"
		}
	},
	{
		"name": "Facet.options.preservePosition",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the facet should remain stable in its current position in the viewport while the mouse cursor\nis over it.\nWhenever the value selection changes in a facet, the search interface automatically performs a query. This new\nquery might cause other elements in the page to resize themselves (typically, other facets above or below the\none the user is interacting with).</p>\n<p>This option is responsible for adding the <code>&lt;div class=&#39;coveo-topSpace&#39;&gt;</code> and\n<code>&lt;div class=&#39;coveo-bottomSpace&#39;&gt;</code> around the Facet container. The Facet adjusts the scroll amount of the page to\nensure that it does not move relatively to the mouse when the results are updated.</p>\n<p>In some cases, the facet also adds margins to the <code>scrollContainer</code>, if scrolling alone is not enough to\npreserve position.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.paddingcontainer\"><code>paddingContainer</code></a>, and\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.scrollcontainer\"><code>scrollContainer</code></a> options.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Facet.options.scrollContainer",
		"notSupportedIn": "",
		"comment": "<p>Specifies the HTML element (through a CSS selector) whose scroll amount the facet should adjust to preserve its\nposition when results are updated.\nUsed by the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.preserveposition\"><code>preservePosition</code></a> option.</p>\n<p>Default value is <code>document.body</code>.</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.sortCriteria",
		"notSupportedIn": "",
		"comment": "<p>Specifies the criteria to use to sort the facet values.\nSee <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html#sortcriteria\">IGroupByRequest.sortCriteria</a> for the list and description of possible values.</p>\n<p>Default value is the first sort criteria specified in the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.availablesorts\"><code>availableSorts</code></a>\noption, or <code>occurrences</code> if no sort criteria is specified.</p>\n",
		"type": "",
		"constrainedValues": [
			"occurrences,score,alphaascending,alphadescending,computedfieldascending,computedfielddescending,chisquare,nosort"
		],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.title",
		"notSupportedIn": "",
		"comment": "<p>Specifies the title to display at the top of the facet.\nDefault value is the localized string for <code>NoTitle</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.options.useAnd",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to use the <code>AND</code> operator in the resulting filter when multiple values are selected in the\nfacet.\nSetting this option to <code>true</code> means that items must have all of the selected values to match the resulting\nquery.</p>\n<p>Default value is <code>false</code>, which means that the filter uses the <code>OR</code> operator. Thus, by default, items must\nhave at least one of the selected values to match the query.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Facet.options.useWildcardsInFacetSearch",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether wildcards are used as the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html#allowedvaluespatterntype\">allowedValuesPatternType</a>\nin the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">groupBy</a> for the facet search.\nEnabling this option returns results that end with the entered value. For example, searching for <code>veo</code> would match with <code>Coveo</code>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>If you are experiencing slow facet search and/or timeouts when this option is set to <code>true</code>, consider enabling the <strong>Use cache for nested queries</strong>\noption on your facet <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">field</a> in the Coveo Cloud Admninistration Console (see Add or Edit Fields)\">https://docs.coveo.com/en/1982/})</a>.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Facet.options.valueCaption",
		"notSupportedIn": "",
		"comment": "<p>Specifies a JSON object describing a mapping of facet values to their desired captions. See\n<a href=\"https://docs.coveo.com/en/368/\">Normalizing Facet Value Captions</a>.\n<strong>Examples:</strong></p>\n<p>You can set the option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">&#39;init&#39;</a> call:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> myValueCaptions = {\n  <span class=\"hljs-string\">\"txt\"</span> : <span class=\"hljs-string\">\"Text files\"</span>,\n  <span class=\"hljs-string\">\"html\"</span> : <span class=\"hljs-string\">\"Web page\"</span>,\n  [ ... ]\n};\n\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n  <span class=\"hljs-attr\">Facet</span> : {\n    <span class=\"hljs-attr\">valueCaption</span> : myValueCaptions\n  }\n});\n</code></pre>\n<p>Or before the <code>init</code> call, using the &#39;options&#39; top-level function:</p>\n<pre><code class=\"lang-javascript\">Coveo.options(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n  <span class=\"hljs-attr\">Facet</span> : {\n    <span class=\"hljs-attr\">valueCaption</span> : myValueCaptions\n  }\n});\n</code></pre>\n<p>Or directly in the markup:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- Ensure that the double quotes are properly handled in data-value-caption. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFacet'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myotherfield'</span> <span class=\"hljs-attr\">data-value-caption</span>=<span class=\"hljs-string\">'{\"txt\":\"Text files\",\"html\":\"Web page\"}'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Using value captions will disable alphabetical sorts (see the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.availablesorts\">availableSorts</a> option).</p>\n</blockquote>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Facet.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>Facet</code> component. Binds multiple query events as well.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>A <code>FacetRange</code> is a <a href=\"https://docs.coveo.com/en/198/\">facet</a> whose values are expressed as ranges.\nYou must set the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option to a value targeting a numeric or date <a href=\"https://docs.coveo.com/en/200/\">field</a> in your index for this component to work.</p>\n<p>This component extends the <a href=\"https://coveo.github.io/search-ui/components/facet.html\"><code>Facet</code></a> component and supports all <code>Facet</code> options except:</p>\n<ul>\n<li><strong>Settings</strong> menu options<ul>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettings\"><code>enableSettings</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettingsfacetstate\"><code>enableSettingsFacetState</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablecollapse\"><code>enableCollapse</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.availablesorts\"><code>availableSorts</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.customsort\"><code>customSort</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldcaption\"><code>computedFieldCaption</code></a></li>\n</ul>\n</li>\n<li><strong>Facet Search</strong> options<ul>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablefacetsearch\"><code>enableFacetSearch</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.facetsearchdelay\"><code>facetSearchDelay</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.facetsearchignoreaccents\"><code>facetSearchIgnoreAccents</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.numberofvaluesinfacetsearch\"><code>numberOfValuesInFacetSearch</code></a></li>\n</ul>\n</li>\n<li><strong>More and Less</strong> options<ul>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablemoreless\"><code>enableMoreLess</code></a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/facet.html#options.pagesize\"><code>pageSize</code></a></li>\n</ul>\n</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.facetSearch",
		"notSupportedIn": "",
		"comment": "<p>Renders and handles the facet <strong>Search</strong> part of the component.</p>\n",
		"type": "FacetSearch",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.facetSettings",
		"notSupportedIn": "",
		"comment": "<p>Renders and handles the facet <strong>Settings</strong> part of the component</p>\n",
		"type": "FacetSettings",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.options.dateField",
		"notSupportedIn": "",
		"comment": "<p>Whether the specified <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option value targets a date field in your index.\nThis allows the component to correctly build the outgoing <a href=\"https://docs.coveo.com/en/203/\">Group By</a>.</p>\n<p><strong>Default:</strong> <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "FacetRange.options.ranges",
		"notSupportedIn": "",
		"comment": "<p>The list of <a href=\"https://coveo.github.io/search-ui/interfaces/irangevalue.html\">range values</a> to request (see <a href=\"https://docs.coveo.com/en/2790/\">Requesting Specific FacetRange Values</a>).\nBy default, the index automatically generates range values.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>The index cannot automatically generate range values for a <code>FacetRange</code> whose <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option value references a dynamic field generated by a <a href=\"https://docs.coveo.com/en/232/\">query function</a>. In such a case, you <em>must</em> use the <code>ranges</code> option.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetRange.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>FacetRange</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>The <code>FacetSlider</code> component creates a facet which contains a slider widget that allows the end user to filter results\nbased on a range of numerical values (e.g., a date range, a price range, etc.).\n<strong>Note:</strong></p>\n<blockquote>\n<p>This component does <strong>not</strong> inherit from the <a href=\"https://coveo.github.io/search-ui/components/facet.html\"><code>Facet</code></a> component. Consequently, it does not offer the\nsame configuration options. Moreover, some of the <code>FacetSlider</code> options (see\n<a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.getsteps\"><code>getSteps</code></a> and <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.valuecaption\"><code>valueCaption</code></a>)\ncannot be configured as <code>data-</code> attributes in the markup. If you wish to configure those options, you must either\ndo so in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call\">Passing Component Options in the init Call</a>),\nor before the <code>init</code> call, using the <code>options</code> top-level function (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call\">Passing Component Options Before the init Call</a>).</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.options",
		"notSupportedIn": "",
		"comment": "<p>The component options</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.options.dateField",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.field\"><code>field</code></a> for which you are requesting a range is a date\nfield. This allows the <code>FacetSlider</code> to correctly build the outgoing <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">GroupByRequest</a> and\nrender itself properly.\nDefault value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "FacetSlider.options.dateFormat",
		"notSupportedIn": "",
		"comment": "<p>Specifies the format to use when displaying date values.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.datefield\"><code>dateField</code></a> option.</p>\n<p>Default value is <code>MMM dd, yyyy</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.options.displayAsPercent",
		"notSupportedIn": "",
		"comment": "<p>Specifies the percentage caption options to use when displaying the field values.\nAvailable options are:</p>\n<ul>\n<li>enable (<code>data-display-as-percent-enable</code>): boolean; specifies whether to display the caption as a percentage.\nDefault value is <code>false</code>.\nseparator (<code>data-display-as-percent-separator</code>): string; specifies the character(s) to use as a separator in the\ncaption. Default value is <code>&quot;-&quot;</code>.</li>\n</ul>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "FacetSlider.options.displayAsValue",
		"notSupportedIn": "",
		"comment": "<p>Specifies the caption options to use when displaying the field values.\nAvailable options are:</p>\n<ul>\n<li>enable (<code>data-display-as-value-enable</code>): boolean; specifies whether to display the caption as a value. Default\nvalue is <code>true</code>.</li>\n<li>unitSign (<code>data-display-as-value-unit-sign</code>): string; specifies the unit sign for this value (e.g., <code>$</code>).\nDefault value is <code>undefined</code>.</li>\n<li>separator (<code>data-display-as-value-separator</code>): string; specifies the character(s) to use as a separator in the\ncaption. Default value is <code>&quot;-&quot;</code>.</li>\n</ul>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "FacetSlider.options.end",
		"notSupportedIn": "",
		"comment": "<p>Specifies the ending boundary of the slider.\nDate values are rounded to the nearest year when you set the <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.datefield\"><code>dateField</code></a>\noption to <code>true</code>.</p>\n<p>Default value is the highest available field value in the index.</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.options.excludeOuterBounds",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to exclude the outer bounds of the slider in the generated query when they are not active.\nDefault value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "FacetSlider.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the index field whose values the <code>FacetSlider</code> should use.\nThe field must be configured correctly as a Facet field in the index (see\n<a href=\"https://docs.coveo.com/en/1833/\">Adding and Managing Fields</a>).</p>\n<p>Specifying a value for this option is required for the <code>FacetSlider</code> component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "FacetSlider.options.getSteps",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function to generate the <code>FacetSlider</code> steps (see the <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.steps\"><code>steps</code></a>\noption). This function receives the <code>FacetSlider</code> boundaries (see the <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.start\"><code>start</code></a>\nand <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.end\"><code>end</code></a> options), and must return an array of numbers (the steps).\n<strong>Note:</strong></p>\n<blockquote>\n<p>You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\n<a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call\">Passing Component Options in the init Call</a>),\nor before the <code>init</code> call, using the <code>options</code> top-level function (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call\">Passing Component Options Before the init Call</a>).</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\">\n<span class=\"hljs-keyword\">var</span> myGetStepsFunction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">start, end</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> result = [];\n  <span class=\"hljs-keyword\">for</span> (i = start; i &lt; end; i += <span class=\"hljs-number\">2</span>) {\n    result.push(i);\n  }\n  <span class=\"hljs-keyword\">return</span> result;\n}\n\n<span class=\"hljs-comment\">// You can set the option in the 'init' call:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n   <span class=\"hljs-attr\">FacetSlider</span>: {\n     <span class=\"hljs-attr\">getSteps</span>: myGetStepsFunction\n   }\n});\n\n<span class=\"hljs-comment\">// Or before the 'init' call, using the 'options' top-level function:</span>\n<span class=\"hljs-comment\">// Coveo.options(document.querySelector(\"#search\"), {</span>\n<span class=\"hljs-comment\">//   FacetSlider : {</span>\n<span class=\"hljs-comment\">//     valueCaption : myGetStepsFunction</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">// });</span>\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.options.graph",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display a small graph on top of the slider.\nAvailable options are:</p>\n<ul>\n<li>steps (<code>data-graph-steps</code>): number; specifies the number of steps/columns to display in your graph. Default\nvalue is <code>10</code>. Minimum value is <code>2</code>.</li>\n</ul>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "2"
		}
	},
	{
		"name": "FacetSlider.options.id",
		"notSupportedIn": "",
		"comment": "<p>Specifies a unique identifier for the <code>FacetSlider</code>. Among other things, this identifier serves the purpose of\nsaving the facet state in the URL hash.\nIf you have two facets with the same field in the same page, you should specify a unique <code>id</code> value for at least\none of those two facets. This <code>id</code> must be unique in the page.</p>\n<p>Default value is the <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.field\"><code>field</code></a> option value.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.options.queryOverride",
		"notSupportedIn": "",
		"comment": "<p>Specifies a query to filter automatic minimum and maximum values for the slider range.\nThis is especially useful in the case of date ranges since the index may contain values which are not set, and\nthus return values from the year 1400 (the earliest date from the boost C++ library).</p>\n<p><strong>Example:</strong></p>\n<p>The query override in the following markup filters out any <code>@date</code> value anterior to January 1st 2000.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoFacetSlider\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@date\"</span> <span class=\"hljs-attr\">data-date-field</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">data-query-override</span>=<span class=\"hljs-string\">\"@date&gt;2000/01/01\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.options.rangeSlider",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether you want a slider with two buttons instead of a slider with a single button.\nBy default, only one button appears in the slider.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.options.rounded",
		"notSupportedIn": "",
		"comment": "<p>Specifies the number of decimal places to round the displayed numerical values to.\nDefault (and minimum) value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0"
		}
	},
	{
		"name": "FacetSlider.options.start",
		"notSupportedIn": "",
		"comment": "<p>Specifies the starting boundary of the slider.\nDate values are rounded to the nearest year when you set the <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.datefield\"><code>dateField</code></a>\noption to <code>true</code>.</p>\n<p>Default value is the lowest available field value in the index.</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.options.steps",
		"notSupportedIn": "",
		"comment": "<p>Specifies the number of steps to split the slider into.\nFor example, if your range is [ 0 , 100 ] and you specify <code>10</code> steps, then the end user can move the slider only\nto the values [ 0, 10, 20, 30 ... , 100 ].</p>\n<p>For performance reasons, the maximum value for this option is <code>100</code></p>\n<p>Default value is <code>undefined</code>, and the slider allows up to 100 steps. Minimum value is <code>2</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "2"
		}
	},
	{
		"name": "FacetSlider.options.title",
		"notSupportedIn": "",
		"comment": "<p>Specifies the title to display on top of the <code>FacetSlider</code>.\nDefault value is the localized string for <code>NoTitle</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.options.valueCaption",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function to generate the value caption for the <code>FacetSlider</code>. This function receives the current\nslider values (number[]), and must return the caption (string).\n<strong>Note:</strong></p>\n<blockquote>\n<p>You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\n<a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call\">Passing Component Options in the init Call</a>),\nor before the <code>init</code> call, using the <code>options</code> top-level function (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call\">Passing Component Options Before the init Call</a>).</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\">\n<span class=\"hljs-keyword\">var</span> myValueCaptionFunction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">values</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"From \"</span> + values[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">\" to \"</span> + values[<span class=\"hljs-number\">1</span>];\n}\n\n<span class=\"hljs-comment\">// You can set the option in the 'init' call:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n  <span class=\"hljs-attr\">FacetSlider</span>: {\n    <span class=\"hljs-attr\">valueCaption</span>: myValueCaptionFunction\n  }\n});\n\n<span class=\"hljs-comment\">// Or before the 'init' call, using the 'options' top-level function:</span>\n<span class=\"hljs-comment\">// Coveo.options(document.querySelector(\"#search\"), {</span>\n<span class=\"hljs-comment\">//   FacetSlider : {</span>\n<span class=\"hljs-comment\">//     valueCaption : myValueCaptionFunction</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">// });</span>\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSlider.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>FacetSlider</code> component. Binds multiple query events as well.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions",
		"notSupportedIn": "",
		"comment": "<p>This component provides <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> query suggestions scoped to distinct categories based on the values of a specific <a href=\"https://coveo.github.io/search-ui/components/facetvaluesuggestions.html#options.field\"><code>field</code></a>.\nSee @externaldocs <a href=\"https://docs.coveo.com/en/340/#providing-facet-value-suggestions\">Providing Facet Value Suggestions</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.options.categoryFieldDelimitingCharacter",
		"notSupportedIn": "",
		"comment": "<p>The delimiting character used for the multi value field referenced by the <a href=\"https://coveo.github.io/search-ui/interfaces/icomputedfieldrequest.html#field\"><code>field</code></a> option, assuming the <a href=\"https://coveo.github.io/search-ui/components/facetvaluesuggestions.html#options.iscategoryfield\"><code>isCategoryField</code></a> option is set to <code>true</code>.\n<strong>Default:</strong> <code>|</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "isCategoryField",
			"defaultValue": "|"
		}
	},
	{
		"name": "FacetValueSuggestions.options.displayEstimateNumberOfResults",
		"notSupportedIn": "",
		"comment": "<p>Whether to display an estimate of the number of results for each scoped query suggestions.\n<strong>Default:</strong> <code>false</code></p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>Setting this option to <code>true</code> has no effect when the <a href=\"https://coveo.github.io/search-ui/components/facetvaluesuggestions.html#options.templatehelper\"><code>templateHelper</code></a> options is set.</li>\n<li>When displaying scoped query suggestions for a standalone search box whose queries are redirected to a search interface enforcing other filters, the number of results will be inaccurate.</li>\n</ul>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "FacetValueSuggestions.options.field",
		"notSupportedIn": "",
		"comment": "<p>The field on whose values the scoped query suggestions should be based.\nSpecifying a value for this option is required for the component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "FacetValueSuggestions.options.isCategoryField",
		"notSupportedIn": "",
		"comment": "<p>Whether the <a href=\"https://coveo.github.io/search-ui/components/facetvaluesuggestions.html#options.field\"><code>field</code></a> option references a multi value field.\nSetting this option to <code>true</code> if appropriate will allow the corresponding <a href=\"https://coveo.github.io/search-ui/components/categoryfacet.html\"><code>CategoryFacet</code></a> or <a href=\"https://coveo.github.io/search-ui/components/dynamichierarchicalfacet.html\"><code>DynamicHierarchicalFacet</code></a> component (if present) to properly handle the filter format.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/facetvaluesuggestions.html#options.categoryfielddelimitingcharacter\"><code>categoryFieldDelimitingCharacter</code></a> option.</p>\n<p><strong>Default:</strong> <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "FacetValueSuggestions.options.numberOfSuggestions",
		"notSupportedIn": "",
		"comment": "<p>The maximum number of suggestions to render in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a>.\n<strong>Default:</strong> <code>5</code>\n<strong>Minimum:</strong> <code>1</code></p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1",
			"defaultValue": "5"
		}
	},
	{
		"name": "FacetValueSuggestions.options.templateHelper",
		"notSupportedIn": "",
		"comment": "<p>The template helper function to execute when rendering each scoped query suggestion.\nIf specified, the function must have the following signature: (row: <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetvaluesuggestionrow.html\">IFacetValueSuggestionRow</a>, omnibox: Omnibox) =&gt; string</p>\n<p>If not specified, a default function will be used.</p>\n<p><strong>Note:</strong> You cannot set this option directly in the component markup as an HTML attribute. You must either set it:</p>\n<ul>\n<li>In the <a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface (see <a href=\"https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call\">Passing Component Options in the init Call</a></li>\n<li>Before the <code>init</code> call, using the <a href=\"@link options\"><code>options</code></a> top-level function (see <a href=\"https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call\">Passing Component Options Before the init Call</a>).</li>\n</ul>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\">Coveo.init(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'search'</span>), {\n  <span class=\"hljs-attr\">FacetValueSuggestions</span>: {\n    <span class=\"hljs-attr\">templateHelper</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">row, omnibox</span>) =&gt;</span> { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Searching for &lt;strong&gt;<span class=\"hljs-subst\">${row.keyword}</span>&lt;/strong&gt; in category &lt;em&gt;<span class=\"hljs-subst\">${row.value}</span>&lt;/em&gt;`</span>; }\n  }\n})\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.options.useQuerySuggestions",
		"notSupportedIn": "",
		"comment": "<p>Whether to get scoped query suggestions from the current Coveo ML query suggestions.\n<strong>Note:</strong> If this options is set to <code>true</code> the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablequerysuggestaddon\"><code>enableQuerySuggestAddon</code></a> option of the <code>Omnibox</code> component must be set to <code>true</code> as well.</p>\n<p><strong>Default:</strong> <code>true</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "FacetValueSuggestions.options.useValueFromSearchbox",
		"notSupportedIn": "",
		"comment": "<p>Whether to get scoped query suggestions from the current user query entered in the search box.\n<strong>Default:</strong> <code>true</code> if <a href=\"https://coveo.github.io/search-ui/components/facetvaluesuggestions.html#options.usequerysuggestions\"><code>useQuerySuggestions</code></a> is <code>false</code>; <code>false</code> otherwise</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueSuggestions.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>FieldSuggestions</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions",
		"notSupportedIn": "",
		"comment": "<p>The <code>FieldSuggestions</code> component provides query suggestions based on a particular facet field. For example, you could\nuse this component to provide auto-complete suggestions while the end user is typing the title of an item.\nThe query suggestions provided by this component appear in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component.</p>\n<p><strong>Note:</strong> Consider <a href=\"https://docs.coveo.com/en/340/#providing-coveo-machine-learning-query-suggestions\">providing Coveo ML query suggestions</a>\nrather than field suggestions, as the former yields better performance and relevance.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the facet field from which to provide suggestions.\nSpecifying a value for this option is required for the <code>FieldSuggestions</code> component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "FieldSuggestions.options.headerTitle",
		"notSupportedIn": "",
		"comment": "<p>Specifies the title of the result suggestions group in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component.\nIf not provided, the component will simply not output any title.\nDefault value is <code>null</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.options.numberOfSuggestions",
		"notSupportedIn": "",
		"comment": "<p>Specifies the number of suggestions to render in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a>.\nDefault value is <code>5</code>. Minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1",
			"defaultValue": "5"
		}
	},
	{
		"name": "FieldSuggestions.options.omniboxZIndex",
		"notSupportedIn": "",
		"comment": "<p>Specifies the z-index position at which the suggestions render themselves in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a>.\nWhen there are multiple suggestion providers, components with higher <code>omniboxZIndex</code> values render themselves\nfirst.</p>\n<p>Default value is <code>51</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "51"
		}
	},
	{
		"name": "FieldSuggestions.options.onSelect",
		"notSupportedIn": "",
		"comment": "<p>Specifies the event handler function to execute when the end user selects a suggested value in the\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a>. By default, the query box text is replaced by what the end user selected and a new\nquery is executed. You can, however, replace this default behavior by providing a callback function to execute\nwhen the value is selected.\n<strong>Note:</strong></p>\n<blockquote>\n<p>You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\n<a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call\">Passing Component Options in the init Call</a>),\nor before the <code>init</code> call, using the <code>options</code> top-level function (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call\">Passing Component Options Before the init Call</a>).</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\">\n<span class=\"hljs-keyword\">var</span> myOnSelectFunction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selectedValue, populateOmniboxEventArgs</span>) </span>{\n\n  <span class=\"hljs-comment\">// Close the suggestion list when the user clicks a suggestion.</span>\n  populateOmniboxEventArgs.closeOmnibox();\n\n  <span class=\"hljs-comment\">// Search for matching title results in the default endpoint.</span>\n  Coveo.SearchEndpoint.endpoints[<span class=\"hljs-string\">\"default\"</span>].search({\n    <span class=\"hljs-attr\">q</span>: <span class=\"hljs-string\">\"@title=='\"</span> + selectedValue + <span class=\"hljs-string\">\"'\"</span>\n  }).done(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">results</span>) </span>{\n\n    <span class=\"hljs-comment\">// If more than one result is found, select a result that matches the selected title.</span>\n    <span class=\"hljs-keyword\">var</span> foundResult = Coveo._.find(results.results, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n      <span class=\"hljs-keyword\">return</span> selectedValue == result.raw.title;\n    });\n\n    <span class=\"hljs-comment\">// Open the found result in the current window, or log an error.</span>\n    <span class=\"hljs-keyword\">if</span> (foundResult) {\n      <span class=\"hljs-built_in\">window</span>.location = foundResult.clickUri;\n    }\n    <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">new</span> Coveo.Logger.warn(<span class=\"hljs-string\">\"Selected suggested result '\"</span> + selectedValue + <span class=\"hljs-string\">\"' not found.\"</span>);\n    }\n  });\n};\n\n<span class=\"hljs-comment\">// You can set the option in the 'init' call:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n   <span class=\"hljs-attr\">FieldSuggestions</span> : {\n     <span class=\"hljs-attr\">onSelect</span> : myOnSelectFunction\n   }\n});\n\n<span class=\"hljs-comment\">// Or before the 'init' call, using the 'options' top-level function:</span>\n<span class=\"hljs-comment\">// Coveo.options(document.querySelector(\"#search\"), {</span>\n<span class=\"hljs-comment\">//   FieldSuggestions : {</span>\n<span class=\"hljs-comment\">//     onSelect : myOnSelectFunction</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">// });</span>\n</code></pre>\n",
		"type": "ISuggestionForOmniboxOptionsOnSelect",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldSuggestions.options.queryOverride",
		"notSupportedIn": "",
		"comment": "<p>Specifies a query override to apply when retrieving suggestions. You can use any valid query expression (see\n<a href=\"https://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>).\nDefault value is the empty string, and the component applies no query override.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": ""
		}
	},
	{
		"name": "FieldSuggestions.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>FieldSuggestions</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable",
		"notSupportedIn": "",
		"comment": "<p>The FieldTable component displays a set of <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html\">FieldValue</a> components in a table that can optionally be\nexpandable and minimizable. This component automatically takes care of not displaying empty field values.\nThis component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n<p><strong>Example:</strong></p>\n<pre><code><span class=\"hljs-comment\">// This is the FieldTable component itself, which holds a list of table rows.</span>\n<span class=\"hljs-comment\">// Each row is a FieldValue component.</span>\n&lt;table <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>='<span class=\"hljs-title\">CoveoFieldTable</span>'&gt;</span>\n   <span class=\"hljs-comment\">// Items</span>\n   &lt;tr <span class=\"hljs-keyword\">data</span>-field=<span class=\"hljs-string\">'@sysdate'</span> <span class=\"hljs-keyword\">data</span>-caption=<span class=\"hljs-string\">'Date'</span> <span class=\"hljs-keyword\">data</span>-helper=<span class=\"hljs-string\">'dateTime'</span> /&gt;\n   &lt;tr <span class=\"hljs-keyword\">data</span>-field=<span class=\"hljs-string\">'@sysauthor'</span> <span class=\"hljs-keyword\">data</span>-caption=<span class=\"hljs-string\">'Author'</span> /&gt;\n   &lt;tr <span class=\"hljs-keyword\">data</span>-field=<span class=\"hljs-string\">'@clickuri'</span> <span class=\"hljs-keyword\">data</span>-html-value=<span class=\"hljs-string\">'true'</span> <span class=\"hljs-keyword\">data</span>-caption=<span class=\"hljs-string\">'URL'</span> <span class=\"hljs-keyword\">data</span>-helper=<span class=\"hljs-string\">'anchor'</span> <span class=\"hljs-keyword\">data</span>-helper-options=<span class=\"hljs-string\">'{text: \\\"&lt;%= raw.syssource %&gt;\\\" , target:\\\"_blank\\\"}'</span>&gt;\n&lt;/table&gt;\n</code></pre>",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldTable.options.allowMinimization",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to allow the minimization (collapsing) of the FieldTable.\nIf you set this option to <code>false</code>, the component will not create the <strong>Minimize</strong> / <strong>Expand</strong> toggle links.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.expandedtitle\">FieldTable.options.expandedTitle</a>, <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.minimizedtitle\">FieldTable.options.minimizedTitle</a> and\n<a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.minimizedbydefault\">FieldTable.options.minimizedByDefault</a>.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "FieldTable.options.expandedTitle",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.allowminimization\">FieldTable.options.allowMinimization</a> is <code>true</code>, specifies the caption to show on the <strong>Minimize</strong> link\n(the link that appears when the FieldTable is expanded).\nDefault value is <code>&quot;Details&quot;</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "allowMinimization"
		}
	},
	{
		"name": "FieldTable.options.minimizedByDefault",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.allowminimization\">FieldTable.options.allowMinimization</a> is <code>true</code>, specifies whether to minimize the table by default.\nDefault value is <code>undefined</code>, and the FieldTable will collapse by default if the result it is associated with has\na non-empty excerpt.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "allowMinimization"
		}
	},
	{
		"name": "FieldTable.options.minimizedTitle",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.allowminimization\">FieldTable.options.allowMinimization</a> is <code>true</code>, specifies the caption to show on the <strong>Expand</strong> link\n(the link that appears when the FieldTable is minimized).\nDefault value is <code>&quot;Details&quot;</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "allowMinimization"
		}
	},
	{
		"name": "FieldTable.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new FieldTable.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue",
		"notSupportedIn": "",
		"comment": "<p>The FieldValue component displays the value of a field associated to its parent search result. It is normally usable\nwithin a <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html\">FieldTable</a>.\nThis component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n<p>A common use of this component is to display a specific field value which also happens to be an existing\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>. When the user clicks on the FieldValue component, it activates the corresponding Facet.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.options.conditions",
		"notSupportedIn": "",
		"comment": "<p>A field-based condition that must be satisfied by the query result item for the component to be rendered.\nNote: This option uses a distinctive markup configuration syntax allowing multiple conditions to be expressed. Its underlying logic is the same as that of the field value conditions mechanism used by result templates.</p>\n<p><strong>Examples:</strong>\nRender the component if the query result item&#39;s @documenttype field value is Article or Documentation.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoFieldValue\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@author\"</span> <span class=\"hljs-attr\">data-condition-field-documenttype</span>=<span class=\"hljs-string\">\"Article, Documentation\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Render the component if the query result item&#39;s @documenttype field value is anything but Case.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoFieldValue\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@author\"</span> <span class=\"hljs-attr\">data-condition-field-not-documenttype</span>=<span class=\"hljs-string\">\"Case\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Render the component if the query result item&#39;s @documenttype field value is Article, and if its @author field value is anything but Anonymous.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoFieldValue\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@author\"</span> <span class=\"hljs-attr\">data-condition-field-documenttype</span>=<span class=\"hljs-string\">\"Article\"</span> <span class=\"hljs-attr\">data-condition-field-not-author</span>=<span class=\"hljs-string\">\"Anonymous\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Default value is <code>undefined</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.options.displaySeparator",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.splitvalues\">FieldValue.options.splitValues</a> is <code>true</code>, specifies the string to use when displaying multi-value\nfields in the UI.\nThe component will insert this string between each value it displays from a multi-value field.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.separator\">FieldValue.options.separator</a>.</p>\n<p>Default value is <code>&quot;, &quot;</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "splitValues",
			"defaultValue": ", "
		}
	},
	{
		"name": "FieldValue.options.facet",
		"notSupportedIn": "",
		"comment": "<p>Specifies the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component to toggle when the end user clicks the FieldValue.\nDefault value is the value of <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.field\">FieldValue.options.field</a>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>If the target <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id-1\">Facet.options.id</a> is is not the same as its <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>), you must specify\nthis option manually in order to link to the correct Facet.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field that the FieldValue should display.\nSpecifying a value for this parameter is required in order for the FieldValue component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true",
			"defaultValue": "@field"
		}
	},
	{
		"name": "FieldValue.options.helper",
		"notSupportedIn": "",
		"comment": "<p>Specifies the helper that the FieldValue should use to display its content.\nWhile several helpers exist by default (see <a href=\"https://coveo.github.io/search-ui/interfaces/icorehelpers.html\">ICoreHelpers</a>), it is also possible for you to create your own\ncustom helpers (see <a href=\"https://coveo.github.io/search-ui/classes/templatehelpers.html\">TemplateHelpers</a>).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.options.helperOptions",
		"notSupportedIn": "",
		"comment": "<p>Specifies the options to call on the specified helper.</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "true"
		}
	},
	{
		"name": "FieldValue.options.htmlValue",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the content to display is an HTML element.\nDefault value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "FieldValue.options.separator",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.splitvalues\">FieldValue.options.splitValues</a> is <code>true</code>, specifies the separator string which separates multi-value\nfields in the index.\nSee <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.displayseparator\">FieldValue.options.displaySeparator</a>.</p>\n<p>Default value is <code>&quot;;&quot;</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "splitValues",
			"defaultValue": ";"
		}
	},
	{
		"name": "FieldValue.options.splitValues",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to split the FieldValue at each <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.separator\">FieldValue.options.separator</a>.\nThis is useful for splitting groups using a <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>.</p>\n<p>When this option is <code>true</code>, the displayed values are split by the <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.displayseparator\">FieldValue.options.displaySeparator</a>.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "FieldValue.options.textCaption",
		"notSupportedIn": "",
		"comment": "<p>Specifies a caption to display before the value.\nDefault value is <code>undefined</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FieldValue.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new FieldValue.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding",
		"notSupportedIn": "",
		"comment": "<p>The <code>Folding</code> component makes it possible to render hierarchic representations of search results sharing a common\n<a href=\"https://coveo.github.io/search-ui/components/folding.html#options.field\"><code>field</code></a>.\nThis component has no visual impact on its own. It simply folds certain search results so that the\n<a href=\"https://coveo.github.io/search-ui/components/resultfolding.html\"><code>ResultFolding</code></a> and <a href=\"https://coveo.github.io/search-ui/components/resultattachments.html\"><code>ResultAttachments</code></a> components can then nicely\nrender them within result templates (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n<p>A typical use case of the <code>Folding</code> component is to fold email conversations and message board threads results in a\nresult set in order to display them in a convenient format. Messages belonging to a single conversation typically\nhave a unique conversation ID. By indexing this ID on a field, you can use it to fold search results (see\n<a href=\"https://docs.coveo.com/en/428/\">Folding Results</a>).</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>There can only be one <code>Folding</code> component per <a href=\"https://coveo.github.io/search-ui/components/tab.html\"><code>Tab</code></a> component.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options.child",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field that determines whether a certain result is a child of another top result.\n<strong>Note:</strong></p>\n<blockquote>\n<p>In the index, the values of the corresponding field must:</p>\n<ul>\n<li>Contain alphanumerical characters only.</li>\n<li>Contain no more than 60 characters.</li>\n</ul>\n</blockquote>\n<p>Default value is <code>@foldingchild</code>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "@foldingchild"
		}
	},
	{
		"name": "Folding.options.childField",
		"notSupportedIn": "",
		"comment": "<p>This option is deprecated. Instead, use the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.parent\">Folding.options.parent</a> option.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options.enableExpand",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to add a callback function on the top result, allowing to make an additional query to load all\nof its child results (e.g., to load all conversations of a given thread).\nConcretely, the <a href=\"https://coveo.github.io/search-ui/components/resultfolding.html\"><code>ResultFolding</code></a> component uses this for its <strong>Show More</strong> link.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.expandexpression\"><code>expandExpression</code></a> and\n<a href=\"https://coveo.github.io/search-ui/components/folding.html#options.maximumexpandedresults\"><code>maximumExpandedResults</code></a> options.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Folding.options.expandExpression",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\"><code>enableExpand</code></a> option is <code>true</code>, specifies a custom constant\nexpression to send when querying the expanded results.\nDefault value is <code>undefined</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableExpand"
		}
	},
	{
		"name": "Folding.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the field on which to do the folding.\nSpecifying a value for this option is required for this component to work.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>In an Elasticsearch index, the corresponding field must be configured as a <em>Facet</em> field\n(see <a href=\"https://docs.coveo.com/en/1982/\">Add or Edit Fields</a>).\nThis limitation does not apply to Coveo indexes.</p>\n</blockquote>\n<p>Default value is <code>@foldingcollection</code>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "@foldingcollection"
		}
	},
	{
		"name": "Folding.options.getMoreResults",
		"notSupportedIn": "",
		"comment": "<p>Specifies the function that manages the folding of all results.\nDefault value is:</p>\n<pre><code class=\"lang-javascript\">Coveo.Folding.defaultGetMoreResults = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">results</span>) </span>{\n   <span class=\"hljs-comment\">// The results are flat, just do the folding.</span>\n   <span class=\"hljs-keyword\">return</span> Coveo.Folding.foldWithParent(results);\n}\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options.getResult",
		"notSupportedIn": "",
		"comment": "<p>Specifies the function that manages the individual folding of each result.\nDefault value is:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> results = result.childResults || [];\n<span class=\"hljs-comment\">// Add the top result at the top of the list.</span>\nresults.unshift(result);\n<span class=\"hljs-comment\">// Empty childResults just to clean it.</span>\nresult.childResults = [];\n<span class=\"hljs-comment\">// Fold those results.</span>\nresults = Coveo.Folding.foldWithParent(results);\n<span class=\"hljs-comment\">// The first result is the top one.</span>\n<span class=\"hljs-keyword\">var</span> topResult = results.shift();\n<span class=\"hljs-comment\">// All other results are childResults.</span>\ntopResult.childResults = results;\n<span class=\"hljs-keyword\">return</span> topResult;\n</code></pre>\n<p>You can pre-process all the result with this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface:</p>\n<pre><code class=\"lang-javascript\">Coveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">Folding</span>: {\n     <span class=\"hljs-attr\">getResult</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n       result = Coveo.Folding.defaultGetResult(result);\n       <span class=\"hljs-comment\">// Your code here</span>\n     }\n   }\n})\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options.maximumExpandedResults",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\"><code>enableExpand</code></a> option is <code>true</code>, specifies the maximum number of\nresults to load when expanding.\nDefault value is <code>100</code>. Minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableExpand",
			"min": "1",
			"defaultValue": "100"
		}
	},
	{
		"name": "Folding.options.parent",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field that determines whether a certain result is a top result containing other child results.\n<strong>Note:</strong></p>\n<blockquote>\n<p>In the index, the values of the corresponding field must:</p>\n<ul>\n<li>Contain alphanumerical characters only.</li>\n<li>Contain no more than 60 characters.</li>\n</ul>\n</blockquote>\n<p>Default value is <code>@foldingparent</code>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "@foldingparent"
		}
	},
	{
		"name": "Folding.options.parentField",
		"notSupportedIn": "",
		"comment": "<p>This option is deprecated. Instead, use the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.child\">Folding.options.child</a> option.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options.range",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum number of child results to fold.\n<strong>Example:</strong></p>\n<blockquote>\n<p>For an email thread with a total of 20 messages, using the default value of <code>2</code> means that the component loads\nup to a maximum of 2 child messages under the original message, unless the end user expands the entire\nconversation using the <strong>Show More</strong> link (see the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\"><code>enableExpand</code></a>\noption).</p>\n</blockquote>\n<p>Default value is <code>2</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "2"
		}
	},
	{
		"name": "Folding.options.rearrange",
		"notSupportedIn": "",
		"comment": "<p>Specifies the sort criteria to apply to the top result and its child results (e.g., <code>date ascending</code>,\n<code>@myfield descending</code>, etc.). See <a href=\"https://docs.coveo.com/en/1461/#RestQueryParameters-sortCriteria\">sortCriteria</a>.\nThis option works from the results returned by the index. This means that if only the three most relevant folded results are returned by the index\nand you choose to rearrange the folded results by date, then the three most relevant results will be rearranged by date,\nmeaning that the first folded result is not necessarily the oldest or newest item.</p>\n<p>However, since clicking on the <code>Show More</code> button triggers a new query, you would receive new results based on the sort criteria of this option.</p>\n<p><strong>Example</strong></p>\n<blockquote>\n<p>If you are folding email results by conversation and you specify <code>date descending</code> as the <code>rearrange</code> value of\nthe <code>Folding</code> component, the component re-arranges email conversations so that the newest email is always the\ntop result. Specifying <code>date ascending</code> instead always makes the original email the top result, as it is also\nnecessarily the oldest.</p>\n</blockquote>\n<p>By default, the component displays the results in the order that the index returns them.</p>\n",
		"type": "SortCriteria",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options.options.child",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field that determines whether a certain result is a child of another top result.\n<strong>Note:</strong></p>\n<blockquote>\n<p>In the index, the values of the corresponding field must:</p>\n<ul>\n<li>Contain alphanumerical characters only.</li>\n<li>Contain no more than 60 characters.</li>\n</ul>\n</blockquote>\n<p>Default value is <code>@foldingchild</code>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "@foldingchild"
		}
	},
	{
		"name": "Folding.options.options.childField",
		"notSupportedIn": "",
		"comment": "<p>This option is deprecated. Instead, use the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.parent\">Folding.options.parent</a> option.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options.options.enableExpand",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to add a callback function on the top result, allowing to make an additional query to load all\nof its child results (e.g., to load all conversations of a given thread).\nConcretely, the <a href=\"https://coveo.github.io/search-ui/components/resultfolding.html\"><code>ResultFolding</code></a> component uses this for its <strong>Show More</strong> link.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.expandexpression\"><code>expandExpression</code></a> and\n<a href=\"https://coveo.github.io/search-ui/components/folding.html#options.maximumexpandedresults\"><code>maximumExpandedResults</code></a> options.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Folding.options.options.expandExpression",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\"><code>enableExpand</code></a> option is <code>true</code>, specifies a custom constant\nexpression to send when querying the expanded results.\nDefault value is <code>undefined</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableExpand"
		}
	},
	{
		"name": "Folding.options.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the field on which to do the folding.\nSpecifying a value for this option is required for this component to work.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>In an Elasticsearch index, the corresponding field must be configured as a <em>Facet</em> field\n(see <a href=\"https://docs.coveo.com/en/1982/\">Add or Edit Fields</a>).\nThis limitation does not apply to Coveo indexes.</p>\n</blockquote>\n<p>Default value is <code>@foldingcollection</code>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "@foldingcollection"
		}
	},
	{
		"name": "Folding.options.options.getMoreResults",
		"notSupportedIn": "",
		"comment": "<p>Specifies the function that manages the folding of all results.\nDefault value is:</p>\n<pre><code class=\"lang-javascript\">Coveo.Folding.defaultGetMoreResults = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">results</span>) </span>{\n   <span class=\"hljs-comment\">// The results are flat, just do the folding.</span>\n   <span class=\"hljs-keyword\">return</span> Coveo.Folding.foldWithParent(results);\n}\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options.options.getResult",
		"notSupportedIn": "",
		"comment": "<p>Specifies the function that manages the individual folding of each result.\nDefault value is:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> results = result.childResults || [];\n<span class=\"hljs-comment\">// Add the top result at the top of the list.</span>\nresults.unshift(result);\n<span class=\"hljs-comment\">// Empty childResults just to clean it.</span>\nresult.childResults = [];\n<span class=\"hljs-comment\">// Fold those results.</span>\nresults = Coveo.Folding.foldWithParent(results);\n<span class=\"hljs-comment\">// The first result is the top one.</span>\n<span class=\"hljs-keyword\">var</span> topResult = results.shift();\n<span class=\"hljs-comment\">// All other results are childResults.</span>\ntopResult.childResults = results;\n<span class=\"hljs-keyword\">return</span> topResult;\n</code></pre>\n<p>You can pre-process all the result with this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface:</p>\n<pre><code class=\"lang-javascript\">Coveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">Folding</span>: {\n     <span class=\"hljs-attr\">getResult</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n       result = Coveo.Folding.defaultGetResult(result);\n       <span class=\"hljs-comment\">// Your code here</span>\n     }\n   }\n})\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options.options.maximumExpandedResults",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\"><code>enableExpand</code></a> option is <code>true</code>, specifies the maximum number of\nresults to load when expanding.\nDefault value is <code>100</code>. Minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableExpand",
			"min": "1",
			"defaultValue": "100"
		}
	},
	{
		"name": "Folding.options.options.parent",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field that determines whether a certain result is a top result containing other child results.\n<strong>Note:</strong></p>\n<blockquote>\n<p>In the index, the values of the corresponding field must:</p>\n<ul>\n<li>Contain alphanumerical characters only.</li>\n<li>Contain no more than 60 characters.</li>\n</ul>\n</blockquote>\n<p>Default value is <code>@foldingparent</code>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "@foldingparent"
		}
	},
	{
		"name": "Folding.options.options.parentField",
		"notSupportedIn": "",
		"comment": "<p>This option is deprecated. Instead, use the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.child\">Folding.options.child</a> option.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.options.options.range",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum number of child results to fold.\n<strong>Example:</strong></p>\n<blockquote>\n<p>For an email thread with a total of 20 messages, using the default value of <code>2</code> means that the component loads\nup to a maximum of 2 child messages under the original message, unless the end user expands the entire\nconversation using the <strong>Show More</strong> link (see the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\"><code>enableExpand</code></a>\noption).</p>\n</blockquote>\n<p>Default value is <code>2</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "2"
		}
	},
	{
		"name": "Folding.options.options.rearrange",
		"notSupportedIn": "",
		"comment": "<p>Specifies the sort criteria to apply to the top result and its child results (e.g., <code>date ascending</code>,\n<code>@myfield descending</code>, etc.). See <a href=\"https://docs.coveo.com/en/1461/#RestQueryParameters-sortCriteria\">sortCriteria</a>.\nThis option works from the results returned by the index. This means that if only the three most relevant folded results are returned by the index\nand you choose to rearrange the folded results by date, then the three most relevant results will be rearranged by date,\nmeaning that the first folded result is not necessarily the oldest or newest item.</p>\n<p>However, since clicking on the <code>Show More</code> button triggers a new query, you would receive new results based on the sort criteria of this option.</p>\n<p><strong>Example</strong></p>\n<blockquote>\n<p>If you are folding email results by conversation and you specify <code>date descending</code> as the <code>rearrange</code> value of\nthe <code>Folding</code> component, the component re-arranges email conversations so that the newest email is always the\ntop result. Specifying <code>date ascending</code> instead always makes the original email the top result, as it is also\nnecessarily the oldest.</p>\n</blockquote>\n<p>By default, the component displays the results in the order that the index returns them.</p>\n",
		"type": "SortCriteria",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Folding.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>Folding</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem",
		"notSupportedIn": "",
		"comment": "<p>The FollowItem component renders a widget that the end user can click to follow a particular item. A user following\nan item receives email notifications when the item changes.\n<strong>Note:</strong></p>\n<blockquote>\n<p>A <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html\">SearchAlerts</a> component must be present in the page for this component to work. It is also necessary to\nmeet certain requirements to be able to use this component (see\n<a href=\"https://docs.coveo.com/en/1932/\">Deploying Search Alerts on a Coveo JS Search Page</a>).</p>\n</blockquote>\n<p>This component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the follow item component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.options.modifiedDateField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the <a href=\"https://coveo.github.io/search-ui/interfaces/isubscriptionitemrequest.html#modifieddatefield\">ISubscriptionItemRequest.modifiedDateField</a> to use when sending the\n<a href=\"https://coveo.github.io/search-ui/interfaces/isubscriptionitemrequest.html\">ISubscriptionItemRequest</a>.\nDefault value is <code>undefined</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.options.watchedFields",
		"notSupportedIn": "",
		"comment": "<p>Specifies the <a href=\"https://coveo.github.io/search-ui/interfaces/isubscriptionitemrequest.html#watchedfields\">ISubscriptionItemRequest.watchedFields</a> to use when sending the\n<a href=\"https://coveo.github.io/search-ui/interfaces/isubscriptionitemrequest.html\">ISubscriptionItemRequest</a>.\nDefault value is <code>undefined</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FollowItem.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new FollowItem component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery",
		"notSupportedIn": "",
		"comment": "<p>The HiddenQuery component handles a &quot;hidden&quot; query parameter (<code>hq</code>) and its description (<code>hd</code>).\nConcretely, this means that if a HiddenQuery component is present in your page and you load your search interface\nwith <code>hq=foo&amp;hd=bar</code> in the URL hash, the component adds <code>foo</code> as an expression to the query (<code>hq</code> is the hidden\nquery) and renders <code>bar</code> in the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a> (<code>hd</code> is the hidden query description).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.options",
		"notSupportedIn": "",
		"comment": "<p>Possible options for the <code>HiddenQuery</code> component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.options.maximumDescriptionLength",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum number of characters from the hidden query description (<code>hd</code>) to display in the\n<a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a>.\nBeyond this length, the HiddenQuery component slices the rest of the description and replaces it by <code>...</code>.</p>\n<p>Default value is <code>100</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "100"
		}
	},
	{
		"name": "HiddenQuery.options.title",
		"notSupportedIn": "",
		"comment": "<p>Specifies the title that should appear in the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a> when the HiddenQuery populates it.\nDefault value is the localized string f\nor <code>&quot;Additional filters:&quot;</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HiddenQuery.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new HiddenQuery component, which binds multiple events (<a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#buildingquery\">QueryEvents.buildingQuery</a>,\n<a href=\"https://coveo.github.io/search-ui/classes/breadcrumbevents.html#populatebreadcrumb\">BreadcrumbEvents.populateBreadcrumb</a> and <a href=\"https://coveo.github.io/search-ui/classes/breadcrumbevents.html#clearbreadcrumb\">BreadcrumbEvents.clearBreadcrumb</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.facetSearch",
		"notSupportedIn": "",
		"comment": "<p>Renders and handles the facet <strong>Search</strong> part of the component.</p>\n",
		"type": "FacetSearch",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.facetSettings",
		"notSupportedIn": "",
		"comment": "<p>Renders and handles the facet <strong>Settings</strong> part of the component</p>\n",
		"type": "FacetSettings",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HierarchicalFacet.options.delimitingCharacter",
		"notSupportedIn": "",
		"comment": "<p>The character that allows to specify the hierarchical dependency.\n<strong>Example:</strong></p>\n<p>If your field has the following values:</p>\n<p><code>@field: c; c&gt;folder2; c&gt;folder2&gt;folder3;</code></p>\n<p>The delimiting character is <code>&gt;</code>.</p>\n<p>Default value is <code>|</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "|"
		}
	},
	{
		"name": "HierarchicalFacet.options.levelEnd",
		"notSupportedIn": "",
		"comment": "<p>Specifies at which level (0-based index) of the hierarchy the <code>HierarchicalFacet</code> should stop displaying its\nvalues.\nDefault value is <code>undefined</code>, which means the <code>HierarchicalFacet</code> component renders all hierarchical levels.\nMinimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0"
		}
	},
	{
		"name": "HierarchicalFacet.options.levelStart",
		"notSupportedIn": "",
		"comment": "<p>Specifies at which level (0-based index) of the hierarchy the <code>HierarchicalFacet</code> should start displaying its\nvalues.\n<strong>Example:</strong></p>\n<p>If you have the following files indexed on a file system:</p>\n<pre><code>c:<span class=\"hljs-string\">\\</span>\n   folder1<span class=\"hljs-string\">\\</span>\n       text1.txt\n   folder2<span class=\"hljs-string\">\\</span>\n     folder3<span class=\"hljs-string\">\\</span>\n       text2.txt\n</code></pre><p>Setting <code>levelStart</code> to <code>1</code> displays <code>folder1</code> and <code>folder2</code> in the <code>HierarchicalFacet</code>, but omits <code>c:</code>.</p>\n<p>Default (and minimum) value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "0"
		}
	},
	{
		"name": "HierarchicalFacet.options.marginByLevel",
		"notSupportedIn": "",
		"comment": "<p>Specifies the margin (in pixels) to display between each hierarchical level when expanding.\nDefault value is <code>10</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "10"
		}
	},
	{
		"name": "HierarchicalFacet.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>HierarchicalFacet</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon",
		"notSupportedIn": "",
		"comment": "<p>The Icon component outputs the corresponding icon for a given file type. The component searches for a suitable icon\nfrom those available in the Coveo JavaScript Search Framework. If the component finds no suitable icon, it instead\noutputs a generic icon.\nThis component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the Icon</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.options.conditions",
		"notSupportedIn": "",
		"comment": "<p>A field-based condition that must be satisfied by the query result item for the component to be rendered.\nNote: This option uses a distinctive markup configuration syntax allowing multiple conditions to be expressed. Its underlying logic is the same as that of the field value conditions mechanism used by result templates.</p>\n<p><strong>Examples:</strong>\nRender the component if the query result item&#39;s @documenttype field value is Article or Documentation.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoIcon\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@author\"</span> <span class=\"hljs-attr\">data-condition-field-documenttype</span>=<span class=\"hljs-string\">\"Article, Documentation\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Render the component if the query result item&#39;s @documenttype field value is anything but Case.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoIcon\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@author\"</span> <span class=\"hljs-attr\">data-condition-field-not-documenttype</span>=<span class=\"hljs-string\">\"Case\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Render the component if the query result item&#39;s @documenttype field value is Article, and if its @author field value is anything but Anonymous.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoIcon\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@author\"</span> <span class=\"hljs-attr\">data-condition-field-documenttype</span>=<span class=\"hljs-string\">\"Article\"</span> <span class=\"hljs-attr\">data-condition-field-not-author</span>=<span class=\"hljs-string\">\"Anonymous\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Default value is <code>undefined</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.options.labelValue",
		"notSupportedIn": "",
		"comment": "<p>Specifies what text to display as the icon caption/label.\nDefault value is <code>undefined</code>, which means that the Coveo JavaScript Search Framework determines what text the icon\nneeds to display depending on the result file type.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.options.small",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the Icon component should output the smaller version of the icon instead of the regular one.\nDefault value is <code>undefined</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.options.value",
		"notSupportedIn": "",
		"comment": "<p>Specifies the value that the Icon component should output as its CSS class instead of the auto-selected value.\nDefault value is <code>undefined</code>, which means that the Coveo JavaScript Search Framework outputs a suitable icon\ndepending on the result file type.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.options.withLabel",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the Icon component should force the output icon to display its caption/label.\n<strong>Note:</strong></p>\n<blockquote>\n<p>Due to limited screen real estate, setting this option to <code>true</code> has no effect on icons used inside Coveo for\nSalesforce Insight Panels.</p>\n</blockquote>\n<p>Default value is <code>undefined</code>, which means that the Coveo JavaScript Search Framework determines whether the icon\nneeds to display a caption/label depending on the result file type.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Icon.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Icon component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue",
		"notSupportedIn": "",
		"comment": "<p>This <a href=\"https://docs.coveo.com/en/413/\">result template</a> component renders an image from a URL retrieved in a given <a href=\"https://coveo.github.io/search-ui/components/imagefieldvalue.html#options.field\"><code>field</code></a>.\nA typical use case of this component is to display product images in the context of commerce.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.options.field",
		"notSupportedIn": "",
		"comment": "<p><strong>Required</strong>. The name of a field whose value is the URL of the image to display.\n<strong>Note:</strong> The component uses the value of this field to set the <code>src</code> attribute of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\"><code>img</code></a> HTML tag it generates.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "ImageFieldValue.options.height",
		"notSupportedIn": "",
		"comment": "<p>The height of the image (in pixels).\n<strong>Note:</strong> The component uses this value to set the <code>height</code> attribute of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\"><code>img</code></a> HTML tag it generates.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.options.srcTemplate",
		"notSupportedIn": "",
		"comment": "<p>A <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a>)\nfrom which to generate the <code>img</code> tag&#39;s <code>src</code> attribute value.\nThis option overrides the <a href=\"https://coveo.github.io/search-ui/components/imagefieldvalue.html#options.field\"><code>field</code></a> option value.</p>\n<p>The template literal can reference any number of fields from the parent result. It can also reference global\nscope properties.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>The following markup generates an <code>src</code> value such as <code>http://uri.com?id=itemTitle</code>:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoImageFieldValue'</span> <span class=\"hljs-attr\">data-src-template</span>=<span class=\"hljs-string\">'${clickUri}?id=${raw.title}'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<ul>\n<li>The following markup generates an <code>src</code> value such as <code>localhost/fooBar</code>:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoImageFieldValue'</span> <span class=\"hljs-attr\">data-src-template</span>=<span class=\"hljs-string\">'${window.location.hostname}/{Foo.Bar}'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<p>Default value is <code>undefined</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.options.width",
		"notSupportedIn": "",
		"comment": "<p>The width of the image (in pixels).\n<strong>Note:</strong> The component uses this value to set the <code>width</code> attribute of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\"><code>img</code></a> HTML tag it generates.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ImageFieldValue.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new ImageFieldValue.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo",
		"notSupportedIn": "",
		"comment": "<p>The Logo component adds a clickable Coveo logo in the search interface.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.options",
		"notSupportedIn": "",
		"comment": "<p>The possible options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Logo.options.target",
		"notSupportedIn": "",
		"comment": "<p>Specifies how the link to the Coveo website should be opened.\nValid values supported are <code>_top</code>, <code>_blank</code>, <code>_self</code>, <code>_parent</code>.</p>\n<p>Default value is <code>undefined</code>, meaning standard browser behaviour for links will be respected.</p>\n",
		"type": "",
		"constrainedValues": [
			"_top,_blank,_self,_parent"
		],
		"miscAttributes": {}
	},
	{
		"name": "Logo.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Logo component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>The Matrix component uses the values of two fields (row and column) to display the results of the specified computed\nfield in a table.\nThe user specifies the values to use for the columns. An <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> operation performed at the same time\nas the main query retrieves the values to use for the rows.</p>\n<p>In a way that is similar to the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component, selecting a Matrix cell allows the end user to drill down\ninside the results by restricting the row field and the column field to match the values of the selected cell.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.data",
		"notSupportedIn": "",
		"comment": "<p>Holds the data for the Matrix.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.selectedColumnValue",
		"notSupportedIn": "",
		"comment": "<p>The currently selected column value, or <code>undefined</code> if nothing is selected.</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.selectedRowValue",
		"notSupportedIn": "",
		"comment": "<p>The currently selected row value, or <code>undefined</code> if nothing is selected.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.options",
		"notSupportedIn": "",
		"comment": "<p>The possible options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.options.cellFontSize",
		"notSupportedIn": "",
		"comment": "<p>Specifies the font-size to use for displaying text inside the cells.\nThis option is mainly useful to prevent a Matrix containing many columns from cropping some of its values.</p>\n<p>However, instead of using this option to solve this kind of issue, you could also remove some of the less\nimportant columns from your Matrix or modify the CSS of your page to allow the Matrix to occupy a larger space.</p>\n<p>Default value is <code>&#39;&#39;</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": ""
		}
	},
	{
		"name": "Matrix.options.columnField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field to use for the columns.\nSpecifying a value for this options is required for this component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "Matrix.options.columnFieldValues",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field values to use for each column.\nSee also <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.columnlabels\">Matrix.options.columnLabels</a>.</p>\n<p>Default value is <code>[]</code>, which means that the Matrix will not generate any column (except the <strong>Total</strong> column, if\n<a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablerowtotals\">Matrix.options.enableRowTotals</a> is <code>true</code>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "[]"
		}
	},
	{
		"name": "Matrix.options.columnHeader",
		"notSupportedIn": "",
		"comment": "<p>Specifies the label for the first column on the left as a description of the <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.columnfield\">Matrix.options.columnField</a>.\nDefault value is <code>undefined</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.options.columnLabels",
		"notSupportedIn": "",
		"comment": "<p>Specifies the label values to use for each column.\nDefault value is <code>[]</code>. The array set for this options should match the <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.columnfieldvalues\">Matrix.options.columnFieldValues</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "[]"
		}
	},
	{
		"name": "Matrix.options.computedField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field whose computed values you want to display in the cells.\nSpecifying a value for this options is required for this component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "Matrix.options.computedFieldFormat",
		"notSupportedIn": "",
		"comment": "<p>Specifies how to format the values resulting from a <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.computedfieldoperation\">Matrix.options.computedFieldOperation</a>.\nThe Globalize library defines all available formats (see\n<a href=\"https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-\">Globalize</a>).</p>\n<p>The most commonly used formats are:</p>\n<ul>\n<li><code>c0</code> - Formats the value as a currency.</li>\n<li><code>n0</code> - Formats the value as an integer.</li>\n<li><code>n2</code> - Formats the value as a floating point with 2 decimal digits.</li>\n</ul>\n<p>Default value is <code>c0</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "c0"
		}
	},
	{
		"name": "Matrix.options.computedFieldOperation",
		"notSupportedIn": "",
		"comment": "<p>Specifies the type of aggregate operation to perform on the <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.computedfield\">Matrix.options.computedField</a>.\nThe possible values are:</p>\n<ul>\n<li><code>sum</code> - Computes the sum of the computed field values.</li>\n<li><code>average</code> - Computes the average of the computed field values.</li>\n<li><code>minimum</code> - Finds the minimum value of the computed field values.</li>\n<li><code>maximum</code> - Finds the maximum value of the computed field values.</li>\n</ul>\n<p>Default value is <code>sum</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "sum"
		}
	},
	{
		"name": "Matrix.options.enableColumnTotals",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to add a <strong>Total</strong> row containing the total of each column.\nDefault value is <code>true</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Matrix.options.enableHoverPreview",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to show a preview popup of cell results when hovering over a cell.\nSee also <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewsortcriteria\">Matrix.options.previewSortCriteria</a>, <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewmaxwidth\">Matrix.options.previewMaxWidth</a>,\n<a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewminwidth\">Matrix.options.previewMinWidth</a>, <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewdelay\">Matrix.options.previewDelay</a> and\n<a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewtemplate\">Matrix.options.previewTemplate</a>.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Matrix.options.enableRowTotals",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display a <strong>Total</strong> column containing the sum of each row.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Matrix.options.maximumNumberOfRows",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum number of rows to display in the Matrix.\nDefault value is <code>10</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "10"
		}
	},
	{
		"name": "Matrix.options.maximumNumberOfValuesInGroupBy",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum number of results to include in the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> for the columns.\nThis value should always be greater than the <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.maximumnumberofrows\">Matrix.options.maximumNumberOfRows</a>. If it is too small, some\nof the results will not be displayed in the Matrix.</p>\n<p>Default value is <code>100</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "100"
		}
	},
	{
		"name": "Matrix.options.previewDelay",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablehoverpreview\">Matrix.options.enableHoverPreview</a> is <code>true</code>, specifies the delay (in milliseconds) before sending the\nquery to get the preview results.\nDefault value is <code>500</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "500"
		}
	},
	{
		"name": "Matrix.options.previewMaxWidth",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablehoverpreview\">Matrix.options.enableHoverPreview</a> is <code>true</code>, specifies the maximum width (in pixels) of the preview\npopup.\nDefault value is <code>500px</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "500px"
		}
	},
	{
		"name": "Matrix.options.previewMinWidth",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablehoverpreview\">Matrix.options.enableHoverPreview</a> is <code>true</code>, specifies the minimum width (in pixels) of the preview\npopup.\nDefault value is <code>0</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "0"
		}
	},
	{
		"name": "Matrix.options.previewSortCriteria",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablehoverpreview\">Matrix.options.enableHoverPreview</a> is <code>true</code>, specifies the criteria to use for sorting the results of\nthe hover preview.\nThe available sort criteria values are the same as those of the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html\">IQuery</a>.</p>\n<p>The possible values are:</p>\n<ul>\n<li><code>relevancy</code>: Uses all configured ranking weights and any specified ranking expressions to sort the results.</li>\n<li><code>dateascending</code> / <code>datedescending</code>: Sorts the results using the <code>@date</code> field value, which is typically the\nlast modification date of an item in the index.</li>\n<li><code>qre</code>: Sorts the results using only the weights applied by ranking expressions. Using <code>qre</code> is much like using\n<code>relevancy</code>, except that <code>qre</code> does not compute automatic weights, such as weights based on keyword proximity.</li>\n<li><code>nosort</code>: Does not sort the results. Using <code>nosort</code> returns the items in an essentially random order.</li>\n<li><code>fieldascending</code> / <code>fielddescending</code>: Sorts the results using the value of a custom field.</li>\n<li><code>fieldascending</code> / <code>fielddescending</code>: Sorts the results using the value of a custom field.</li>\n</ul>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewsortfield\">Matrix.options.previewSortField</a>.</p>\n<p>Default value is <code>FieldDescending</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "FieldDescending"
		}
	},
	{
		"name": "Matrix.options.previewSortField",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewsortcriteria\">Matrix.options.previewSortCriteria</a> is <code>fieldascending</code> or <code>fielddescending</code>, specifies the field to\nuse for sorting the results of the hover preview.\nDefault value is the value of <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.computedfield\">Matrix.options.computedField</a>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.options.previewTemplate",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablehoverpreview\">Matrix.options.enableHoverPreview</a> is <code>true</code>, specifies the template ID or CSS selector of the template\nto use to render the results of the hover preview.\nYou must use either <code>data-template-id</code> or <code>data-template-selector</code> in the markup to specify a value for this\noption.</p>\n<p><strong>Examples:</strong></p>\n<p>Specifying what template to use by referring to its template ID:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoMatrix'</span> <span class=\"hljs-attr\">data-template-id</span>=<span class=\"hljs-string\">'TemplateId'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Specifying what template to use by referring to its CSS selector:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoMatrix'</span> <span class=\"hljs-attr\">data-template-selector</span>=<span class=\"hljs-string\">'.templateSelector'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n",
		"type": "Template",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.options.rowField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field to use for the rows.\nSpecifying a value for this options is required for this component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "Matrix.options.sortCriteria",
		"notSupportedIn": "",
		"comment": "<p>Specifies the criteria to use for sorting the rows.\nSee <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html#sortcriteria\">IGroupByRequest.sortCriteria</a> for the list of possible values.</p>\n<p>Default value is <code>computedfielddescending</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "computedfielddescending"
		}
	},
	{
		"name": "Matrix.options.title",
		"notSupportedIn": "",
		"comment": "<p>Specifies the text to display at the top of the Matrix.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Matrix.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Matrix. Also verifies whether options are valid and coherent. Binds query events.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms",
		"notSupportedIn": "",
		"comment": "<p>This <a href=\"https://docs.coveo.com/en/513/#using-result-template-components\">result template component</a> renders a list of query terms\nthat were not matched by the associated result item.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.missingTerms",
		"notSupportedIn": "",
		"comment": "<p>Returns all original basic query expression terms that were not matched by the result item the component instance is associated with.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.options.caption",
		"notSupportedIn": "",
		"comment": "<p>The text to display before missing terms.\n<strong>Default:</strong> The localized string for <code>Missing</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MissingTerms.options.clickable",
		"notSupportedIn": "",
		"comment": "<p>Whether to allow the end-user to click a missing term to filter out items that do not match this term.\n<strong>Default:</strong> <code>true</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "MissingTerms.options.numberOfTerms",
		"notSupportedIn": "",
		"comment": "<p>The maximum number of missing term to be displayed\n<strong>Default:</strong> <code>5</code>\u001d\u001c\n<strong>Minimum value:</strong> <code>1</code>\u001d\u001c</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1",
			"defaultValue": "5"
		}
	},
	{
		"name": "MissingTerms.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>MissingTerms</code> component instance.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox",
		"notSupportedIn": "",
		"comment": "<p>The <code>Omnibox</code> component extends the <a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a>, and thus provides the same basic options and\nbehaviors. Furthermore, the <code>Omnibox</code> adds a type-ahead capability to the search input.\nYou can configure the type-ahead feature by enabling or disabling certain addons, which the Coveo JavaScript Search\nFramework provides out-of-the-box (see the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablefieldaddon\"><code>enableFieldAddon</code></a>,\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablequeryextensionaddon\"><code>enableQueryExtension</code></a>, and\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablequerysuggestaddon\"><code>enableQuerySuggestAddon</code></a> options).</p>\n<p>Custom components and external code can also extend or customize the type-ahead feature and the query completion\nsuggestions it provides by attaching their own handlers to the\n<a href=\"https://coveo.github.io/search-ui/classes/omniboxevents.html#populateomniboxsuggestions\"><code>populateOmniboxSuggestions</code></a> event.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\"><code>Searchbox</code></a> component, which can automatically instantiate an <code>Omnibox</code> along with an\noptional <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\">SearchButton</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the omnibox</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.options.clearFiltersOnNewQuery",
		"notSupportedIn": "",
		"comment": "<p>Whether to clear all active query filters when the end user submits a new query from the search box.\nNote: This does not include the filter expression enforced by the currently selected tab, if any.</p>\n<p><strong>Default:</strong> <code>false</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Omnibox.options.enableFieldAddon",
		"notSupportedIn": "",
		"comment": "<p>The <code>field</code> addon makes the <code>Omnibox</code> highlight and complete field syntax. Setting this option to <code>true</code> automatically sets\nthe <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\">enableQuerySyntax</a> option to <code>true</code> as a side effect.\n<strong>Example:</strong></p>\n<blockquote>\n<p>Suppose you want to search for PDF files. You start typing <code>@f</code> in the search box. The <code>Omnibox</code> provides\nyou with several matching fields. You select the <code>@filetype</code> field. Then, you start typing <code>=p</code> in the input.\nThis time, the <code>Omnibox</code> provides you with several matching values for the <code>@filetype</code> field. You select the\n<code>pdf</code> suggestion, and submit your search request. Since the <code>enableQuerySyntax</code> option is set to <code>true</code>, the\nCoveo Search API interprets the basic expression as query syntax and returns the items whose <code>@filetype</code> field\nmatches the <code>pdf</code> value.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableQuerySyntax",
			"defaultValue": "false"
		}
	},
	{
		"name": "Omnibox.options.enableQueryExtensionAddon",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\">Querybox.options.enableQuerySyntax</a> is <code>true</code>, specifies whether to enable the <code>query extension</code> addon.\nThe <code>query extension</code> addon allows the Omnibox to complete the syntax for query extensions.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableQuerySyntax",
			"defaultValue": "false"
		}
	},
	{
		"name": "Omnibox.options.enableQuerySuggestAddon",
		"notSupportedIn": "",
		"comment": "<p>Whether to display Coveo Machine Learning (Coveo ML) query suggestions in the <code>Omnibox</code>.\nThe corresponding Coveo ML model must be properly configured in your Coveo Cloud organization, otherwise this\noption has no effect (see\n<a href=\"https://docs.coveo.com/en/1838/\">Managing Machine Learning Query Suggestions in a Query Pipeline</a>).</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>When you set this option and the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablesearchasyoutype\"><code>enableSearchAsYouType</code></a> option\nto <code>true</code>, the query suggestion feature returns the auto-completion of the currently typed keyword as its first\nquery suggestion.</p>\n</blockquote>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Omnibox.options.enableQuerySyntax",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the Coveo Platform should try to interpret special query syntax such as field references in the\nquery that the user enters in the Querybox (see\n<a href=\"https://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>).\nSetting this option to <code>true</code> also causes the query syntax in the Querybox to highlight.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Omnibox.options.enableSearchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Whether to automatically trigger a new query whenever the end user types additional text in the search box input.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.searchasyoutypedelay\"><code>searchAsYouTypeDelay</code></a> option.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>If you set this option and the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablequerysuggestaddon\"><code>enableQuerySuggestAddon</code></a>\noption to <code>true</code>, the query suggestion feature returns the auto-completion of the currently typed keyword as\nits first suggestion.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Omnibox.options.inline",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether query completion suggestions appearing in the <code>Omnibox</code> should push the result list and facets\ndown, rather than rendering themselves over them (and partially hiding them).\nSet this option as well as <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablesearchasyoutype\">Omnibox.options.enableSearchAsYouType</a> and\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablequerysuggestaddon\">Omnibox.options.enableQuerySuggestAddon</a> to <code>true</code> for a cool effect!</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Omnibox.options.numberOfSuggestions",
		"notSupportedIn": "",
		"comment": "<p>Specifies the number of suggestions that should appear in standard ML-powered query suggestions.\nThis option only affects the number of suggestions that appear with the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablequerysuggestaddon\">Omnibox.options.enableQuerySuggestAddon</a> option.</p>\n<p>This options does not affect the <a href=\"https://coveo.github.io/search-ui/components/analyticssuggestions.html\">AnalyticsSuggestions</a> or the <a href=\"https://coveo.github.io/search-ui/components/fieldsuggestions.html\">FieldSuggestions</a> component, which expose their own dedicated options for this parameter.</p>\n<p>Default value is <code>5</code>.</p>\n<p>Minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1",
			"defaultValue": "5"
		}
	},
	{
		"name": "Omnibox.options.omniboxTimeout",
		"notSupportedIn": "",
		"comment": "<p>Specifies a timeout (in milliseconds) before rejecting suggestions in the Omnibox.\nDefault value is <code>2000</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "2000"
		}
	},
	{
		"name": "Omnibox.options.placeholder",
		"notSupportedIn": "",
		"comment": "<p>Specifies a placeholder for the input.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Omnibox.options.querySuggestCharacterThreshold",
		"notSupportedIn": "",
		"comment": "<p>The minimum number of characters required in the in the text input before displaying available query suggestions when focus is on the component.\nNote: Only effective when <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablequerysuggestaddon\">enableQuerySuggestAddon</a> is true.</p>\n<p>depend: &#39;enableQuerySuggestAddon&#39;</p>\n<p>Default (and minimum): 0, meaning that trending query suggestions are displayed when focus is on the component, even if its text input is empty.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "0"
		}
	},
	{
		"name": "Omnibox.options.searchAsYouTypeDelay",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablesearchasyoutype\">Omnibox.options.enableSearchAsYouType</a> is <code>true</code>, specifies the delay (in milliseconds) before\ntriggering a new query when the end user types in the <code>Omnibox</code>.\nDefault value is <code>2000</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableSearchAsYouType",
			"min": "0",
			"defaultValue": "2000"
		}
	},
	{
		"name": "Omnibox.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Omnibox component. Also enables necessary addons and binds events on various query events.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList",
		"notSupportedIn": "",
		"comment": "<p>The OmniboxResultList component behaves exactly like the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> component (which it extends), except that\nit renders itself inside the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component.\nThis component can provide a kind of search-as-you-type functionality, allowing you to easily render complex Result\nTemplates inside the Omnibox component.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoOmniboxResultList\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"result-template\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/x-underscore\"</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultLink'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  </span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.elementsToIgnore",
		"notSupportedIn": "",
		"comment": "<p>Specifies a list a css class that should be ignored when the end user click result in the omnibox\nAny element that is specified here should normally be able to handle the standard click event.</p>\n<p>Any element that does not match this css class and that is clicked will trigger a redirection by the OmniboxResultList.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.options.headerTitle",
		"notSupportedIn": "",
		"comment": "<p>Specifies the title to use for this section.\nDefault value is the localized string for <code>Suggested Results</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.options.omniboxZIndex",
		"notSupportedIn": "",
		"comment": "<p>Specifies the z-index at which to render the ResultList inside the Omnibox.\nDefault value is <code>51</code>. Minimum value is <code>16</code> (<a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> components are at <code>50</code> by default)</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "16",
			"defaultValue": "51"
		}
	},
	{
		"name": "OmniboxResultList.options.onSelect",
		"notSupportedIn": "",
		"comment": "<p>Specifies the function to execute when the user selects a result suggestion.\nThe default function opens the corresponding result URI in the browser.</p>\n<p>It is only possible to specify a value for this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> call of your search interface. You\ncannot set it directly as an HTML attribute.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// You can call the init script using \"pure\" JavaScript:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">OmniboxResultList</span> : {\n       <span class=\"hljs-comment\">//Close the omnibox, change the selected HTMLElement background color and alert the result title.</span>\n       onSelect : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, resultElement, omniBoxObject</span>) </span>{\n           omniBoxObject.close();\n           resultElement.css(<span class=\"hljs-string\">'background-color'</span>, <span class=\"hljs-string\">'red'</span>);\n           alert(result.title);\n       }\n    }\n})\n\n<span class=\"hljs-comment\">// Or you can call the init script using the jQuery extension:</span>\n$(<span class=\"hljs-string\">\"#search\"</span>).coveo(<span class=\"hljs-string\">\"init\"</span>, {\n   <span class=\"hljs-attr\">OmniboxResultList</span> : {\n       <span class=\"hljs-comment\">//Close the Omnibox, change the selected HTMLElement background color and alert the result title.</span>\n       onSelect : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, resultElement, omniBoxObject</span>) </span>{\n           omniBoxObject.close();\n           resultElement.css(<span class=\"hljs-string\">'background-color'</span>, <span class=\"hljs-string\">'red'</span>);\n           alert(result.title);\n       }\n    }\n})\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.options.queryOverride",
		"notSupportedIn": "",
		"comment": "<p>Specifies the override to use on the query sent to the OmniboxResultList component.\nDefault value is <code>undefined</code>, which means no default override is specified.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxResultList.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new OmniboxResultList component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager",
		"notSupportedIn": "",
		"comment": "<p>The Pager component attaches itself to a <code>div</code> element and renders widgets that allow the end user to navigate\nthrough the different result pages.\nThis component takes care of triggering a query with the correct result range whenever the end user selects a page or\nuses the navigation buttons (<strong>Previous</strong> and <strong>Next</strong>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.currentPage",
		"notSupportedIn": "",
		"comment": "<p>The current page (1-based index).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the Pager</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.options.enableNavigationButton",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the <strong>Previous</strong> and <strong>Next</strong> buttons should appear at each end of the pager when appropriate.\nThe default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Pager.options.maxNumberOfPages",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum number of pages to display if enough results are available.\nThis property is typically set when the default number of accessible results from the index has been changed from its default value of <code>1000</code> (10 results per page X 100 <code>maxNumberOfPages</code>).\nDefault value is <code>100</code></p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Pager.options.maximumNumberOfResultsFromIndex",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum number of results that the index can return for any query.\nDefault value is <code>1000</code> in a Coveo index.</p>\n<p>If this value was modified in your Coveo index, you must specify the new value in this option for the Pager component to work properly</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "1000"
		}
	},
	{
		"name": "Pager.options.numberOfPages",
		"notSupportedIn": "",
		"comment": "<p>Specifies how many page links to display in the pager.\nDefault value is <code>5</code> on a desktop computers and <code>3</code> on a mobile device. Minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1"
		}
	},
	{
		"name": "Pager.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Pager. Binds multiple query events (<a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#newquery\">QueryEvents.newQuery</a>, <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#buildingquery\">QueryEvents.buildingQuery</a>,\n<a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a>, <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#queryerror\">QueryEvents.queryError</a> and <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#noresults\">QueryEvents.noResults</a>. Renders itself\non every query success.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext",
		"notSupportedIn": "",
		"comment": "<p>The <code>PipelineContext</code> component injects custom contextual information into the search requests and usage analytics events sent from a search interface.\nThis component is meant to be initialized on a <code>script</code> HTML tag whose <code>type</code> attribute is set to <code>text/context</code> and whose optional JSON content defines the custom information to send (each value can be set to a string or array of strings).</p>\n<p>See <a href=\"https://docs.coveo.com/en/399/\">Sending Custom Context Information</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PipelineContext.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel",
		"notSupportedIn": "",
		"comment": "<p>The PreferencesPanel component renders a <strong>Preferences</strong> item inside the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> component which the end\nuser can click to access a panel from which it is possible to specify certain customization options for the search\ninterface. These customization options are then saved in the browser local storage.\nThis component should be used inside the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> component.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/resultsfilterspreferences.html\">ResultsFiltersPreferences</a> and <a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html\">ResultsPreferences</a> components.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PreferencesPanel.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new PreferencesPanel.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri",
		"notSupportedIn": "",
		"comment": "<p>The <code>PrintableUri</code> component inherits from the <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\"> <code>ResultLink</code> </a> component and supports all of its options.\nThis component displays the URI, or path, to access a result.</p>\n<p>This component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PrintableUri.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new PrintableUri.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge",
		"notSupportedIn": "",
		"comment": "<p>The <code>PromotedResultsBadge</code> component adds a badge to promoted results in your interface.\nTo be considered promoted, a result needs to either:</p>\n<ul>\n<li>be a Featured Result configured through a Coveo Query Pipeline (see <a href=\"https://docs.coveo.com/en/1961/\">Adding and Managing Query Pipeline Featured Results</a>)</li>\n<li>be a recommended result by Coveo Machine Learning (see <a href=\"https://docs.coveo.com/en/1671/#automatic-relevance-tuning-art-feature\">Automatic Relevance Tuning (ART) Feature</a>).</li>\n</ul>\n<p>You can add this component anywhere in your search interface. The component will then add a badge to your results after they have been rendered.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PromotedResultsBadge.options.captionForFeatured",
		"notSupportedIn": "",
		"comment": "<p>Specifies the caption that should be used for &quot;Featured Results&quot;.\nDefault value is the localized string for <code>Featured</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "showBadgeForFeaturedResults"
		}
	},
	{
		"name": "PromotedResultsBadge.options.captionForRecommended",
		"notSupportedIn": "",
		"comment": "<p>Specifies the caption that should be used for &quot;Recommended Results&quot;.\nDefault value is the localized string for <code>Recommended</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "showBadgeForRecommendedResults"
		}
	},
	{
		"name": "PromotedResultsBadge.options.colorForFeaturedResults",
		"notSupportedIn": "",
		"comment": "<p>Specifies the color that should be used for &quot;Featured Results&quot;.\nThis can be specified using:</p>\n<ul>\n<li>a hexadecimal value (e.g., <code>#f58020</code>)</li>\n<li>an RGB value (e.g., <code>rgb(125,10,36)</code>)</li>\n<li>a CSS color name (e.g., <code>red</code>)</li>\n</ul>\n<p>Default value is <code>undefined</code>, and is controlled through the default stylesheet of the framework.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "showBadgeForFeaturedResults"
		}
	},
	{
		"name": "PromotedResultsBadge.options.colorForRecommendedResults",
		"notSupportedIn": "",
		"comment": "<p>Specifies the color that should be used for &quot;Recommended Results&quot;.\nThis can be specified using:</p>\n<ul>\n<li>a hexadecimal value (e.g., <code>#f58020</code>)</li>\n<li>an RGB value (e.g., <code>rgb(125,10,36)</code>)</li>\n<li>a CSS color name (e.g., <code>red</code>)</li>\n</ul>\n<p>Default value is <code>undefined</code>, and is controlled through the default stylesheet of the framework.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "showBadgeForRecommendedResults"
		}
	},
	{
		"name": "PromotedResultsBadge.options.showBadgeForFeaturedResults",
		"notSupportedIn": "",
		"comment": "<p>Whether to show a badge when a result was promoted through a query pipeline <em>featured results</em> rule.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "PromotedResultsBadge.options.showBadgeForRecommendedResults",
		"notSupportedIn": "",
		"comment": "<p>Whether to show a badge when a result was promoted by a Coveo ML ART model.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "PromotedResultsBadge.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration",
		"notSupportedIn": "",
		"comment": "<p>The QueryDuration component displays the duration of the last query execution.\nWhen a <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a> event is triggered, the QueryDuration component becomes visible. It also\ndisplays the global duration, the index duration, and the client duration in a single tooltip.</p>\n<p>If a <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#queryerror\">QueryEvents.queryError</a> event is triggered, the QueryDuration component becomes hidden.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryDuration.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new QueryDuration component.\nBinds handlers on the <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a> and <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#queryerror\">QueryEvents.queryError</a> events.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview",
		"notSupportedIn": "",
		"comment": "<p>This component renders previews of the top query results matching the currently focused query suggestion in the search box.\nAs such, this component only works when the search interface can\n<a href=\"https://docs.coveo.com/en/340/#providing-coveo-machine-learning-query-suggestions\">provide Coveo Machine Learning query suggestions</a>.</p>\n<p>This component should be initialized on a <code>div</code> which can be nested anywhere inside the root element of your search interface.</p>\n<p>See <a href=\"https://docs.coveo.com/en/340/#rendering-query-suggestion-result-previews\">Rendering Query Suggestion Result Previews</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.options.executeQueryDelay",
		"notSupportedIn": "",
		"comment": "<p> The amount of focus time (in milliseconds) required on a query suggestion before requesting a preview of its top results.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "200"
		}
	},
	{
		"name": "QuerySuggestPreview.options.numberOfPreviewResults",
		"notSupportedIn": "",
		"comment": "<p>The maximum number of query results to render in the preview.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1",
			"max": "6",
			"defaultValue": "4"
		}
	},
	{
		"name": "QuerySuggestPreview.options.resultTemplate",
		"notSupportedIn": "",
		"comment": "<p>The HTML <code>id</code> attribute value, or CSS selector of the previously registered\n<a href=\"https://docs.coveo.com/413/\">result template</a> to apply when rendering the\nquery suggestion result previews.\n<strong>Examples</strong></p>\n<ul>\n<li>Specifying the <code>id</code> attribute of the target result template:<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoQuerySuggestPreview\"</span> <span class=\"hljs-attr\">data-result-template-id</span>=<span class=\"hljs-string\">\"myTemplateId\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n</li>\n<li>Specifying an equivalent CSS selector:<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoQuerySuggestPreview\"</span> <span class=\"hljs-attr\">data-result-template-selector</span>=<span class=\"hljs-string\">\"#myTemplateId\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n</li>\n</ul>\n<p>If you specify no previously registered template through this option, the component uses its default template.</p>\n",
		"type": "Template",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySuggestPreview.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new QuerySuggestPreview component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary",
		"notSupportedIn": "",
		"comment": "<p>The QuerySummary component can display information about the currently displayed range of results (e.g., &quot;Results\n1-10 of 123&quot;).\nWhen the query does not match any items, the QuerySummary component can instead display information to the end users.</p>\n<p>The information displayed to the end user is customizable through this component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.options",
		"notSupportedIn": "",
		"comment": "<p>Options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummary.options.enableCancelLastAction",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display the <code>Cancel last action</code> link when there are no search results.\nWhen clicked, the link restores the previous query that contained results.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "QuerySummary.options.enableNoResultsFoundMessage",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display the <a href=\"https://coveo.github.io/search-ui/components/querysummary.html#options.noresultsfoundmessage\">QuerySummary.options.noResultsFoundMessage</a> message when there are no search results.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "QuerySummary.options.enableSearchTips",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display search tips when there are no search results.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "QuerySummary.options.noResultsFoundMessage",
		"notSupportedIn": "",
		"comment": "<p>Specifies a custom message to display when there are no search results.\nYou can refer to the query the end user has entered using the <code>${query}</code> query tag.</p>\n<p><strong>Example</strong></p>\n<blockquote>\n<p>For the <code>noResultFoundMessage</code> option, you enter <code>There were no results found for &quot;${query}&quot;</code>.\nYour end user searches for <code>query without results</code>, which does not return any result.\nOn your page, they see this message: <code>There were no results found for &quot;query without results&quot;</code>.</p>\n</blockquote>\n<p>Default value is <code>No results for ${query}</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableNoResultsFoundMessage"
		}
	},
	{
		"name": "QuerySummary.options.onlyDisplaySearchTips",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to hide the number of returned results.\nWhen this option is set to true, the number of returned results will be hidden from the page, meaning that your end users will not know how many results were returned for their query.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "QuerySummary.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new QuerySummary component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox",
		"notSupportedIn": "",
		"comment": "<p>The <code>Querybox</code> component renders an input which the end user can interact with to enter and submit queries.\nWhen the end user submits a search request, the <code>Querybox</code> component triggers a query and logs the corresponding\nusage analytics data.</p>\n<p>For technical reasons, it is necessary to instantiate this component on a <code>div</code> element rather than on an <code>input</code>\nelement.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\"><code>Searchbox</code></a> component, which can automatically instantiate a <code>Querybox</code> along with an\noptional <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\"><code>SearchButton</code></a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the Querybox.</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Querybox.options.enableLowercaseOperators",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\"><code>enableQuerySyntax</code></a> option is <code>true</code>, specifies whether to\ninterpret the <code>AND</code>, <code>NOT</code>, <code>OR</code>, and <code>NEAR</code> keywords in the <code>Querybox</code> as query operators in the query, even if\nthe end user types those keywords in lowercase.\nThis option applies to all query operators (see\n<a href=\"https://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>).</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>If this option and the <code>enableQuerySyntax</code> option are both <code>true</code>, the Coveo Platform interprets the <code>near</code>\nkeyword in a query such as <code>service center near me</code> as the <code>NEAR</code> query operator (not as a query term).</p>\n</blockquote>\n<blockquote>\n<p>Otherwise, if the <code>enableQuerySyntax</code> option is <code>true</code> and this option is <code>false</code>, the end user has to type the\n<code>NEAR</code> keyword in uppercase for the Coveo Platform to interpret it as a query operator.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableQuerySyntax",
			"defaultValue": "false"
		}
	},
	{
		"name": "Querybox.options.enablePartialMatch",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>Whether to convert a basic expression containing at least a certain number of keywords (see the\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchkeywords\"><code>partialMatchKeywords</code></a> option) to a <em>partial match expression</em>, so\nthat items containing at least a certain number of those keywords (see the\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchthreshold\"><code>partialMatchThreshold</code></a> option) will match the expression.\n<strong>Notes:</strong></p>\n<blockquote>\n<ul>\n<li>Only the basic expression of the query (see <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#q\"><code>q</code></a>) can be converted to a partial match expression.</li>\n<li>When the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\"><code>enableQuerySyntax</code></a> option is set to <code>true</code>, this\nfeature has no effect on a basic expression containing query syntax (field expressions, operators, etc.).</li>\n</ul>\n</blockquote>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>With the following markup configuration, if a basic expression contains at least 4 keywords, items containing\nat least 75% of those keywords (round up) will match the query.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoQuerybox'</span> <span class=\"hljs-attr\">data-enable-partial-match</span>=<span class=\"hljs-string\">'true'</span> <span class=\"hljs-attr\">data-partial-match-keywords</span>=<span class=\"hljs-string\">'4'</span> <span class=\"hljs-attr\">data-partial-match-threshold</span>=<span class=\"hljs-string\">'75%'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>For instance, if the basic expression is <code>Coveo custom component configuration help</code>, items containing\nall 5 of those keywords, or 4 of them (75% of 5 rounded up) will match the query.</p>\n</blockquote>\n<p>Default value is <code>false</code>, which implies that an item must contain all of the basic expression keywords to match\nthe query.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Querybox.options.enableQuerySyntax",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to interpret special query syntax (e.g., <code>@objecttype=message</code>) when the end user types\na query in the <code>Querybox</code> (see\n<a href=\"https://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>). Setting this\noption to <code>true</code> also causes the <code>Querybox</code> to highlight any query syntax.\nRegardless of the value of this option, the Coveo Cloud REST Search API always interprets expressions surrounded\nby double quotes (<code>&quot;</code>) as exact phrase match requests.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablelowercaseoperators\"><code>enableLowercaseOperators</code></a>.</p>\n<p><strong>Notes:</strong></p>\n<blockquote>\n<ul>\n<li>End user preferences can override the value you specify for this option.</li>\n</ul>\n<p>If the end user selects a value other than <strong>Automatic</strong> for the <strong>Enable query syntax</strong> setting (see\nthe <a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html#options.enablequerysyntax\"><code>enableQuerySyntax</code></a> option of the\n<a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html\"><code>ResultsPreferences</code></a> component), the end user preference takes precedence over this\noption.</p>\n<ul>\n<li>On-premises versions of the Coveo Search API require this option to be set to <code>true</code> in order to interpret\nexpressions surrounded by double quotes (<code>&quot;</code>) as exact phrase match requests.</li>\n</ul>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Querybox.options.enableQuestionMarks",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablewildcards\"><code>enableWildcards</code></a> is <code>true</code>, specifies whether to expand basic\nexpression keywords containing question mark characters (<code>?</code>) to the possible matching keywords in order to\nbroaden the query (see\n<a href=\"https://docs.coveo.com/en/1580/\">Using Wildcards in Queries</a>).\n<strong>Note:</strong></p>\n<blockquote>\n<p>If you are using an on-premises version of the Coveo Search API, you also need to set the\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\"><code>enableQuerySyntax</code></a> option to <code>true</code> in order to be able to set\n<code>enableQuestionMarks</code> to <code>true</code>.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableWildcards",
			"defaultValue": "false"
		}
	},
	{
		"name": "Querybox.options.enableSearchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Whether to enable the search-as-you-type feature.\nDefault value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Querybox.options.enableWildcards",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to expand basic expression keywords containing wildcards characters (<code>*</code>) to the possible\nmatching keywords in order to broaden the query (see\n<a href=\"https://docs.coveo.com/en/1580/\">Using Wildcards in Queries</a>).\nSee also <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequestionmarks\"><code>enableQuestionMarks</code></a>.</p>\n<p> <strong>Note:</strong></p>\n<blockquote>\n<p>If you are using an on-premises version of the Coveo Search API, you need to set the\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\"><code>enableQuerySyntax</code></a> option to <code>true</code> to be able to set\n<code>enableWildcards</code> to <code>true</code>.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Querybox.options.partialMatchKeywords",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>The minimum number of keywords that need to be present in a basic expression to convert it to a partial match\nexpression.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchthreshold\"><code>partialMatchThreshold</code></a> option.</p>\n<p><strong>Notes:</strong></p>\n<blockquote>\n<ul>\n<li>This option has no meaning unless the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablepartialmatch\"><code>enablePartialMatch</code></a>\noption is set to <code>true</code>.</li>\n<li>Repeated keywords in a basic expression count as a single keyword.</li>\n<li>Thesaurus expansions in a basic expression count towards the <code>partialMatchKeywords</code> count.</li>\n<li>Stemming expansions <strong>do not</strong> count towards the <code>partialMatchKeywords</code> count.</li>\n</ul>\n</blockquote>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>If the <code>partialMatchKeywords</code> value is <code>7</code>, the basic expression will have to contain at least 7 keywords\nto be converted to a partial match expression.</p>\n</blockquote>\n<p>Default value is <code>5</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enablePartialMatch",
			"min": "1",
			"defaultValue": "5"
		}
	},
	{
		"name": "Querybox.options.partialMatchThreshold",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>An absolute or relative value indicating the minimum number (rounded up) of partial match expression keywords an\nitem must contain to match the expression.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchkeywords\"><code>partialMatchKeywords</code></a> option.</p>\n<p><strong>Notes:</strong></p>\n<blockquote>\n<ul>\n<li>This option has no meaning unless the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablepartialmatch\"><code>enablePartialMatch</code></a>\noption is set to <code>true</code>.</li>\n<li>A keyword and its stemming expansions count as a single keyword when evaluating whether an item meets the\n<code>partialMatchThreshold</code>.</li>\n</ul>\n</blockquote>\n<p><strong>Examples:</strong></p>\n<blockquote>\n<p>If the <code>partialMatchThreshold</code> value is <code>50%</code> and the partial match expression contains exactly 9 keywords,\nitems will have to contain at least 5 of those keywords to match the query (50% of 9, rounded up).</p>\n</blockquote>\n<blockquote>\n<p>With the same configuration, if the partial match expression contains exactly 12 keywords, items will have to\ncontain at least 6 of those keywords to match the query (50% of 12).</p>\n</blockquote>\n<blockquote>\n<p>If the <code>partialMatchThreshold</code> value is <code>2</code>, items will always have to contain at least 2 of the partial match\nexpression keywords to match the query, no matter how many keywords the partial match expression actually\ncontains.</p>\n</blockquote>\n<p>Default value is <code>50%</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enablePartialMatch",
			"defaultValue": "50%"
		}
	},
	{
		"name": "Querybox.options.searchAsYouTypeDelay",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablesearchasyoutype\"><code>enableSearchAsYouType</code></a> option is <code>true</code>, specifies how\nlong to wait (in milliseconds) between each key press before triggering a new query.\nDefault value is <code>50</code>. Minimum value is <code>0</code></p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "50"
		}
	},
	{
		"name": "Querybox.options.triggerQueryOnClear",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to trigger a query when clearing the <code>Querybox</code>.\nDefault value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Querybox.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>Querybox component</code>. Creates a new <code>Coveo.Magicbox</code> instance and wraps the Magicbox methods\n(<code>onblur</code>, <code>onsubmit</code> etc.). Binds event on <code>buildingQuery</code> and before redirection (for standalone box).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview",
		"notSupportedIn": "",
		"comment": "<p>The <code>Quickview</code> component renders a button/link which the end user can click to open a modal box containing certain\ninformation about a result. Most of the time, this component references a\n<a href=\"https://coveo.github.io/search-ui/components/quickviewdocument.html\"><code>QuickviewDocument</code></a> in its <a href=\"https://coveo.github.io/search-ui/components/quickview.html#options.contenttemplate\"><code>contentTemplate</code></a>.\n<strong>Notes:</strong></p>\n<blockquote>\n<ul>\n<li><code>Quickview</code> is not meant to replace a <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a> to access an item; it has certain limitations (e.g., custom styles and embedded\nimages/links may not work as expected in a <code>Quickview</code>).</li>\n<li>You can change the appearance of the <code>Quickview</code> link/button by adding elements in the inner HTML of its <code>div</code>.</li>\n<li>You can change the content of the <code>Quickview</code> modal box link by specifying a template <code>id</code> or CSS selector (see\nthe <a href=\"https://coveo.github.io/search-ui/components/quickview.html#options.contenttemplate\"><code>contentTemplate</code></a> option).</li>\n<li>When using Coveo for Salesforce 3.16, in an environment compliant with LockerService, ensure you use <code>CoveoSalesforceQuickview</code> (see <a href=\"https://docs.coveo.com/en/1234/\">Changing the Default Quick View in Coveo for Salesforce</a>).</li>\n</ul>\n</blockquote>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-html\">[ ... ]\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'result-template'</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text/underscore'</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'myContentTemplateId'</span>&gt;</span><span class=\"javascript\">\n  &lt;div&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>This content will be displayed when then end user opens the quickview modal box. It could also include other Coveo component, and use core helpers.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n    &lt;table <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"CoveoFieldTable\"</span>&gt;\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@liboardshorttitle\"</span> <span class=\"hljs-attr\">data-caption</span>=<span class=\"hljs-string\">\"Board\"</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@licategoryshorttitle\"</span> <span class=\"hljs-attr\">data-caption</span>=<span class=\"hljs-string\">\"Category\"</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@sysauthor\"</span> <span class=\"hljs-attr\">data-caption</span>=<span class=\"hljs-string\">\"Author\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n[ ... ]\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultList'</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'result-template'</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text/underscore'</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'myResultTemplateId'</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\">\n\n  [ ... ]\n\n    <span class=\"hljs-comment\">&lt;!-- The `myContentTemplateId` template applies when displaying content in the quickview modal box. --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoQuickview'</span> <span class=\"hljs-attr\">data-template-id</span>=<span class=\"hljs-string\">'myContentTemplateId'</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- This changes the appearance of the Quickview button itself in the results --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>Click here for a quickview<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  </span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n  [ ... ]\n\n<span class=\"hljs-comment\">&lt;!-- Note that simply including `&lt;div class='CoveoQuickview'&gt;&lt;/div&gt;` in the markup will be enough most of the time, since the component includes a default template and a default button appearance. --&gt;</span>\n</code></pre>\n<p>This component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.options.alwaysShow",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to always show the <code>Quickview</code> button/link, even when the index body of an item is empty.\nIn such cases, the <a href=\"https://coveo.github.io/search-ui/components/quickview.html#options.contenttemplate\"><code>contentTemplate</code></a> defines what appears in the\n<code>Quickview</code> modal box. Consequently, if there is no quickview for the item, you <em>MUST</em> specify a custom\n<code>contentTemplate</code>, otherwise the component will throw an error when opened.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Quickview.options.contentTemplate",
		"notSupportedIn": "",
		"comment": "<p>Specifies a custom template to use when displaying content in the <code>Quickview</code> modal box.\n<strong>Note:</strong></p>\n<blockquote>\n<p>You can use <a href=\"https://coveo.github.io/search-ui/interfaces/icorehelpers.html\"><code>CoreHelpers</code></a> methods in your content template.</p>\n</blockquote>\n<p>You can specify a previously registered template to use either by referring to its HTML <code>id</code> attribute or to a\nCSS selector (see <a href=\"https://coveo.github.io/search-ui/classes/templatecache.html\"><code>TemplateCache</code></a>).</p>\n<p><strong>Example:</strong></p>\n<ul>\n<li>Specifying a previously registered template by referring to its HTML <code>id</code> attribute:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoQuickview\"</span> <span class=\"hljs-attr\">data-template-id</span>=<span class=\"hljs-string\">\"myContentTemplateId\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<ul>\n<li>Specifying a previously registered template by referring to a CSS selector:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoQuickview'</span> <span class=\"hljs-attr\">data-template-selector</span>=<span class=\"hljs-string\">\".myContentTemplateSelector\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>If you do not specify a custom content template, the component uses its default template.</p>\n",
		"type": "Template",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.options.enableLoadingAnimation",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to enable the loading animation.\nSee also [<code>loadingAnimation</code>]{Quickview.options.loadingAnimation}.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Quickview.options.loadingAnimation",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/quickview.html#options.enableloadinganimation\"><code>enableLoadingAnimation</code></a> is <code>true</code>, specifies a custom\nanimation to display while the content of the quickview modal window is loading. You can either specify the CSS\nselector of the HTML element you wish to display, or the <code>id</code> of a previously registered template (see\n<a href=\"https://coveo.github.io/search-ui/classes/templatecache.html\"><code>TemplateCache</code></a>).\nSee <a href=\"https://docs.coveo.com/en/296/#customizing-the-quickview-loading-animation\">Customizing the Quickview Loading Animation</a>.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>Specifying the CSS selector of the HTML element to display:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoQuickview\"</span> <span class=\"hljs-attr\">data-loading-animation-selector</span>=<span class=\"hljs-string\">\".my-loading-animation\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<ul>\n<li>Specifying the <code>id</code> of a previously registered template:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoQuickview\"</span> <span class=\"hljs-attr\">data-loading-animation-template-id</span>=<span class=\"hljs-string\">\"my-loading-animation-template\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>By default, the loading animation is a Coveo animation, which you can customize with CSS (see\n<a href=\"https://docs.coveo.com/en/296/#customizing-the-default-search-page-animation\">Customizing the Default Loading Animation</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.options.showDate",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display the item date in the <code>Quickview</code> modal box header.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Quickview.options.title",
		"notSupportedIn": "",
		"comment": "<p>Specifies the title that should appear in the <code>Quickview</code> modal box header.\nDefault value is undefined, which is equivalent to the empty string.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Quickview.options.tooltipPlacement",
		"notSupportedIn": "",
		"comment": "<p>Specifies the emplacement of the tooltip in relation to the <code>Quickview</code> HTML element.\n<strong>Example:</strong></p>\n<blockquote>\n<p>Setting this option to <code>top-start</code> will make the tooltip appear on top of the <code>Quickview</code> button, aligned to the left.</p>\n</blockquote>\n<p>Default value is <code>bottom</code>.</p>\n",
		"type": "",
		"constrainedValues": [
			"auto,auto-start,auto-end,top-start,top,top-end,right-start,right,right-end,bottom-end,bottom,bottom-start,left-end,left,left-start"
		],
		"miscAttributes": {
			"defaultValue": "bottom"
		}
	},
	{
		"name": "Quickview.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>Quickview</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument",
		"notSupportedIn": "",
		"comment": "<p>The <code>QuickviewDocument</code> component normally exists within a <a href=\"https://coveo.github.io/search-ui/components/quickview.html\"><code>Quickview</code></a> component. The sole purpose\nof this component is to add an <code>&lt;iframe&gt;</code> which loads the correct HTML version of the current item.\nThe default <a href=\"https://coveo.github.io/search-ui/components/quickview.html#options.contenttemplate\"><code>contentTemplate</code></a> of the\n<code>Quickview</code> component includes the <code>QuickviewDocument</code> component.</p>\n<p>This component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewDocument.options.maximumDocumentSize",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum preview size that the index should return.\nDefault value is <code>0</code>, and the index returns the entire preview. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "0"
		}
	},
	{
		"name": "QuickviewDocument.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>QuickviewDocument</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation",
		"notSupportedIn": "",
		"comment": "<p>The Recommendation component is a <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> that displays recommendations typically based on user\nhistory.\nThis component usually listens to the main SearchInterface. When the main SearchInterface generates a query, the\nRecommendation component generates another query to get the recommendations at the same time.</p>\n<p>To get history-based recommendations, you will likely want to include the <code>pageview</code> script in your page (see\n<a href=\"https://github.com/coveo/coveo.analytics.js\">coveo.analytics.js</a>). However, including this script is not mandatory.\nFor instance, you could use the Recommendation component without the Coveo Machine Learning service to create a\nsimple &quot;recommended people&quot; interface.</p>\n<p>It is possible to include this component inside another SearchInterface, but it is also possible to instantiate it as\na &quot;standalone&quot; search interface, without even instantiating a main SearchInterface component. In any case, a\nRecommendation component always acts as a full-fledged search interface. Therefore, you can include any component\ninside the Recommendation component (Searchbox, Facet, Sort, etc.), just as you would inside the main SearchInterface\ncomponent.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation.getComponents",
		"notSupportedIn": "",
		"comment": "<p>Gets all the components of a given type.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation.responsiveComponents",
		"notSupportedIn": "",
		"comment": "<p>Allows to get and set the different breakpoints for mobile and tablet devices.\nThis is useful, amongst other, for <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a>, <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> and <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a></p>\n",
		"type": "ResponsiveComponents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the recommendation component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation.options.dropdownHeaderLabel",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/recommendation.html#options.enableresponsivemode\">Recommendation.options.enableResponsiveMode</a> is <code>true</code> for all Recommendation components, specifies the\nlabel of the dropdown button that allows to display the Recommendation components when in responsive mode.\nIf more than one Recommendation component in the search interface specifies a value for this option, then the\nframework uses the first occurrence of the option.</p>\n<p>Default value is <code>Recommendations</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation.options.enableResponsiveMode",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to enable <em>responsive mode</em> for Recommendation components. Setting this options to <code>false</code> on\nany Recommendation component in a search interface disables responsive mode for all other Recommendation\ncomponents in the search interface.\nResponsive mode displays all Recommendation components under a single dropdown button whenever the width of the\nHTML element which the search interface is bound to reaches or falls behind a certain threshold (see\n<a href=\"https://coveo.github.io/search-ui/components/recommendation.html#options.responsivebreakpoint\">Recommendation.options.responsiveBreakpoint</a>).</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/recommendation.html#options.dropdownheaderlabel\">Recommendation.options.dropdownHeaderLabel</a>.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Recommendation.options.hideIfNoResults",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to hide the Recommendations component if no result or recommendation is available.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Recommendation.options.id",
		"notSupportedIn": "",
		"comment": "<p>Specifies the ID of the interface.\nThe usage analytics use the interface ID to know which recommendation interface was selected.\nDefault value is <code>Recommendation</code> for the first one and <code>Recommendation_{number}</code>, where {number} depends on the\nnumber of Recommendation interfaces with default IDs in the page for the others.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation.options.mainSearchInterface",
		"notSupportedIn": "",
		"comment": "<p>Specifies the main <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> to listen to.</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation.options.optionsToUse",
		"notSupportedIn": "",
		"comment": "<p>Specifies which options from the main <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> to use in the triggered query.\nPossible values are:</p>\n<ul>\n<li><code>expression</code></li>\n<li><code>advancedExpression</code></li>\n<li><code>constantExpression</code></li>\n<li><code>disjunctionExpression</code></li>\n</ul>\n<p><strong>Example:</strong></p>\n<p>Adding the expression (<code>q</code>) and the advanced expression (<code>aq</code>) parts of the main query in the triggered query:</p>\n<p><code>data-options-to-use=&quot;expression,advancedExpression&quot;</code></p>\n<p>Default value is <code>expression</code>.</p>\n",
		"type": "",
		"constrainedValues": [
			"expression",
			"expression,advancedExpression",
			"expression,advancedExpression,constantExpression",
			"expression,advancedExpression,constantExpression,disjunctionExpression"
		],
		"miscAttributes": {
			"defaultValue": "[expression]"
		}
	},
	{
		"name": "Recommendation.options.responsiveBreakpoint",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/recommendation.html#options.enableresponsivemode\">Recommendation.options.enableResponsiveMode</a> is <code>true</code> for all Recommendation components, specifies the\nwidth threshold (in pixels) of the search interface at which Recommendation components go in responsive mode.\nRecommendation components go in responsive mode when the width of the search interface is equal to or lower than\nthis value.</p>\n<p>The <code>search interface</code> corresponds to the HTML element with the class <code>CoveoSearchInterface</code>.</p>\n<p>If more than one Recommendation component in the search interface specifies a value for this option, then the\nframework uses the last occurrence of the option.</p>\n<p>Default value is <code>1000</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "1000"
		}
	},
	{
		"name": "Recommendation.options.sendActionsHistory",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to send the actions history along with the triggered query.\nSetting this option to <code>false</code> makes it impossible for this component to get Coveo Machine Learning\nrecommendations.</p>\n<p>However, setting this option to <code>false</code> can be useful to display side results in a search page.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Recommendation.options.userContext",
		"notSupportedIn": "",
		"comment": "<p>Specifies the user context to send to Coveo usage analytics.\nThe component sends this information with the query alongside the user history to get the recommendations.</p>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Recommendation.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Recommendation component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu",
		"notSupportedIn": "",
		"comment": "<p>The <em>ResultActionsMenu</em> component adds a floating result action menu, meant to be used inside result templates (see <a href=\"https://docs.coveo.com/en/413/javascript-search-framework/result-templates\">Result Templates</a>).\nIt is designed to contain other components that can execute actions related to the result,\ntypically the <a href=\"https://coveo.github.io/search-ui/components/quickview.html\">Quickview</a> and AttachToCase components, available in the Coveo for Salesforce and Coveo for Dynamics integrations.</p>\n<pre><code class=\"lang-html\">&lt;script type=\"text/html\" class=\"result-template\" [...]\n  &lt;div class=\"coveo-result-frame\"&gt;\n    &lt;div class=\"CoveoResultActionsMenu\"&gt;\n      &lt;div class=\"CoveoQuickview\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  [...]\n&lt;/script&gt;\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.menuItems",
		"notSupportedIn": "",
		"comment": "<p>A list containing menu items for this menu.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.parentResult",
		"notSupportedIn": "",
		"comment": "<p>The rendered result that contains this menu.</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultActionsMenu.options.openOnMouseOver",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the menu should open when the user hovers over the result.\nWhen set to false, the menu opens only when clicking on the result.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "ResultActionsMenu.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>ResultActionsMenu</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>The <code>ResultAttachments</code> component renders attachments in a result set, for example when displaying emails. This\ncomponent is usable inside a result template when there is an active <a href=\"https://coveo.github.io/search-ui/components/folding.html\"><code>Folding</code></a> component in the\npage.\nThis component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.options.maximumAttachmentLevel",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum nesting depth. Beyond this depth, the component stops rendering sub-attachments.\nDefault value is <code>5</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "5"
		}
	},
	{
		"name": "ResultAttachments.options.resultTemplate",
		"notSupportedIn": "",
		"comment": "<p>Specifies the template to use to render each attachment for a top result.\nYou can specify a previously registered template to use either by referring to its HTML <code>id</code> attribute or to a\nCSS selector (see <a href=\"https://coveo.github.io/search-ui/classes/templatecache.html\">TemplateCache</a>).</p>\n<p><strong>Examples:</strong></p>\n<p>Specifying a previously registered template by referring to its HTML <code>id</code> attribute:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultAttachments\"</span> <span class=\"hljs-attr\">data-result-template-id</span>=<span class=\"hljs-string\">\"Foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Specifying a previously registered template by referring to a CSS selector:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultAttachments'</span> <span class=\"hljs-attr\">data-result-template-selector</span>=<span class=\"hljs-string\">\".Foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>If you do not specify a custom folding template, the component uses the default result attachment template.</p>\n",
		"type": "Template",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.options.subResultTemplate",
		"notSupportedIn": "",
		"comment": "<p>Specifies the template to use to render sub-attachments, which are attachments within attachments, for example\nwhen multiple files are embedded within a <code>.zip</code> attachment.\nSub-attachments can themselves contain sub-attachments, and so on up to a certain level (see the\n<a href=\"https://coveo.github.io/search-ui/components/resultattachments.html#options.maximumattachmentlevel\"><code>maximumAttachmentLevel</code></a> option).</p>\n<p>You can specify a previously registered template to use either by referring to its HTML <code>id</code> attribute or to a\nCSS selector (see <a href=\"https://coveo.github.io/search-ui/classes/templatecache.html\">TemplateCache</a>).</p>\n<p><strong>Example:</strong></p>\n<p>Specifying a previously registered template by referring to its HTML <code>id</code> attribute:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultAttachments\"</span> <span class=\"hljs-attr\">data-sub-result-template-id</span>=<span class=\"hljs-string\">\"Foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Specifying a previously registered template by referring to a CSS selector:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultAttachments\"</span> <span class=\"hljs-attr\">data-sub-result-template-selector</span>=<span class=\"hljs-string\">\".Foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>By default, this option uses the same template you specify for the\n<a href=\"https://coveo.github.io/search-ui/components/resultattachments.html#options.resulttemplate\"><code>resultTemplate</code></a> option.</p>\n",
		"type": "Template",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultAttachments.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>ResultAttachments</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding",
		"notSupportedIn": "",
		"comment": "<p>The <code>ResultFolding</code> component renders folded result sets. It is usable inside a result template when there is an\nactive <a href=\"https://coveo.github.io/search-ui/components/folding.html\"><code>Folding</code></a> component in the page. This component takes care of rendering the parent result and\nits child results in a coherent manner.\nThis component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n<p>See <a href=\"https://docs.coveo.com/en/428/\">Folding Results</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.options.expandedCaption",
		"notSupportedIn": "",
		"comment": "<p>Specifies the caption to display at the top of the child results when the folding result set is expanded.\nDefault value is <code>undefined</code>, which displays no caption.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.options.lessCaption",
		"notSupportedIn": "",
		"comment": "<p>Specifies the caption to display on the link to shrink the loaded folding result set back to only the top result.\nDefault value is the localized string for <code>ShowLess</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.options.moreCaption",
		"notSupportedIn": "",
		"comment": "<p>Specifies the caption to display on the link to expand / show child results.\nDefault value is the localized string for <code>ShowMore</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.options.normalCaption",
		"notSupportedIn": "",
		"comment": "<p>Specifies the caption to display at the top of the child results when the folding result set is not expanded.\nDefault value is <code>undefined</code>, which displays no caption.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.options.oneResultCaption",
		"notSupportedIn": "",
		"comment": "<p>Specifies the caption to display when there is only one result in a folding result set.\nDefault value is the localized string for <code>DisplayingTheOnlyMessage</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.options.resultTemplate",
		"notSupportedIn": "",
		"comment": "<p>Specifies the template to use to render each of the child results for a top result.\nYou can specify a previously registered template to use either by referring to its HTML <code>id</code> attribute or to a\nCSS selector (see <a href=\"https://coveo.github.io/search-ui/classes/templatecache.html\">TemplateCache</a>).</p>\n<p><strong>Example:</strong></p>\n<p>Specifying a previously registered template by referring to its HTML <code>id</code> attribute:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultFolding\"</span> <span class=\"hljs-attr\">data-result-template-id</span>=<span class=\"hljs-string\">\"Foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n</code></pre>\n<p>Specifying a previously registered template by referring to a CSS selector:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultFolding'</span> <span class=\"hljs-attr\">data-result-template-selector</span>=<span class=\"hljs-string\">\"#Foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n</code></pre>\n<p>If you do not specify a custom folding template, the component uses the default result folding template.</p>\n",
		"type": "Template",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultFolding.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new ResultFolding component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector",
		"notSupportedIn": "",
		"comment": "<p>The ResultLayoutSelector component allows the end user to switch between multiple <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> components that have\ndifferent <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.layout\">ResultList.options.layout</a> values.\nThis component automatically populates itself with buttons to switch between the ResultList components that have a\nvalid layout value (see the <a href=\"https://coveo.github.io/search-ui/globals.html#validlayout\">ValidLayout</a> type).</p>\n<p>See also the <a href=\"https://docs.coveo.com/en/360/\">Result Layouts</a> documentation.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.options",
		"notSupportedIn": "",
		"comment": "<p>The component options</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLayoutSelector.options.desktopLayouts",
		"notSupportedIn": "",
		"comment": "<p>Specifies the layouts that should be available when the search page is displayed in desktop mode.\nBy default, the desktop mode breakpoint is any screen size over 800 px.</p>\n<p>To change this default value, use the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.responsivemediumbreakpoint\">responsiveMediumBreakpoint</a> option.</p>\n<p> When the breakpoint is reached, layouts that are not specified becomes inactive and the linked result list will be disabled.</p>\n<p>The possible values for layouts are <code>list</code>, <code>card</code>, <code>table</code>.</p>\n<p>The default value is <code>list</code>, <code>card</code>, <code>table</code>.</p>\n",
		"type": "",
		"constrainedValues": [
			"list",
			"list,card",
			"list,card,table"
		],
		"miscAttributes": {
			"defaultValue": "[list, card, table]"
		}
	},
	{
		"name": "ResultLayoutSelector.options.mobileLayouts",
		"notSupportedIn": "",
		"comment": "<p>Specifies the layouts that should be available when the search page is displayed in mobile mode.\nBy default, the mobile mode breakpoint is at 480 px screen width.</p>\n<p>To change this default value, use the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.responsivesmallbreakpoint\">responsiveSmallBreakpoint</a> option.</p>\n<p>When the breakpoint is reached, layouts that are not specified becomes inactive and the linked result list will be disabled.</p>\n<p>The possible values for layouts are <code>list</code>, <code>card</code>, <code>table</code>.</p>\n<p>The default value is <code>card</code>, <code>table</code>.</p>\n",
		"type": "",
		"constrainedValues": [
			"list",
			"list,card",
			"list,card,table"
		],
		"miscAttributes": {
			"defaultValue": "[card, table]"
		}
	},
	{
		"name": "ResultLayoutSelector.options.tabletLayouts",
		"notSupportedIn": "",
		"comment": "<p>Specifies the layouts that should be available when the search page is displayed in tablet mode.\nBy default, the tablet mode breakpoint is at 800 px screen width.</p>\n<p>To change this default value, use the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.responsivemediumbreakpoint\">responsiveMediumBreakpoint</a> option.</p>\n<p> When the breakpoint is reached, layouts that are not specified becomes inactive and the linked result list will be disabled.</p>\n<p>The possible values for layouts are <code>list</code>, <code>card</code>, <code>table</code>.</p>\n<p>The default value is <code>list</code>, <code>card</code>, <code>table</code>.</p>\n",
		"type": "",
		"constrainedValues": [
			"list",
			"list,card",
			"list,card,table"
		],
		"miscAttributes": {
			"defaultValue": "[list, card, table]"
		}
	},
	{
		"name": "ResultLayoutSelector.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new ResultLayoutSelector component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink",
		"notSupportedIn": "",
		"comment": "<p>The <code>ResultLink</code> component automatically transform a search result title into a clickable link pointing to the\noriginal item.\nThis component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the ResultLink</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.options.alwaysOpenInNewWindow",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the component should open its link in a new window instead of opening it in the current\ncontext.\nIf this option is <code>true</code>, clicking the <code>ResultLink</code> calls the\n<a href=\"https://coveo.github.io/search-ui/components/resultlink.html#openlinkinnewwindow\"><code>openLinkInNewWindow</code></a> method instead of the\n<a href=\"https://coveo.github.io/search-ui/components/resultlink.html#openlink\"><code>openLink</code></a> method.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>If a search page contains a <a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html\"><code>ResultPreferences</code></a> component whose\n<a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html#options.enableopeninnewwindow\"><code>enableOpenInNewWindow</code></a> option is <code>true</code>, and the end\nuser checks the <b>Always open results in new window</b> box, <code>ResultLink</code> components in this page will always\nopen their links in a new window when the end user clicks them, no matter what the value of their\n<code>alwaysOpenInNewWindow</code> option is.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "ResultLink.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field to use to output the component <code>href</code> attribute value.\n<strong>Tip:</strong></p>\n<blockquote>\n<p>Instead of specifying a value for the <code>field</code> option, you can directly add an <code>href</code> attribute to the\n<code>ResultLink</code> HTML element. Then, you can use a custom script to generate the <code>href</code> value.</p>\n</blockquote>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>With the following markup, the <code>ResultLink</code> outputs its <code>href</code> value using the <code>@uri</code> field (rather than the\ndefault field):</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultLink\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@uri\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<ul>\n<li>In the following result template, the custom <code>getMyKBUri()</code> function provides the <code>href</code> value:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"KnowledgeArticle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/underscore\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"result-template\"</span>&gt;</span><span class=\"javascript\">\n  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">'CoveoIcon&gt;'</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  &lt;a <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"CoveoResultLink\"</span> href=<span class=\"hljs-string\">\"&lt;%= getMyKBUri(raw) %&gt;\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span>\n  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"CoveoExcerpt\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/resultlink.html#options.hreftemplate\"><code>hrefTemplate</code></a>, which can override this option.</p>\n<p>By default, the component uses the <code>@clickUri</code> field of the item to output the value of its <code>href</code> attribute.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.options.hrefTemplate",
		"notSupportedIn": "",
		"comment": "<p>Specifies a template literal from which to generate the <code>ResultLink</code> <code>href</code> attribute value (see\n<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a>).\nThis option overrides the <a href=\"https://coveo.github.io/search-ui/components/resultlink.html#options.field\"><code>field</code></a> option value.</p>\n<p>The template literal can reference any number of fields from the parent result. It can also reference global\nscope properties.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>The following markup generates an <code>href</code> value such as <code>http://uri.com?id=itemTitle</code>:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultLink'</span> <span class=\"hljs-attr\">data-href-template</span>=<span class=\"hljs-string\">'${clickUri}?id=${raw.title}'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<ul>\n<li>The following markup generates an <code>href</code> value such as <code>localhost/fooBar</code>:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultLink'</span> <span class=\"hljs-attr\">data-href-template</span>=<span class=\"hljs-string\">'${window.location.hostname}/{Foo.Bar}'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<p>Default value is <code>undefined</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.options.onClick",
		"notSupportedIn": "",
		"comment": "<p>Specifies an event handler function to execute when the user clicks the <code>ResultLink</code> component.\nThe handler function takes a JavaScript <a href=\"https://developer.mozilla.org/en/docs/Web/API/Event\"><code>Event</code></a> object and\nan <a href=\"https://coveo.github.io/search-ui/interfaces/iqueryresult.html\"><code>IQueryResult</code></a> as its parameters.</p>\n<p>Overriding the default behavior of the <code>onClick</code> event can allow you to execute specific code instead.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\n<a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call\">Passing Component Options in the init Call</a>),\nor before the <code>init</code> call, using the <code>options</code> top-level function (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call\">Passing Component Options Before the init Call</a>).</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// You can set the option in the 'init' call:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n  <span class=\"hljs-attr\">ResultLink</span> : {\n    <span class=\"hljs-attr\">onClick</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e, result</span>) </span>{\n      e.preventDefault();\n      <span class=\"hljs-comment\">// Custom code to execute with the item URI and title.</span>\n      openUriInASpecialTab(result.clickUri, result.title);\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// Or before the 'init' call, using the 'options' top-level function:</span>\n<span class=\"hljs-comment\">// Coveo.options(document.querySelector('#search'), {</span>\n<span class=\"hljs-comment\">//   ResultLink : {</span>\n<span class=\"hljs-comment\">//     onClick : function(e, result) {</span>\n<span class=\"hljs-comment\">//       e.preventDefault();</span>\n<span class=\"hljs-comment\">//       // Custom code to execute with the item URI and title.</span>\n<span class=\"hljs-comment\">//       openUriInASpecialTab(result.clickUri, result.title);</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">// });</span>\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.options.openInOutlook",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the component should try to open its link in Microsoft Outlook.\nSetting this option to <code>true</code> is normally useful for <code>ResultLink</code> instances related to Microsoft Exchange emails.</p>\n<p>If this option is <code>true</code>, clicking the <code>ResultLink</code> calls the\n<a href=\"https://coveo.github.io/search-ui/components/resultlink.html#openlinkinoutlook\"><code>openLinkInOutlook</code></a> method instead of the\n<a href=\"https://coveo.github.io/search-ui/components/resultlink.html#openlink\"><code>openLink</code></a> method.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "ResultLink.options.openQuickview",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the component should open its link in the <a href=\"https://coveo.github.io/search-ui/components/quickview.html\"><code>Quickview</code></a> component rather than\nloading through the original URL.\nDefault value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "ResultLink.options.titleTemplate",
		"notSupportedIn": "",
		"comment": "<p>Specifies a template literal from which to generate the <code>ResultLink</code> display title (see\n<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a>).\nThis option overrides the default <code>ResultLink</code> display title behavior.</p>\n<p>The template literal can reference any number of fields from the parent result. However, if the template literal\nreferences a key whose value is undefined in the parent result fields, the <code>ResultLink</code> title displays the\nname of this key instead.</p>\n<p>This option is ignored if the <code>ResultLink</code> innerHTML contains any value.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>The following markup generates a <code>ResultLink</code> display title such as <code>Case number: 123456</code> if both the\n<code>raw.objecttype</code> and <code>raw.objectnumber</code> keys are defined in the parent result fields:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultLink\"</span> <span class=\"hljs-attr\">data-title-template</span>=<span class=\"hljs-string\">\"${raw.objecttype} number: ${raw.objectnumber}\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<ul>\n<li>The following markup generates <code>${myField}</code> as a <code>ResultLink</code> display title if the <code>myField</code> key is undefined\nin the parent result fields:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultLink\"</span> <span class=\"hljs-attr\">data-title-template</span>=<span class=\"hljs-string\">\"${myField}\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<ul>\n<li>The following markup generates <code>Foobar</code> as a <code>ResultLink</code> display title, because the <code>ResultLink</code> innterHTML is\nnot empty:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultLink\"</span> <span class=\"hljs-attr\">data-title-template</span>=<span class=\"hljs-string\">\"${will} ${be} ${ignored}\"</span>&gt;</span>Foobar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<p>Default value is <code>undefined</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultLink.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>ResultLink</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList",
		"notSupportedIn": "",
		"comment": "<p>The <code>ResultList</code> component is responsible for displaying query results by applying one or several result templates\n(see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).\nIt is possible to include multiple <code>ResultList</code> components along with a single <code>ResultLayout</code>\ncomponent in a search page to provide different result layouts (see\n<a href=\"https://docs.coveo.com/en/360/\">Result Layouts</a>).</p>\n<p>This component supports infinite scrolling (see the\n<a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.enableinfinitescroll\"><code>enableInfiniteScroll</code></a> option).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the ResultList</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.options.autoSelectFieldsToInclude",
		"notSupportedIn": "",
		"comment": "<p>Whether the <code>ResultList</code> should scan its result templates to discover which fields it must request to\nbe able to render all results.\nSetting this option to <code>true</code> ensures that the Coveo Search API does not return fields that are unnecessary for\nthe UI to function.</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>Many interfaces created with the JavaScript Search Interface Editor explicitly set this option to <code>true</code>.</li>\n<li>You cannot set this option to <code>true</code> in the Coveo for Sitecore integration.</li>\n</ul>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "ResultList.options.enableInfiniteScroll",
		"notSupportedIn": "",
		"comment": "<p>Whether to automatically retrieve an additional page of results and append it to the\nresults that the <code>ResultList</code> is currently displaying when the user scrolls down to the bottom of the\n<a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.infinitescrollcontainer\"><code>infiniteScrollContainer</code></a>.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.infinitescrollpagesize\"><code>infiniteScrollPageSize</code></a> and\n<a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.enableinfinitescrollwaitinganimation\"><code>enableInfiniteScrollWaitingAnimation</code></a> options.</p>\n<p>It is important to specify the <code>infiniteScrollContainer</code> option manually if you want the scrolling element to be\nsomething else than the default <code>window</code> element. Otherwise, you might find yourself in a strange state where the\nframework rapidly triggers multiple successive query.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "ResultList.options.enableInfiniteScrollWaitingAnimation",
		"notSupportedIn": "",
		"comment": "<p>Whether to display the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.waitanimation\"><code>waitingAnimation</code></a> while fetching additional\nresults.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableInfiniteScroll",
			"defaultValue": "true"
		}
	},
	{
		"name": "ResultList.options.enableScrollToTop",
		"notSupportedIn": "",
		"comment": "<p>Whether to scroll back to the top of the page when the end-user interacts with a facet.\n<strong>Note:</strong> Setting this option to <code>false</code> has no effect on dynamic facets. To disable this behavior on a <code>DynamicFacet</code> component, you must set its own <a href=\"https://coveo.github.io/search-ui/components/dynamicfacet.html#options.enablescrolltotop\"><code>enableScrollToTop</code></a> option to <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableInfiniteScroll",
			"defaultValue": "true"
		}
	},
	{
		"name": "ResultList.options.fieldsToInclude",
		"notSupportedIn": "",
		"comment": "<p>A list of fields to include in the query results.\nIf you set the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.autoselectfieldstoinclude\"><code>autoSelectFieldsToInclude</code></a> option to\n<code>true</code>, the Coveo Search API returns the fields you specify for this option (if those fields are available) in\naddition to the fields which the <code>ResultList</code> automatically requests.</p>\n<p>Otherwise, the Coveo Search API only returns the fields you specify for this option (if those fields are\navailable), unless you leave this option undefined, in which case the Coveo Search API returns all available\nfields.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.options.infiniteScrollContainer",
		"notSupportedIn": "",
		"comment": "<p>The element that triggers fetching additional results when the end user scrolls down to its bottom.\nYou can change the container by specifying its selector (e.g.,\n<code>data-infinite-scroll-container-selector=&#39;#someCssSelector&#39;</code>).</p>\n<p>By default, the framework uses the first vertically scrollable parent element it finds, starting from the\n<code>ResultList</code> element itself. A vertically scrollable element is an element whose CSS <code>overflow-y</code> attribute is\n<code>scroll</code>.</p>\n<p>This implies that if the framework can find no scrollable parent, it uses the <code>window</code> itself as a scrollable\ncontainer.</p>\n<p>This heuristic is not perfect, for technical reasons. There are always some corner case CSS combination which the\nframework will not be able to correctly detect as &#39;scrollable&#39;.</p>\n<p>It is highly recommended that you manually set this option if you wish something else than the <code>window</code> to be the\nscrollable element.</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableInfiniteScroll"
		}
	},
	{
		"name": "ResultList.options.infiniteScrollPageSize",
		"notSupportedIn": "",
		"comment": "<p>The number of additional results to fetch when the user scrolls down to the bottom of the\n<a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.infinitescrollcontainer\"><code>infiniteScrollContainer</code></a>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableInfiniteScroll",
			"min": "1",
			"defaultValue": "10"
		}
	},
	{
		"name": "ResultList.options.layout",
		"notSupportedIn": "",
		"comment": "<p>Specifies the layout to use when displaying results in this <code>ResultList</code> (see\n<a href=\"https://docs.coveo.com/en/360/\">Result Layouts</a>). Specifying a value for this option automatically\npopulates a <code>ResultLayout</code> component with a switcher for the layout.\nFor example, if there are two <code>ResultList</code> components in the page, one with its <code>layout</code> set to <code>list</code> and the\nother with the same option set to <code>card</code>, then the <code>ResultLayout</code> component will render two buttons respectively\nentitled <strong>List</strong> and <strong>Card</strong>.</p>\n<p>See the <a href=\"https://coveo.github.io/search-ui/globals.html#validlayout\"><code>ValidLayout</code></a> type for the list of possible values.</p>\n",
		"type": "",
		"constrainedValues": [
			"list,card,table"
		],
		"miscAttributes": {
			"required": "true",
			"defaultValue": "list"
		}
	},
	{
		"name": "ResultList.options.resultsContainer",
		"notSupportedIn": "",
		"comment": "<p>The element inside which to insert the rendered result templates.\nPerforming a new query clears the content of this element.</p>\n<p>You can change the container by specifying its selector (e.g.,\n<code>data-result-container-selector=&#39;#someCssSelector&#39;</code>).</p>\n<p>If you specify no value for this option, a <code>div</code> element will be dynamically created and appended to the result\nlist. This element will then be used as a result container.</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.options.waitAnimation",
		"notSupportedIn": "",
		"comment": "<p>The type of animation to display while waiting for a query to return.\nThe possible values are:</p>\n<ul>\n<li><code>fade</code>: Fades out the current list of results while the query is executing.</li>\n<li><code>spinner</code>: Shows a spinning animation while the query is executing.</li>\n<li><code>none</code>: Use no animation during queries.</li>\n</ul>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.waitanimationcontainer\"><code>waitAnimationContainer</code></a> option.</p>\n",
		"type": "",
		"constrainedValues": [
			"fade,spinner,none"
		],
		"miscAttributes": {
			"defaultValue": "none"
		}
	},
	{
		"name": "ResultList.options.waitAnimationContainer",
		"notSupportedIn": "",
		"comment": "<p>The element inside which to display the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.waitanimation\"><code>waitAnimation</code></a>.\nYou can change this by specifying a CSS selector (e.g.,\n<code>data-wait-animation-container-selector=&#39;#someCssSelector&#39;</code>).</p>\n<p>Defaults to the value of the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.resultscontainer\"><code>resultsContainer</code></a> option.</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultList.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>ResultList</code> component. Binds various event related to queries (e.g., on querySuccess -&gt;\nrenderResults). Binds scroll event if the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.enableinfinitescroll\"><code>enableInfiniteScroll</code></a>\noption is <code>true</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p><strong>Note:</strong></p>\n<blockquote>\n<p>The Coveo Cloud V2 platform does not support collaborative rating. Therefore, this component is obsolete in Coveo Cloud V2.</p>\n</blockquote>\n<p>The <code>ResultRating</code> component renders a 5-star rating widget. Interactive rating is possible if\nthe <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enablecollaborativerating\"><code>enableCollaborativeRating</code></a> option of your\nsearch interface is <code>true</code>, and if collaborative rating is enabled on your Coveo index.</p>\n<p>This component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultRating.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>ResultRating</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>The ResultTagging component lists the current tag field values of its associated result and renders a control that\nallows the end user to add values to a tag field.\nThis component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>The ResultTagging component is not supported with Coveo Cloud V2. To implement the ResultTagging component in Coveo Cloud V1, contact <a href=\"https://support.coveo.com/s/\">Coveo Support</a>.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultTagging.options.autoCompleteTimer",
		"notSupportedIn": "",
		"comment": "<p>Specifies how much time (in milliseconds) it takes for the list of suggested items to disappear when it loses\nfocus.\nDefault value is <code>2000</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "2000"
		}
	},
	{
		"name": "ResultTagging.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the tag field that the component will use.\nSpecifying a value for this options is necessary for this component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "ResultTagging.options.suggestBoxSize",
		"notSupportedIn": "",
		"comment": "<p>Specifies the number of items to show in the list of suggested items.\nDefault value is <code>5</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "5"
		}
	},
	{
		"name": "ResultTagging.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new ResultTagging component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences",
		"notSupportedIn": "",
		"comment": "<p>The <code>ResultFiltersPreferences</code> component allows end users to create custom filters to apply to queries. These filters\nare saved to local storage.\nOnly advanced end users who understand the Coveo query syntax should use this feature (see\n<a href=\"https://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>).</p>\n<p>This component is normally accessible through the <a href=\"https://coveo.github.io/search-ui/components/settings.html\"><code>Settings</code></a> menu. Its usual location in the DOM is\ninside the <a href=\"https://coveo.github.io/search-ui/components/preferencespanel.html\"><code>PreferencesPanel</code></a> element.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html\">ResultsPreferences</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.options.filters",
		"notSupportedIn": "",
		"comment": "<p>Specifies the default filters which all end users can apply.\nEnd users cannot modify or delete these filters. These filters do not count as &quot;user-made&quot; filters, but rather as\n&quot;built-in&quot; filters created by the developer of the search page.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\n<a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call\">Passing Component Options in the init Call</a>),\nor before the <code>init</code> call, using the <code>options</code> top-level function (see\n<a href=\"https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call\">Passing Component Options Before the init Call</a>).</p>\n</blockquote>\n<p>Filters should follow this definition:</p>\n<p><code>filters : { [caption : string] : { expression : string, tab? : string[] } }</code>;</p>\n<p><strong>Example:</strong></p>\n<p>var myFilters = {\n  &quot;Only Google Drive Items&quot; : {\n    expression : &quot;@connectortype == &#39;GoogleDriveCrawler&#39;&quot;,\n    tab : [&quot;Tab1&quot;, &quot;Tab2&quot;]\n  },</p>\n<p>  &quot;Another Filter&quot; : {\n    expression : [ ... another expression ... ]\n  },</p>\n<p>  [ ... ]\n};</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// You can set the option in the 'init' call:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n  <span class=\"hljs-attr\">ResultsFiltersPreferences</span> : {\n    <span class=\"hljs-attr\">filters</span> : myFilters\n  }\n});\n\n<span class=\"hljs-comment\">// Or before the 'init' call, using the 'options' top-level function:</span>\n<span class=\"hljs-comment\">// Coveo.options(document.querySelector(\"#search\"), {</span>\n<span class=\"hljs-comment\">//   ResultsFiltersPreferences : {</span>\n       filters : myFilters\n     }\n<span class=\"hljs-comment\">// });</span>\n</code></pre>\n<p>Default value is <code>undefined</code>.</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsFiltersPreferences.options.includeInBreadcrumb",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display the active filter(s) in the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\"><code>Breadcrumb</code></a>.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "ResultsFiltersPreferences.options.showAdvancedFilters",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to show the <strong>Create</strong> button that allows the end user to create filters.\nIf you set this option to <code>false</code>, only the pre-populated\n<a href=\"https://coveo.github.io/search-ui/components/resultsfilterspreferences.html#options.filters\"><code>filters</code></a> are available to the end user.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "ResultsFiltersPreferences.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>ResultsFiltersPreferences</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage",
		"notSupportedIn": "",
		"comment": "<p>The ResultsPerPage component attaches itself to a <code>div</code> and allows the end user to choose how many results to\ndisplay per page.\n<strong>Note:</strong> Adding a ResultPerPage component to your page overrides the value of\n<a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.resultsperpage\">SearchInterface.options.resultsPerPage</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.resultsPerPage",
		"notSupportedIn": "",
		"comment": "<p>Returns the current number of results per page.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the ResultsPerPage</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.options.choicesDisplayed",
		"notSupportedIn": "",
		"comment": "<p>Specifies the possible values of number of results to display per page that the end user can select from.\nSee also <a href=\"https://coveo.github.io/search-ui/components/resultsperpage.html#options.initialchoice\">ResultsPerPage.options.initialChoice</a>.</p>\n<p>Default value is <code>[10, 25, 50, 100]</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.options.initialChoice",
		"notSupportedIn": "",
		"comment": "<p>Specifies the value to select by default for the number of results to display per page.\nDefault value is the first value of <a href=\"https://coveo.github.io/search-ui/components/resultsperpage.html#options.choicesdisplayed\">ResultsPerPage.options.choicesDisplayed</a>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPerPage.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new ResultsPerPage. The component renders itself on every query success.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences",
		"notSupportedIn": "",
		"comment": "<p>The ResultsPreferences component allows the end user to select preferences related to the search results. These\npreferences are then saved in the local storage of the end user.\nThis component is normally accessible through the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu. Its usual location in the DOM is inside the\n<a href=\"https://coveo.github.io/search-ui/components/preferencespanel.html\">PreferencesPanel</a> component.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/resultsfilterspreferences.html\">ResultsFiltersPreferences</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultsPreferences.options.enableOpenInNewWindow",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to make the option to open results in a new window available.\nDefault value is <code>true</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "ResultsPreferences.options.enableOpenInOutlook",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to make the option to open results in Microsoft Outlook available.\nDefault value is <code>false</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "ResultsPreferences.options.enableQuerySyntax",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to make the option to allow end users to turn query syntax on or off available.\nIf query syntax is enabled, the Coveo Platform tries to interpret special query syntax (e.g.,\n<code>@objecttype=message</code>) when the end user types a query in the <a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a> (see\n<a href=\"https://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>). Enabling query\nsyntax also causes the <code>Querybox</code> to highlight any query syntax.</p>\n<p>Selecting <strong>On</strong> for the <strong>Enable query syntax</strong> setting enables query syntax, whereas selecting <strong>Off</strong> disables\nit. Selecting <strong>Automatic</strong> uses the <code>Querybox</code> <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\"><code>enableQuerySyntax</code></a>\noption value (which is <code>false</code> by default).</p>\n<p>Default value is <code>false</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "ResultsPreferences.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new ResultsPreference component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts",
		"notSupportedIn": "",
		"comment": "<p>The Search Alerts component renders items in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu that allow the end user to follow queries\nand to manage search alerts. A user following a query receives email notifications when the query results change.\n<strong>Note:</strong></p>\n<blockquote>\n<p>It is necessary to meet certain requirements to be able to use this component (see\n<a href=\"https://docs.coveo.com/en/1932/\">Deploying Search Alerts on a Coveo JS Search Page</a>).</p>\n</blockquote>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/followitem.html\">FollowItem</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.message",
		"notSupportedIn": "",
		"comment": "<p>A reference to a <a href=\"https://coveo.github.io/search-ui/components/searchalertsmessage.html\">SearchAlertsMessage</a> component that the SearchAlerts component uses to display messages.</p>\n",
		"type": "SearchAlertsMessage",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the search alerts</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.options.enableFollowQuery",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to add the <strong>Follow Query</strong> item in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu to allow the end user to follow\nthe last query.\nClicking the <strong>Follow Query</strong> item calls the <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#followquery\">SearchAlerts.followQuery</a> method.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "SearchAlerts.options.enableManagePanel",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to add the <strong>Manage Alerts</strong> item in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu to allow the end user to manage\nsearch alerts.\nClicking the <strong>Manage Alerts</strong> item calls the <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#openpanel\">SearchAlerts.openPanel</a> method.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "SearchAlerts.options.enableMessage",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display info and error messages when performing search alerts actions.\nIf this options is <code>true</code>, the SearchAlerts constructor will automatically instantiate a\n<a href=\"https://coveo.github.io/search-ui/components/searchalertsmessage.html\">SearchAlertsMessage</a> component and set it to the <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#message\">SearchAlerts.message</a> attribute.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#options.messageclosedelay\">SearchAlerts.options.messageCloseDelay</a>.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "SearchAlerts.options.messageCloseDelay",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#options.enablemessage\">SearchAlerts.options.enableMessage</a> is <code>true</code>, specifies how long to display the search alert messages\n(in milliseconds).\nDefault value is <code>2000</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableMessage",
			"min": "0",
			"defaultValue": "2000"
		}
	},
	{
		"name": "SearchAlerts.options.modifiedDateField",
		"notSupportedIn": "",
		"comment": "<p>Specifies which field to use to represent the modification date when sending the\n<a href=\"https://coveo.github.io/search-ui/interfaces/isubscriptionqueryrequest.html\">ISubscriptionQueryRequest</a>.\nDefault value is <code>undefined</code>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlerts.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new SearchAlerts component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage",
		"notSupportedIn": "",
		"comment": "<p>The SearchAlertsMessage component allows the <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html\">SearchAlerts</a> component to display messages.\nYou should not include this component in your page. Instead, use a <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html\">SearchAlerts</a> component, and access the\n<a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#message\">SearchAlerts.message</a> attribute.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the SearchAlertsMessage component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchAlertsMessage.options.closeDelay",
		"notSupportedIn": "",
		"comment": "<p>Specifies how long to display the search alerts messages (in milliseconds).\nDefault value is <code>2000</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "2000"
		}
	},
	{
		"name": "SearchAlertsMessage.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new SearchAlertsMessage component</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton",
		"notSupportedIn": "",
		"comment": "<p>The SearchButton component renders a search icon that the end user can click to trigger a new query.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\">Searchbox</a> component, which can automatically instantiate a SearchButton component along with a\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html\">Querybox</a> component or an <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchButton.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new SearchButton. Binds a <code>click</code> event on the element. Adds a search icon on the element.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface",
		"notSupportedIn": "",
		"comment": "<p>The SearchInterface component is the root and main component of your Coveo search interface. You should place all\nother Coveo components inside the SearchInterface component.\nIt is also on the HTMLElement of the SearchInterface component that you call the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> function.</p>\n<p>It is advisable to specify a unique HTML <code>id</code> attribute for the SearchInterface component in order to be able to\nreference it easily.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n\n[ ... ]\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">'DOMContentLoaded'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n    [ ... ]\n    <span class=\"hljs-comment\">// The init function is called on the SearchInterface element, in this case, the body of the page.</span>\n    Coveo.init(<span class=\"hljs-built_in\">document</span>.body);\n\n    [ ... ]\n\n    });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n[ ... ]\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- Specifying a unique HTML id attribute for the SearchInterface component is good practice. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'search'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoSearchInterface'</span> [ <span class=\"hljs-attr\">...</span> <span class=\"hljs-attr\">other</span> <span class=\"hljs-attr\">options</span> <span class=\"hljs-attr\">...</span> ]&gt;</span>\n\n  [ ... ]\n\n  <span class=\"hljs-comment\">&lt;!-- You should place all other Coveo components here, inside the SearchInterface component. --&gt;</span>\n\n  [ ... ]\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.getComponents",
		"notSupportedIn": "",
		"comment": "<p>Gets all the components of a given type.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.responsiveComponents",
		"notSupportedIn": "",
		"comment": "<p>Allows to get and set the different breakpoints for mobile and tablet devices.\nThis is useful, amongst other, for <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a>, <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> and <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a></p>\n",
		"type": "ResponsiveComponents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the search interface</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.options.allowQueriesWithoutKeywords",
		"notSupportedIn": "",
		"comment": "<p>Specifies if the search interface should perform queries when no keywords are entered by the end user.\nWhen this option is set to true, the interface will initially only load with the search box, as long as you have a search box component in your interface.</p>\n<p>Once the user submits a query, the full search interface loads to display the results.</p>\n<p>When using the Coveo for Salesforce Free edition, this option is automatically set to false, and should not be changed.</p>\n<p>This option interacts closely with the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.autotriggerquery\">SearchInterface.options.autoTriggerQuery</a> option, as the automatic query is not triggered when there are no keywords.</p>\n<p>It also modifies the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#allowquerieswithoutkeywords\">IQuery.allowQueriesWithoutKeywords</a> query parameter.</p>\n<p>Default value is <code>true</code>, except in Coveo for Salesforce Free edition in which it is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "SearchInterface.options.autoTriggerQuery",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to trigger the first query automatically when the page finishes loading.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "SearchInterface.options.enableAutomaticResponsiveMode",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to enable automatic responsive mode (i.e., automatically placing <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> and <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a>\ncomponents in dropdown menus under the search box when the width of the SearchInterface HTML element reaches or\nfalls behind a certain pixel threshold).\nYou might want to set this option to <code>false</code> if automatic responsive mode does not suit the specific design needs\nof your implementation.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>If this option is <code>true</code>, you can also specify whether to enable responsive mode for Facet components (see\nFacet.options.enableResponsiveMode) and for Tab components (see\n<a href=\"https://coveo.github.io/search-ui/components/tab.html#options.enableresponsivemode\">Tab.options.enableResponsiveMode</a>).</p>\n<p>In addition, you can specify the label you wish to display on the dropdown buttons (see\nFacet.options.dropdownHeaderLabel and <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.dropdownheaderlabel\">Tab.options.dropdownHeaderLabel</a>).</p>\n</blockquote>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "SearchInterface.options.enableCollaborativeRating",
		"notSupportedIn": "",
		"comment": "<p><strong>Note:</strong></p>\n<blockquote>\n<p>The Coveo Cloud V2 platform does not support collaborative rating. Therefore, this option is obsolete in Coveo Cloud V2.</p>\n</blockquote>\n<p>Specifies whether to enable collaborative rating, which you can leverage using the\n<a href=\"https://coveo.github.io/search-ui/components/resultrating.html\"><code>ResultRating</code></a> component.</p>\n<p>Setting this option to <code>true</code> has no effect unless collaborative rating is also enabled on your Coveo index.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "SearchInterface.options.enableDebugInfo",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to enable the feature that allows the end user to ALT + double click any result to open a debug\npage with detailed information about all properties and fields for that result.\nEnabling this feature causes no security concern; the entire debug information is always visible to the end user\nthrough the browser developer console or by calling the Coveo API directly.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "SearchInterface.options.enableDuplicateFiltering",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to filter duplicates in the search results.\nSetting this option to <code>true</code> forces duplicates to not appear in search results. However, <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> counts\nstill include the duplicates, which can be confusing for the end user. This is a limitation of the index.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>The end user narrows a query down to a single item that has a duplicate. If the enableDuplicateFiltering\noption is <code>true</code>, then only one item appears in the search results while the Facet count is still 2.</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It also is possible to set this option separately for each <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component\n(see <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.enableduplicatefiltering\">Tab.options.enableDuplicateFiltering</a>).</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "SearchInterface.options.enableHistory",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to allow the end user to navigate search history using the <strong>Back</strong> and <strong>Forward</strong> buttons\nof the browser.\nIf this options is <code>true</code>, the SearchInterface component saves the state of the current query in the hash portion\nof the URL when the user submits the query.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>If the <code>enableHistory</code> option is <code>true</code> and the current query is <code>foobar</code>, the SearchInterface component\nsaves <code>q=foobar</code> in the URL hash when the user submits the query.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "SearchInterface.options.excerptLength",
		"notSupportedIn": "",
		"comment": "<p>Specifies the number of characters to get at query time to create an excerpt of the result.\nThis setting is global and cannot be modified on a per-result basis.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/excerpt.html\">Excerpt</a> component.</p>\n<p>Default value is <code>200</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "200"
		}
	},
	{
		"name": "SearchInterface.options.expression",
		"notSupportedIn": "",
		"comment": "<p>Specifies an expression to add to each query.\nYou might want to use this options to add a global filter to your entire search interface that applies for all\ntabs.</p>\n<p>You should not use this option to address security concerns (it is JavaScript, after all).</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It also is possible to set this option separately for each <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component\n(see <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.expression\">Tab.options.expression</a>).</p>\n</blockquote>\n<p>Default value is <code>&#39;&#39;</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": ""
		}
	},
	{
		"name": "SearchInterface.options.filterField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of a field to use as a custom filter when executing the query (also referred to as\n&quot;folding&quot;).\nSetting a value for this option causes the index to return only one result having any particular value inside the\nfilter field. Any other matching result is &quot;folded&quot; inside the childResults member of each JSON query result.</p>\n<p>This feature is typically useful with threaded conversations to include only one top-level result per\nconversation. Thus, the field you specify for this option will typically be value unique to each thread that is\nshared by all items (e.g., posts, emails, etc) in the thread.</p>\n<p>For more advanced features, see the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component.</p>\n<p>Default value is the empty string (<code>&#39;&#39;</code>).</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": ""
		}
	},
	{
		"name": "SearchInterface.options.firstLoadingAnimation",
		"notSupportedIn": "",
		"comment": "<p>Specifies the animation that you wish to display while your interface is loading.\nYou can either specify the CSS selector of an HTML element that matches the default CSS class\n(<code>coveo-first-loading-animation</code>), or add <code>-selector</code> to the markup attribute of this option to specify the CSS\nselector of an HTML element that matches any CSS class.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.hideuntilfirstquery\">hideUntilFirstQuery</a> option.</p>\n<p><strong>Examples:</strong></p>\n<p>In this first case, the SearchInterface uses the HTML element whose <code>id</code> attribute is <code>MyAnimation</code> as the\nloading animation only if the <code>class</code> attribute of this element also matches <code>coveo-first-loading-animation</code>.\nDefault loading animation CSS, which you can customize as you see fit, applies to this HTML element.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoSearchInterface'</span> <span class=\"hljs-attr\">data-first-loading-animation</span>=<span class=\"hljs-string\">'#MyAnimation'</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'MyAnimation'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'coveo-first-loading-animation'</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>In this second case, the SearchInterface uses the HTML element whose <code>id</code> attribute is <code>MyAnimation</code> as the\nloading animation no matter what CSS class it matches. However, if the <code>class</code> attribute of the HTML element does\nnot match <code>coveo-first-loading-animation</code>, no default loading animation CSS applies to this HTML element.\nNormally, you should only use <code>data-first-loading-animation-selector</code> if you want to completely override the\ndefault loading animation CSS.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoSearchInterface'</span> <span class=\"hljs-attr\">data-first-loading-animation-selector</span>=<span class=\"hljs-string\">'#MyAnimation'</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'MyAnimation'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'my-custom-loading-animation-class'</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>By default, the loading animation is a Coveo CSS animation (which you can customize with CSS).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.options.hideUntilFirstQuery",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to display a loading animation before the first query successfully returns.\n<strong>Note:</strong></p>\n<blockquote>\n<p>If you do not set this options to <code>false</code>, the loading animation will still run until the first query\nsuccessfully returns even if the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.autotriggerquery\">autoTriggerQuery</a> option is\n<code>false</code>.</p>\n</blockquote>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.firstloadinganimation\">firstLoadingAnimation</a> option.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.options.maximumAge",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum age (in milliseconds) that cached query results can have to still be usable as results\ninstead of performing a new query on the index. The cache is located in the Coveo Search API (which resides\nbetween the index and the search interface).\nIf cached results that are older than the age you specify in this option are available, the framework will not\nuse these results; it will rather perform a new query on the index.</p>\n<p>On high-volume public web sites, specifying a higher value for this option can greatly improve query response\ntime at the cost of result freshness.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It also is possible to set this option separately for each <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component\n(see <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.maximumage\">Tab.options.maximumAge</a>).</p>\n</blockquote>\n<p>Default value is <code>undefined</code>, which means that the search interface lets the Coveo Search API determine the\nmaximum cache age. This is typically equivalent to 30 minutes (see\n<a href=\"https://docs.coveo.com/en/1461/#RestQueryParameters-maximumAge\">maximumAge</a>).</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.options.pipeline",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the query pipeline to use for the queries.\nYou can specify a value for this option if your index is in a Coveo Cloud organization in which pipelines have\nbeen created (see <a href=\"https://docs.coveo.com/en/1791/\">Adding and Managing Query Pipelines</a>).</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It also is possible to set this option separately for each <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component\n(see <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.pipeline\">Tab.options.pipeline</a>).</p>\n</blockquote>\n<p>Default value is <code>undefined</code>, which means that the search interface uses the default pipeline.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.options.responsiveMediumBreakpoint",
		"notSupportedIn": "",
		"comment": "<p>Specifies the search interface width that should be considered &quot;medium&quot; size, in pixels.\nWhen the width of the window/device that displays the search page reaches or falls short of this threshold (but still exceeds the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.responsivesmallbreakpoint\">responsiveSmallBreakpoint</a> value), the search page layout will change so that, for instance, facets within the element that has the coveo-facet-column class will be accessible from a dropdown menu on top of the result list rather than being fully rendered next to the result list.</p>\n<p>This option is only taken into account when <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enableautomaticresponsivemode\">enableAutomaticResponsiveMode</a> is set to true.</p>\n<p>Default value is <code>800</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableAutomaticResponsiveMode"
		}
	},
	{
		"name": "SearchInterface.options.responsiveMode",
		"notSupportedIn": "",
		"comment": "<p>Specifies the search interface responsive mode that should be used.\nWhen the mode is auto, the width of the window/device that displays the search page is used to determine which layout the search page should use\n(see <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enableautomaticresponsivemode\">enableAutomaticResponsiveMode</a>, <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.responsivemediumbreakpoint\">responsiveMediumBreakpoint</a>\nand [responsiveSmallBreakpoint<a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.responsivesmallbreakpoint\">SearchInterface.options.responsiveSmallBreakpoint</a>])</p>\n<p>When it&#39;s not on auto, the width is ignored and the the layout used depends on this option\n(e.g. If set to &quot;small&quot;, then the search interface layout will be the same as if it was on a narrow window/device)</p>\n",
		"type": "",
		"constrainedValues": [
			"auto,small,medium,large"
		],
		"miscAttributes": {
			"defaultValue": "auto"
		}
	},
	{
		"name": "SearchInterface.options.responsiveSmallBreakpoint",
		"notSupportedIn": "",
		"comment": "<p>Specifies the search interface width that should be considered &quot;small&quot; size, in pixels.\nWhen the width of the window/device that displays the search page reaches or falls short of this threshold, the search page layout will change so that, for instance, some result list layouts which are not suited for being rendered on a small screen/area will be disabled.</p>\n<p>This option is only taken into account when <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enableautomaticresponsivemode\">enableAutomaticResponsiveMode</a> is set to true.</p>\n<p>Default value is <code>480</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableAutomaticResponsiveMode"
		}
	},
	{
		"name": "SearchInterface.options.resultsPerPage",
		"notSupportedIn": "",
		"comment": "<p>Specifies the number of results to display on each page.\nFor more advanced features, see the <a href=\"https://coveo.github.io/search-ui/components/resultsperpage.html\">ResultsPerPage</a> component.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>When the <a href=\"https://coveo.github.io/search-ui/components/resultsperpage.html\">ResultsPerPage</a> component is present in the page, this option gets overridden and is useless.</p>\n</blockquote>\n<p>Default value is <code>10</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "10"
		}
	},
	{
		"name": "SearchInterface.options.searchPageUri",
		"notSupportedIn": "",
		"comment": "<p>Specifies the search page you wish to navigate to when instantiating a standalone search box interface.\nDefault value is <code>undefined</code>, which means that the search interface does not redirect.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.options.timezone",
		"notSupportedIn": "",
		"comment": "<p>Specifies the timezone in which the search interface is loaded. This allows the index to recognize some special\nquery syntax.\nThis option must have a valid IANA zone info key (AKA the Olson time zone database) as its value.</p>\n<p><strong>Example:</strong> <code>America/New_York</code>.</p>\n<p>By default, the search interface allows a library to try to detect the timezone automatically.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchInterface.options.useLocalStorageForHistory",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to save the interface state in the local storage of the browser.\nYou might want to set this option to <code>true</code> for reasons specifically important for your implementation.</p>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "SearchInterface.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new SearchInterface. Initialize various singletons for the interface (e.g., usage analytics, query\ncontroller, state model, etc.). Binds events related to the query.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox",
		"notSupportedIn": "",
		"comment": "<p>The <code>Searchbox</code> component allows you to conveniently instantiate two components which end users frequently use to\nenter and submit queries.\nThis component attaches itself to a <code>div</code> element and takes care of instantiating either a\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a> or an <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component (see the\n<a href=\"https://coveo.github.io/search-ui/components/searchbox.html#options.enableomnibox\"><code>enableOmnibox</code></a> option). Optionally, the <code>Searchbox</code> can also instantiate a\n<a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\"><code>SearchButton</code></a> component, and append it inside the same <code>div</code> (see the\n<a href=\"https://coveo.github.io/search-ui/components/searchbox.html#options.addsearchbutton\"><code>addSearchButton</code></a> option).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.searchButton",
		"notSupportedIn": "",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\"><code>SearchButton</code></a> component instance.</p>\n",
		"type": "SearchButton",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.searchbox",
		"notSupportedIn": "",
		"comment": "<p>The component instance which allows end users to input queries.\nCan be either a <a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a> or an <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component, depending on the value of\n<a href=\"https://coveo.github.io/search-ui/components/searchbox.html#options.enableomnibox\"><code>enableOmnibox</code></a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.options",
		"notSupportedIn": "",
		"comment": "<p>Possible options for the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\">Searchbox</a></p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Searchbox.options.addSearchButton",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to instantiate a <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\"><code>SearchButton</code></a> component.\nDefault value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Searchbox.options.enableOmnibox",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to instantiate an <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component.\nWhen this option is <code>false</code>, the <code>Searchbox</code> instantiates a <a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a> component instead.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>You can use configuration options specific to the component you choose to instantiate with the <code>Searchbox</code>.</p>\n</blockquote>\n<p><strong>Examples:</strong></p>\n<p>In this first case, the <code>Searchbox</code> instantiates a <code>Querybox</code> component. You can configure this <code>Querybox</code>\ninstance using any of the <code>Querybox</code> component options, such as\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.triggerqueryonclear\"><code>triggerQueryOnClear</code></a>.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoSearchbox'</span> <span class=\"hljs-attr\">data-trigger-query-on-clear</span>=<span class=\"hljs-string\">'true'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>In this second case, the <code>Searchbox</code> instantiates an <code>Omnibox</code> component. You can configure this <code>Omnibox</code>\ninstance using any of the <code>Omnibox</code> component options, such as\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.placeholder\"><code>placeholder</code></a>.\nMoreover, since the <code>Omnibox</code> component inherits all of the <code>Querybox</code> component options, the\n<code>data-trigger-query-on-clear</code> option from the previous example would also work on this <code>Omnibox</code> instance.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoSearchbox'</span> <span class=\"hljs-attr\">data-enable-omnibox</span>=<span class=\"hljs-string\">'true'</span> <span class=\"hljs-attr\">data-placeholder</span>=<span class=\"hljs-string\">'Please enter a query'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Searchbox.options.height",
		"notSupportedIn": "",
		"comment": "<p>A custom height for the search box (in pixels).\nNote: Avoid setting this option if you want to modify the search box styling through custom CSS.</p>\n<p>Minimum value is <code>25</code></p>\n<p>Default behavior: The most specific CSS rules targeting HTML elements generated by the Searchbox component are used\n(e.g., if you are only using the default CoveoFullSearch.css stylesheet with no further styling customizations,\nthe search box height will be set to 50 pixels by default).</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "25"
		}
	},
	{
		"name": "Searchbox.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>Searchbox</code> component. Creates a new <code>Coveo.Magicbox</code> instance and wraps magic box methods (<code>onblur</code>,\n<code>onsubmit</code>, etc.). Binds event on <code>buildingQuery</code> and on redirection (for standalone box).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings",
		"notSupportedIn": "",
		"comment": "<p>The Settings component renders a <strong>Settings</strong> button that the end user can click to access a popup menu from which\nit is possible to perform several contextual actions. The usual location of the <strong>Settings</strong> button in the page is to\nthe right of the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\">Searchbox</a>.\nThis component can reference several components to populate its popup menu:</p>\n<ul>\n<li><a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/exporttoexcel.html\">ExportToExcel</a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/preferencespanel.html\">PreferencesPanel</a> (see also <a href=\"https://coveo.github.io/search-ui/components/resultsfilterspreferences.html\">ResultsFiltersPreferences</a> and <a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html\">ResultsPreferences</a>)</li>\n<li><a href=\"https://coveo.github.io/search-ui/components/searchalerts.html\">SearchAlerts</a> (see also <a href=\"https://coveo.github.io/search-ui/components/searchalertsmessage.html\">SearchAlertsMessage</a>)</li>\n<li><a href=\"https://coveo.github.io/search-ui/components/sharequery.html\">ShareQuery</a></li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.options",
		"notSupportedIn": "",
		"comment": "<p>The options for Settings</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Settings.options.menuDelay",
		"notSupportedIn": "",
		"comment": "<p>Specifies the delay (in milliseconds) before hiding the popup menu when the cursor is not hovering over it.\nDefault value is <code>300</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "300"
		}
	},
	{
		"name": "Settings.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Settings component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery",
		"notSupportedIn": "",
		"comment": "<p>The ShareQuery component populates the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> popup menu with the <strong>Share Query</strong> menu item. When the end\nuser clicks this item, it displays a panel containing two input boxes: one containing a shareable link and the other\ncontaining the complete current query expression.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ShareQuery.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new ShareQuery component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter",
		"notSupportedIn": "",
		"comment": "<p>The <code>SimpleFilter</code> component displays a dropdown menu containing field values which the end user can select to filter\nthe query results.\nThe list of available field values in the dropdown menu can either be static (defined through the\n<a href=\"https://coveo.github.io/search-ui/components/simplefilter.html#options.values\"><code>values</code></a> option), or dynamic (automatically obtained through a\n<a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\"><code>GroupByRequest</code></a> operation performed at the same time as the main query).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.options",
		"notSupportedIn": "",
		"comment": "<p>The possible options for the SimpleFilter.</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field whose values the <code>SimpleFilter</code> should output result filters from.\nSpecifying a value for this option is required for the <code>SimpleFilter</code> component to work.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "SimpleFilter.options.maximumNumberOfValues",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum number of field values to display in the <code>SimpleFilter</code> dropdown menu.\nDefault value is <code>5</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "5"
		}
	},
	{
		"name": "SimpleFilter.options.sortCriteria",
		"notSupportedIn": "",
		"comment": "<p>string?\nThe sort criteria to use.\n<strong>Default:</strong> <code>score</code></p>\n<p><strong>Allowed values:</strong></p>\n<p><code>score</code>: sort using the score value which is computed from the number of occurrences of a field value, as well as from the position\nwhere query result items having this field value appear in the ranked query result set. When using this sort criterion, a field value\nwith 100 occurrences might appear after one with only 10 occurrences, if the occurrences of the latter field value tend to appear higher\nin the ranked query result set.</p>\n<p><code>occurrences</code>: sort by number of occurrences, with field values having the highest number of occurrences appearing first.</p>\n<p><code>alphaascending/alphadescending</code>: sort alphabetically on the field values.</p>\n<p><code>chisquare</code>: sort based on the relative frequency of field values in the query result set compared to their frequency in the entire index. This means that a field value that does\nnot appear often in the index, but does appear often in the query result set will tend to appear higher.</p>\n",
		"type": "",
		"constrainedValues": [
			"occurrences,score,alphaascending,alphadescending,computedfieldascending,computedfielddescending,chisquare,nosort"
		],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.options.title",
		"notSupportedIn": "",
		"comment": "<p>Specifies the title to display for the <code>SimpleFilter</code>.\nDefault value is the localized string for <code>NoTitle</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.options.valueCaption",
		"notSupportedIn": "",
		"comment": "<p>Specifies a JSON object describing a mapping of <code>SimpleFilter</code> values to their desired captions.\n<strong>Examples:</strong></p>\n<ul>\n<li>You can set the option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">&#39;init&#39;</a> call:\n<code>`</code>javascript\nvar myValueCaptions = {\n&quot;txt&quot; : &quot;Text files&quot;,\n&quot;html&quot; : &quot;Web page&quot;,\n[ ... ]\n};</li>\n</ul>\n<p>Coveo.init(document.querySelector(&quot;#search&quot;), {\n  SimpleFilter : {\n    valueCaption : myValueCaptions\n  }\n});</p>\n<pre><code>\n* <span class=\"hljs-selector-tag\">Or</span> <span class=\"hljs-selector-tag\">before</span> <span class=\"hljs-selector-tag\">the</span> `<span class=\"hljs-selector-tag\">init</span>` <span class=\"hljs-selector-tag\">call</span>, <span class=\"hljs-selector-tag\">using</span> <span class=\"hljs-selector-tag\">the</span> <span class=\"hljs-selector-attr\">['options']</span>{<span class=\"hljs-variable\">@link</span> options} <span class=\"hljs-selector-tag\">top-level</span> <span class=\"hljs-selector-tag\">function</span>:\n```<span class=\"hljs-selector-tag\">javascript</span>\n<span class=\"hljs-selector-tag\">Coveo</span><span class=\"hljs-selector-class\">.options</span>(document.querySelector(<span class=\"hljs-string\">\"#search\"</span>), {\n  <span class=\"hljs-attribute\">SimpleFilter </span>: {\n    <span class=\"hljs-attribute\">valueCaption </span>: myValueCaptions\n  }\n});\n</code></pre><ul>\n<li>Or directly in the markup:<pre><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- Ensure that the double quotes are properly handled in `data-value-caption`. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoSimpleFilter'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myotherfield'</span> <span class=\"hljs-attr\">data-value-caption</span>=<span class=\"hljs-string\">'{\"txt\":\"Text files\",\"html\":\"Web page\"}'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n</li>\n</ul>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.options.values",
		"notSupportedIn": "",
		"comment": "<p>Specifies a static list of field values to display in the <code>SimpleFilter</code> dropdown menu.\nThis option is undefined by default, which means that the component generates a dynamic list of field values\nby performing a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\"><code>GroupByRequest</code></a> operation at the same time as the main query.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SimpleFilter.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>SimpleFilter</code> component. Binds multiple query events as well.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort",
		"notSupportedIn": "",
		"comment": "<p>The <code>Sort</code> component renders a widget that the end user can interact with to select the criterion to use when sorting query results.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.options",
		"notSupportedIn": "",
		"comment": "<p>Options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Sort.options.caption",
		"notSupportedIn": "",
		"comment": "<p>The caption to display on this component instance.\nBy default, the component uses the text content of the element it is instanciated on.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "Sort.options.sortCriteria",
		"notSupportedIn": "",
		"comment": "<p>The sort criterion/criteria the end user can select/toggle between when interacting with this component instance.\nThe available sort criteria are:</p>\n<ul>\n<li><code>relevancy</code></li>\n<li><code>date ascending</code>/<code>date descending</code></li>\n<li><code>qre</code></li>\n<li><code>@field ascending</code>/<code>@field descending</code>, where you must replace <code>field</code> with the name of a sortable field in your index (e.g., <code>data-sort-criteria=&quot;@size ascending&quot;</code>).</li>\n</ul>\n<p>You can specify a comma separated list of sort criteria to toggle between when interacting with this component instance (e.g., <code>data-sort-criteria=&quot;date descending,date ascending&quot;</code>).</p>\n<p>You can specify multiple sort criteria to be used in the same request by separating them with a semicolon (e.g., <code>data-sort-criteria=&quot;@size ascending;date ascending&quot;</code> ).</p>\n<p>Interacting with this component instance will cycle through those criteria in the order they are listed in.\nTypically, you should only specify a list of sort criteria when you want the end user to be able to to toggle the direction of a <code>date</code> or <code>@field</code> sort criteria.\nOtherwise, you should configure a distinct <code>Sort</code> component instance for each sort criterion you want to make available in your search page.</p>\n<p>You must specify a valid value for this option in order for this component instance to work correctly.</p>\n<p>Examples:</p>\n<ul>\n<li><code>data-sort-criteria=&quot;date ascending&quot;</code> createes a Sort component that allows to sort on <code>date ascending</code>, without being able to toggle the order.</li>\n<li><code>data-sort-criteria=&quot;date ascending, date descending&quot;</code> creates a Sort component that allows end users to toggle between <code>date ascending</code> and <code>date descending</code> on click.</li>\n<li><code>data-sort-criteria=&quot;@size ascending; date descending&quot;</code> creates a Sort component that only allows end users to sort on <code>@size ascending</code>. The index then applies a second sort on <code>date descending</code> when two items are of equal value.</li>\n<li><code>data-sort-criteria=&quot;@size ascending; date descending, @size descending; date descending&quot;</code> creates a Sort component that allows end users to toggle between <code>@size ascending</code> and <code>@size descending</code>. For each value, the index applies a second sort on <code>date descending</code> when two items are of equal value.</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "Sort.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>Sort</code> component instance.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating",
		"notSupportedIn": "",
		"comment": "<p>The <code>StarRating</code> component renders a five-star rating widget for use in commerce result templates.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.options.numberOfRatingsField",
		"notSupportedIn": "",
		"comment": "<p>A numeric field whose value should be used to display the total number of ratings label for the result item.\nIf unspecified, no number of ratings label is displayed. If the <code>numberOfRatingsField</code>&#39;s value is <code>0</code> or less, a <code>(No Ratings)</code> label is displayed.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StarRating.options.ratingField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the rating to be displayed as stars. If the rating is on a different scale than 0-5, a <code>ratingScale</code> value must be provided.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "StarRating.options.ratingScale",
		"notSupportedIn": "",
		"comment": "<p>The scale to apply to the <a href=\"https://coveo.github.io/search-ui/components/starrating.html#options.ratingfield\"><code>ratingField</code></a>&#39;s value. Must be smaller than or equal to the highest possible <code>ratingField</code>&#39;s value.\n<strong>Example:</strong> If the <code>ratingScale</code> is <code>100</code> and the current <code>ratingField</code>&#39;s value is <code>75</code>, the component will render 3 stars (i.e., <code>75 * (5 / 100)</code>, rounded down).</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "1",
			"max": "100000",
			"defaultValue": "5"
		}
	},
	{
		"name": "StarRating.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>StarRating</code> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab",
		"notSupportedIn": "",
		"comment": "<p>The Tab component renders a widget that allows the end user to select a specific search interface.\nThis component attaches itself to a <code>div</code> element. It is in charge of adding an advanced expression to the outgoing\nquery in order to refine the results.</p>\n<p>The Tab component can also hide and show different parts of the UI. For each individual component in the UI, you can\nspecify whether you wish to include or exclude that component when the user selects a certain Tab (see <a href=\"https://docs.coveo.com/en/508/javascript-search-framework/using-components-only-on-specific-tabs\">Using Components\nOnly on Specific Tabs</a>).</p>\n<p><strong>Setting a New Endpoint for a Tab:</strong></p>\n<p>A Tab can use a custom endpoint when performing a query. Of course, you need to make sure that the endpoint exists in\nthe array of Coveo.SearchEndpoint.endpoints (see <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html#endpoints\">SearchEndpoint.endpoints</a>).</p>\n<pre><code>Coveo.SearchEndpoint.endpoints[<span class=\"hljs-string\">\"specialEndpoint\"</span>] = <span class=\"hljs-keyword\">new</span> Coveo.SearchEndpoint({\n    <span class=\"hljs-attr\">restUri</span> : <span class=\"hljs-string\">'https://somewhere.com/rest/search'</span>\n})\n\n[ ... ]\n\n&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">'CoveoTab'</span> data-endpoint=<span class=\"hljs-string\">'specialEndpoint'</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n</code></pre>",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.options",
		"notSupportedIn": "",
		"comment": "<p>The options for a Tab</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.options.caption",
		"notSupportedIn": "",
		"comment": "<p>Specifies the caption of the Tab.\nSpecifying a value for this option is necessary for this component to work.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "Tab.options.constant",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to include the <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.expression\">Tab.options.expression</a> in the constant part of the query.\nThe index specially optimizes the constant part of the query to execute faster. However, you must be careful not\nto include dynamic query expressions, otherwise the cache will lose its efficiency.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Tab.options.dropdownHeaderLabel",
		"notSupportedIn": "",
		"comment": "<p>Specifies the label of the button that allows to show the hidden tabs when in responsive mode.\nIf more than one Tab in the search interface specifies a value for this option, then the framework uses the first\noccurrence of the option.</p>\n<p>The default value is <code>&quot;More&quot;</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.options.enableDuplicateFiltering",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to filter duplicates in the search results when the user selects the Tab.\nSetting this option to <code>true</code> forces duplicates to not appear in the search results. However, <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a>\ncounts still include duplicates, which can be confusing for the end user. This is a limitation of the index.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>The end user narrows a query down to one item that has a duplicate. If this options is <code>true</code> and the user\nselects the Tab, only one item appears in the search results while the Facet count is still 2.</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It is also possible to enable duplicate filtering for the entire <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> rather than for a\nsingle Tab (see <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enableduplicatefiltering\">SearchInterface.options.enableDuplicateFiltering</a>).</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Tab.options.enableResponsiveMode",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to enable responsive mode for tabs. Responsive mode makes overflowing tabs disappear, instead\nmaking them available using a dropdown button. Responsive tabs are enabled either when tabs overflow or when the\nwidth of the search interface becomes too small.\nDisabling responsive mode for one Tab also disables it for all tabs. Therefore, you only need to set this option\nto <code>false</code> on one Tab to disable responsive mode.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "Tab.options.endpoint",
		"notSupportedIn": "",
		"comment": "<p>Specifies the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a> to point to when performing queries from within the Tab.\nBy default, the Tab uses the &quot;default&quot; endpoint.</p>\n",
		"type": "SearchEndpoint",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.options.expression",
		"notSupportedIn": "",
		"comment": "<p>Specifies an advanced expression or filter that the Tab should add to any outgoing query.\n<strong>Example:</strong></p>\n<p><code>@objecttype==Message</code></p>\n<p>Default value is <code>undefined</code> and the Tab applies no additional expression or filter to the query.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.options.icon",
		"notSupportedIn": "",
		"comment": "<p>Specifies an icon to use for the Tab.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.options.id",
		"notSupportedIn": "",
		"comment": "<p>Specifies a unique ID for the Tab.\nSpecifying a value for this option is necessary for this component to work.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"required": "true"
		}
	},
	{
		"name": "Tab.options.layout",
		"notSupportedIn": "",
		"comment": "<p>Specifies the default layout to display when the user selects the Tab (see <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.layout\">ResultList.options.layout</a> and\nResultLayout).\nSee the <a href=\"https://coveo.github.io/search-ui/globals.html#validlayout\">ValidLayout</a> type for the list of possible values.</p>\n<p>If not specified, it will default to &#39;list&#39;.</p>\n<p>See also <a href=\"https://docs.coveo.com/en/360/\">Result Layouts</a>.</p>\n<p>Default value is <code>undefined</code> and the component selects the first available layout.</p>\n",
		"type": "",
		"constrainedValues": [
			"list,card,table"
		],
		"miscAttributes": {}
	},
	{
		"name": "Tab.options.maximumAge",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum age (in milliseconds) that cached query results can have to still be usable as results\ninstead of performing a new query on the index from within the Tab. The cache is located in the Coveo Search API\n(which resides between the index and the search interface).\nIf cached results that are older than the age you specify in this option are available, a new query will be\nperformed on the index anyhow.</p>\n<p>On high-volume public web sites, specifying a higher value for this option can greatly improve query response\ntime at the cost of result freshness.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It is also possible to set a maximum cache age for the entire <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> rather than for a single\nTab (see <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.maximumage\">SearchInterface.options.maximumAge</a>).</p>\n</blockquote>\n<p>Default value is <code>undefined</code> and the Coveo Search API determines the maximum cache age. This is typically\nequivalent to 30 minutes (see <a href=\"https://docs.coveo.com/en/1461/#RestQueryParameters-maximumAge\">maximumAge</a>).</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.options.pipeline",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the query pipeline to use for the queries when the Tab is selected.\nYou can specify a value for this option if your index is in a Coveo Cloud organization in which pipelines have\nbeen created (see <a href=\"https://docs.coveo.com/en/1791/\">Adding and Managing Query Pipelines</a>).</p>\n<p>Default value is <code>undefined</code>, which means that pipeline selection conditions defined in the Coveo Cloud\norganization apply.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.options.sort",
		"notSupportedIn": "",
		"comment": "<p>Specifies the default sort criteria to use when selecting the Tab. A <a href=\"https://coveo.github.io/search-ui/components/sort.html\">Sort</a> component with the same\nparameter needs to be present in the search interface in order for this option to function properly.\n<strong>Examples:</strong></p>\n<ul>\n<li><code>data-sort=&#39;relevancy&#39;</code></li>\n<li><code>data-sort=&#39;date descending&#39;</code></li>\n</ul>\n<p>Default value is <code>undefined</code> and the normal <a href=\"https://coveo.github.io/search-ui/components/sort.html\">Sort</a> component behavior applies.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Tab.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Tab. Binds on buildingQuery event as well as an event on click of the element.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader",
		"notSupportedIn": "",
		"comment": "<p>The TemplateLoader component can load one result template into another. You should normally declare any reusable\nresult template outside of the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> component. Otherwise, the framework will evaluate the\n<code>data-condition</code> of the reusable result template and possibly render it.\n<strong>Example:</strong></p>\n<pre><code class=\"lang-html\">[ ... ]\n\n<span class=\"hljs-comment\">&lt;!-- A reusable result template. Note that it is important to declare it outside of the ResultList component. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text/underscore'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'result-template'</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'ReusableTemplate'</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFieldTable'</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@source'</span> <span class=\"hljs-attr\">data-caption</span>=<span class=\"hljs-string\">'Source'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@percentScore'</span> <span class=\"hljs-attr\">data-caption</span>=<span class=\"hljs-string\">'Score'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n[ ... ]\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultList\"</span> <span class=\"hljs-attr\">data-wait-animation</span>=<span class=\"hljs-string\">\"fade\"</span> <span class=\"hljs-attr\">data-auto-select-fields-to-include</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>\n\n  <span class=\"hljs-comment\">&lt;!-- A custom result template for Lithium messages. --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text/underscore'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'result-template'</span> <span class=\"hljs-attr\">data-condition</span>=<span class=\"hljs-string\">'raw.filetype == \"lithiummessage\"'</span>&gt;</span><span class=\"javascript\">\n    &lt;div&gt;\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoIcon'</span> <span class=\"hljs-attr\">data-small</span>=<span class=\"hljs-string\">'true'</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultLink'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoTemplateLoader'</span> <span class=\"hljs-attr\">data-template-id</span>=<span class=\"hljs-string\">'ReusableTemplate'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n  <span class=\"hljs-comment\">&lt;!-- A custom result template for images. --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text/underscore'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'result-template'</span> <span class=\"hljs-attr\">data-condition</span>=<span class=\"hljs-string\">'raw.filetype == \"Image\"'</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoIcon'</span> <span class=\"hljs-attr\">data-small</span>=<span class=\"hljs-string\">'true'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">img</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultLink'</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoThumbnail'</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoTemplateLoader'</span> <span class=\"hljs-attr\">data-template-id</span>=<span class=\"hljs-string\">'ReusableTemplate'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  </span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n[ ... ]\n</code></pre>\n<p>See <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.options",
		"notSupportedIn": "",
		"comment": "<p>The possible options for a TemplateLoader.</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.options.condition",
		"notSupportedIn": "",
		"comment": "<p>Specifies the boolean condition that the result must satisfy in order for the template to load.\n<strong>Example:</strong></p>\n<p><code>data-condition=&#39;percentScore &gt; 80&#39;</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.options.template",
		"notSupportedIn": "",
		"comment": "<p>Specifies how to find the template. This can be either a CSS selector or an HTML <code>id</code> attribute.\n<strong>Examples:</strong></p>\n<ul>\n<li>With a CSS selector: <code>data-template-selector=&#39;.MySelector&#39;</code></li>\n<li>With an HTML <code>id</code>: <code>data-template-id=&#39;MyId&#39;</code></li>\n</ul>\n",
		"type": "Template",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateLoader.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new TemplateLoader.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text",
		"notSupportedIn": "",
		"comment": "<p>The Text component embeds itself in a result template to output a simple text value.\nThe only purpose of this component is to make it possible to easily add different text values to result templates\nwhen using the Coveo JavaScript Search Interface Editor (see\n<a href=\"https://docs.coveo.com/en/1852/\">Interface Editor</a>).</p>\n<p>If you are not designing a search interface using the Coveo JavaScript Search Interface Editor, using this component\nis unnecessary.</p>\n<p>This component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.color",
		"notSupportedIn": "",
		"comment": "<p>Specifies the color of the text (set as the <code>color</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.marginBottom",
		"notSupportedIn": "",
		"comment": "<p>Specifies the bottom margin of the text (set as the <code>margin-bottom</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.marginLeft",
		"notSupportedIn": "",
		"comment": "<p>Specifies the left margin of the text (set as the <code>margin-left</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.marginRight",
		"notSupportedIn": "",
		"comment": "<p>Specifies the right margin of the text (set as the <code>margin-right</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.marginTop",
		"notSupportedIn": "",
		"comment": "<p>Specifies the top margin of the text (set as the <code>margin-top</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.paddingBottom",
		"notSupportedIn": "",
		"comment": "<p>Specifies the bottom padding of the text (set as the <code>padding-bottom</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.paddingLeft",
		"notSupportedIn": "",
		"comment": "<p>Specifies the left padding of the text (set as the <code>padding-left</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.paddingRight",
		"notSupportedIn": "",
		"comment": "<p>Specifies the right padding of the text (set as the <code>padding-right</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.paddingTop",
		"notSupportedIn": "",
		"comment": "<p>Specifies the top padding of the text (set as the <code>padding-top</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.size",
		"notSupportedIn": "",
		"comment": "<p>Specifies the size of the text (set as the <code>font-size</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.style",
		"notSupportedIn": "",
		"comment": "<p>Specifies the style of the text (set as the <code>font-style</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.textAlign",
		"notSupportedIn": "",
		"comment": "<p>Specifies the alignment of the text (set as the <code>text-align</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.value",
		"notSupportedIn": "",
		"comment": "<p>Specifies the localized string value that the component should render.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.options.weight",
		"notSupportedIn": "",
		"comment": "<p>Specifies the weight of the text (set as the <code>font-weight</code> CSS property).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Text.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Text component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>The Thumbnail component automatically fetches the thumbnail of the result object and outputs an HTML <code>img</code> tag with\nit.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.options",
		"notSupportedIn": "",
		"comment": "<p>Options for the Thumbnail</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Thumbnail.options.clickable",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to create a clickable <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a> around the Thumbnail.\nDefault value is <code>false</code>.</p>\n<p>If set to true, you can use the options specified on <a href=\"https://coveo.github.io/search-ui/components/resultlink.html#options\">ResultLink.options</a></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "false"
		}
	},
	{
		"name": "Thumbnail.options.noThumbnailClass",
		"notSupportedIn": "",
		"comment": "<p>Specifies the CSS class to use on the <code>img</code> tag that the Thumbnail component outputs when a result has no\nthumbnail in the index.\nDefault value is <code>coveo-no-thumbnail</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "coveo-no-thumbnail"
		}
	},
	{
		"name": "Thumbnail.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Thumbnail component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet",
		"notSupportedIn": [
			"salesforcefree"
		],
		"comment": "<p>The TimespanFacet component displays a <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\">FacetRange</a> with prebuilt ranges.\nThe prebuilt ranges allow you to see the items last updated in the last day, week, month, or year.</p>\n<p>This component in a thin wrapper around the standard <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\">FacetRange</a> component.</p>\n<p>This component is meant to offer out of the box default ranges, so it can easily be inserted in a standard search page.</p>\n<p>To configure different ranges than those offered by this component, use the standard <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\">FacetRange</a> component instead.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.facet",
		"notSupportedIn": "",
		"comment": "<p>Returns the underlying <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\">FacetRange</a> component associated to the Timespan Facet.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.ranges",
		"notSupportedIn": "",
		"comment": "<p>Sets a new range for the component.\nReturns the current range the facet uses to query the index</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the index field whose values the facet should use.\nDefault value is the field <code>@date</code></p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "@date"
		}
	},
	{
		"name": "TimespanFacet.options.id",
		"notSupportedIn": "",
		"comment": "<p>Specifies a unique identifier for the facet. Among other things, this identifier serves the purpose of saving\nthe facet state in the URL hash.\nIf you have two facets with the same field on the same page, you should specify an <code>id</code> value for at least one of\nthose two facets. This <code>id</code> must be unique in the page.</p>\n<p>Default value is the <a href=\"https://coveo.github.io/search-ui/components/timespanfacet.html#options.field\"><code>field</code></a> option value.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TimespanFacet.options.title",
		"notSupportedIn": "",
		"comment": "<p>Specifies the title to display at the top of the facet.\nDefault value is the localized string for <code>Last updated</code>.</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "LastUpdated"
		}
	},
	{
		"name": "TimespanFacet.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers",
		"notSupportedIn": "",
		"comment": "<p>The Triggers component enables the use of triggers (<code>notify</code>, <code>execute</code>, <code>query</code>, <code>redirect</code>) generated by the Coveo\nSearch API (see <a href=\"https://docs.coveo.com/en/1458/\">Trigger</a>) in the query pipeline (see\n<a href=\"https://docs.coveo.com/en/1450/\">Managing the Query Pipeline</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.notifications",
		"notSupportedIn": "",
		"comment": "<p>The list of notifications returned by the Search API for the current query (via <code>notify</code> triggers).\nThe Triggers component automatically renders this list visually.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Triggers.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new Triggers component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail",
		"notSupportedIn": "",
		"comment": "<p>The YouTubeThumbnail component automatically fetches the thumbnail of a YouTube video.\nThis component differs from the standard <a href=\"https://coveo.github.io/search-ui/components/thumbnail.html\">Thumbnail</a> component because the thumbnail it outputs is always\nclickable.</p>\n<p>Depending on the component configuration, clicking a YouTube thumbnail can either automatically open a modal box\ncontaining the <code>iframe</code> from YouTube, or open the target URL in the current window (see\n<a href=\"https://coveo.github.io/search-ui/components/youtubethumbnail.html#options.embed\">YouTubeThumbnail.options.embed</a>).</p>\n<p>This component is a result template component (see <a href=\"https://docs.coveo.com/en/413/\">Result Templates</a>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "YouTubeThumbnail.options.embed",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether clicking on the YouTube thumbnail loads the video in a modal box.\nSetting this option to <code>false</code> causes the browser to change its current location to that of the target URL when\nthe end user clicks the YouTube thumbnail.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "YouTubeThumbnail.options.height",
		"notSupportedIn": "",
		"comment": "<p>Specifies the height (in pixels) of the YouTube thumbnail.\nDefault value is <code>112px</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "112px"
		}
	},
	{
		"name": "YouTubeThumbnail.options.width",
		"notSupportedIn": "",
		"comment": "<p>Specifies the width (in pixels) of the YouTube thumbnail.\nDefault value is <code>200px</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "200px"
		}
	},
	{
		"name": "YouTubeThumbnail.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AllowedValuesPatternType",
		"notSupportedIn": "",
		"comment": "<p>The possible values for the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html#allowedvaluespatterntype\">allowedValuesPatternType</a> property of the <code>IGroupByRequest</code> interface.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AllowedValuesPatternType.EditDistance",
		"notSupportedIn": "",
		"comment": "<p>Applies the Edit Distance algorithm to match values that are close to the specified pattern.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AllowedValuesPatternType.Legacy",
		"notSupportedIn": "",
		"comment": "<p>Only supports trailing wildcards in the pattern.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AllowedValuesPatternType.Phonetic",
		"notSupportedIn": "",
		"comment": "<p>Applies a phonetic algorithm to match values that are phonetically similar to the specified pattern.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AllowedValuesPatternType.Regex",
		"notSupportedIn": "",
		"comment": "<p>Supports regular expression as the pattern.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AllowedValuesPatternType.Wildcards",
		"notSupportedIn": "",
		"comment": "<p>Fully supports wildcards.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRangeValueFormat",
		"notSupportedIn": "",
		"comment": "<p>The allowed values for the <a href=\"https://coveo.github.io/search-ui/components/dynamicfacetrange.html#options.valueformat\"><code>valueFormat</code></a> option\nof the <a href=\"https://coveo.github.io/search-ui/components/dynamicfacetrange.html\"><code>DynamicFacetRange</code></a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRangeValueFormat.currency",
		"notSupportedIn": "",
		"comment": "<p>Format range values as localized currency strings.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRangeValueFormat.date",
		"notSupportedIn": "",
		"comment": "<p>Format range values as localized date strings.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DynamicFacetRangeValueFormat.number",
		"notSupportedIn": "",
		"comment": "<p>Format range values as localized numeric strings.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSortCriteria",
		"notSupportedIn": "",
		"comment": "<p>The allowed sort criteria for a Search API\n<a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html\">facet request</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSortCriteria.alphanumeric",
		"notSupportedIn": "",
		"comment": "<p>Sort facet values in ascending alphanumeric order.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSortCriteria.score",
		"notSupportedIn": "",
		"comment": "<p>Sort facet values in descending score order.\nFacet value scores are based on number of occurrences and position in the\nranked query result set.</p>\n<p>The Coveo Machine Learning dynamic navigation experience feature only\nworks with this sort criterion.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetType",
		"notSupportedIn": "",
		"comment": "<p>The allowed values for the <code>facetType</code> property of a <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html\">facet request</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetType.dateRange",
		"notSupportedIn": "",
		"comment": "<p>Request facet values representing ranges of dates.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetType.hierarchical",
		"notSupportedIn": "",
		"comment": "<p>Request facet values representing a hierarchy.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetType.numericalRange",
		"notSupportedIn": "",
		"comment": "<p>Request facet values representing ranges of numbers.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetType.specific",
		"notSupportedIn": "",
		"comment": "<p>Request facet values representing specific values.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueState",
		"notSupportedIn": "",
		"comment": "<p>The allowed states of a facet value in a Search API facet\n<a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequestvalue.html#state\">request</a> or\n<a href=\"https://coveo.github.io/search-ui/interfaces/ifacetresponsevalue.html#state\">response</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueState.idle",
		"notSupportedIn": "",
		"comment": "<p>The facet value is not currently selected or excluded in the search\ninterface.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValueState.selected",
		"notSupportedIn": "",
		"comment": "<p>The facet value is currently selected in the search interface.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearchEvents",
		"notSupportedIn": "",
		"comment": "<p>This static class is there to contains the different string definition for all the events related to the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AdvancedSearchEvents.buildingAdvancedSearch",
		"notSupportedIn": "",
		"comment": "<p>Triggered when the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component is being built.\nAllows external code to add new sections in the <strong>Advanced Search</strong> panel.</p>\n<p>All bound handlers receive <a href=\"https://coveo.github.io/search-ui/interfaces/ibuildingadvancedsearcheventargs.html\">IBuildingAdvancedSearchEventArgs</a> as an argument</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsEvents",
		"notSupportedIn": "",
		"comment": "<p>The <code>AnalyticsEvents</code> static class contains the string definitions of all events that strongly relate to usage\nanalytics.\nSee <a href=\"https://docs.coveo.com/en/417/\">Events</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsEvents.analyticsEventReady",
		"notSupportedIn": "",
		"comment": "<p>Triggered when any event (i.e., <code>search</code>, <code>click</code>, or <code>custom</code>) is about to be logged.\nAll <code>analyticsEventReady</code> event handlers receive an <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticseventargs.html\"><code>AnalyticsEventArgs</code></a> object as an argument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsEvents.changeAnalyticsCustomData",
		"notSupportedIn": "",
		"comment": "<p>Triggered whenever an analytics event is about to be logged.\nThis event allows external code to modify the analytics data before it is sent to the Coveo Usage Analytics REST\nservice.</p>\n<p>All <code>changeAnalyticsCustomData</code> event handlers receive a\n<a href=\"https://coveo.github.io/search-ui/interfaces/ichangeanalyticscustomdataeventargs.html\"><code>ChangeAnalyticsCustomDataEventArgs</code></a> object as an argument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "AnalyticsEvents.documentViewEvent",
		"notSupportedIn": "",
		"comment": "<p>Triggered when a <code>click</code> analytics event is logged (e.g., when the end user clicks a\n<a href=\"https://coveo.github.io/search-ui/components/resultlink.html\"><code>ResultLink</code></a> or <a href=\"https://coveo.github.io/search-ui/components/quickview.html\"><code>Quickview</code></a> to open a query result item).\nAll <code>documentViewEvent</code> event handlers receive an\n<a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsdocumentvieweventargs.html\"><code>AnalyticsDocumentViewEventArgs</code></a> object as an argument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "BaseComponent",
		"notSupportedIn": "",
		"comment": "<p>Every component in the framework ultimately inherits from this base component class.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "BaseComponent.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "BaseComponent.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "BaseComponent.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "BreadcrumbEvents",
		"notSupportedIn": "",
		"comment": "<p>This static class is there to contains the different string definition for all the events related to <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "BreadcrumbEvents.clearBreadcrumb",
		"notSupportedIn": "",
		"comment": "<p>Triggered when the user clicks the Clear All button in the breadcrumb. When this event is raised, every filter that is included in the breadcrumb should be removed.\nThis event does not provide custom event data.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "BreadcrumbEvents.populateBreadcrumb",
		"notSupportedIn": "",
		"comment": "<p>Triggered when the breadcrumb needs to update its content. External code can use this event to provide bits of HTML that should be included in the breadcrumb.\nAll handlers bound to this event will receive a <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulatebreadcrumbeventargs.html\">IPopulateBreadcrumbEventArgs</a> as an argument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlayEvents",
		"notSupportedIn": "",
		"comment": "<p>The CardOverlayEvents class contains string definitions for all events related to the <a href=\"https://coveo.github.io/search-ui/components/cardoverlay.html\">CardOverlay</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlayEvents.closeCardOverlay",
		"notSupportedIn": "",
		"comment": "<p>Closing a <a href=\"https://coveo.github.io/search-ui/components/cardoverlay.html\">CardOverlay</a> component triggers this event (see <a href=\"https://coveo.github.io/search-ui/components/cardoverlay.html#closeoverlay\">CardOverlay.closeOverlay</a>).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "CardOverlayEvents.openCardOverlay",
		"notSupportedIn": "",
		"comment": "<p>Opening a <a href=\"https://coveo.github.io/search-ui/components/cardoverlay.html\">CardOverlay</a> component triggers this event (see <a href=\"https://coveo.github.io/search-ui/components/cardoverlay.html#openoverlay\">CardOverlay.openOverlay</a>).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Cell",
		"notSupportedIn": "",
		"comment": "<p>Represent a single cell of data in the <a href=\"https://coveo.github.io/search-ui/components/matrix.html\">Matrix</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Checkbox",
		"notSupportedIn": "",
		"comment": "<p>A checkbox widget with standard styling.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Checkbox.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>Checkbox</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component",
		"notSupportedIn": "",
		"comment": "<p>The base class for every component in the framework.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Component.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ComponentEvents",
		"notSupportedIn": "",
		"comment": "<p>The <code>ComponentEvents</code> class is used by the various Coveo Component to trigger events and bind event handlers. It adds\nlogic to execute handlers or triggers only when a component is &quot;enabled&quot;, which serves as a way to avoid executing\nhandlers on components that are invisible and inactive in the query.\nTypically, a component is disabled when it is not active in the current <a href=\"https://coveo.github.io/search-ui/components/tab.html\"><code>Tab</code></a>. It can also be disabled\nby external code, however.</p>\n<p>To manually enable or disable a component, simply use its <a href=\"https://coveo.github.io/search-ui/classes/component.html#enable\"><code>enable</code></a> or\n<a href=\"https://coveo.github.io/search-ui/classes/component.html#disable\"><code>disable</code></a> method.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ComponentEvents.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>ComponentEvents</code> instance for a <a href=\"https://coveo.github.io/search-ui/classes/component.html\"><code>Component</code></a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ComponentOptions",
		"notSupportedIn": "",
		"comment": "<p>The <code>ComponentOptions</code> static class contains methods allowing the Coveo JavaScript Search Framework to initialize\ncomponent options.\nTypically, each <a href=\"https://coveo.github.io/search-ui/classes/component.html\"><code>Component</code></a> that exposes a set of options contains a static <code>options</code> property.</p>\n<p>This property &quot;builds&quot; each option using the <code>ComponentOptions</code> method corresponding to its type (e.g.,\n<a href=\"https://coveo.github.io/search-ui/classes/componentoptions.html#buildbooleanoption\"><code>buildBooleanOption</code></a>,\n<a href=\"https://coveo.github.io/search-ui/classes/componentoptions.html#buildfieldoption\"><code>buildFieldOption</code></a>,\n<a href=\"https://coveo.github.io/search-ui/classes/componentoptions.html#buildstringoption\"><code>buildStringOption</code></a>, etc.)</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DatePicker",
		"notSupportedIn": "",
		"comment": "<p>A date picker widget with standard styling.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DatePicker.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>DatePicker</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DateUtils",
		"notSupportedIn": "",
		"comment": "<p>The <code>DateUtils</code> class exposes methods to convert strings, numbers and date objects to standard ISO 8601 Date objects,\nusing the correct culture, language and format. It also offers methods to convert date objects to strings.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceEvents",
		"notSupportedIn": "",
		"comment": "<p>The <code>DistanceEvents</code> static class contains the string definitions of all events related to distance\nlist.\nSee <a href=\"https://docs.coveo.com/en/417/\">Events</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceEvents.onPositionNotResolved",
		"notSupportedIn": "",
		"comment": "<p>Triggered when the <a href=\"https://coveo.github.io/search-ui/components/distanceresources.html\"><code>DistanceResources</code></a> component fails to resolve the position.\n<strong>Note:</strong></p>\n<blockquote>\n<p>You should bind a handler to this event if you want to display an error message to the end user, or hide\ncomponents that cannot be used.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceEvents.onPositionResolved",
		"notSupportedIn": "",
		"comment": "<p>Triggered when the <a href=\"https://coveo.github.io/search-ui/components/distanceresources.html\"><code>DistanceResources</code></a> component successfully resolves the position.\nAll <code>onPositionResolved</code> event handlers receive a <a href=\"https://coveo.github.io/search-ui/interfaces/ipositionresolvedeventargs.html\"><code>PositionResolvedEventArgs</code></a>\nobject as an argument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "DistanceEvents.onResolvingPosition",
		"notSupportedIn": "",
		"comment": "<p>Triggered when the <a href=\"https://coveo.github.io/search-ui/components/distanceresources.html\"><code>DistanceResources</code></a> component tries to resolve the position.\nAll <code>onResolvingPosition</code> event handlers receive a\n<a href=\"https://coveo.github.io/search-ui/interfaces/iresolvingpositioneventargs.html\"><code>ResolvingPositionEventArgs</code></a> object as an argument.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>You should bind a handler to this event if you want to register one or several new position providers.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Dom",
		"notSupportedIn": "",
		"comment": "<p>This is essentially an helper class for dom manipulation.<br/>\nThis is intended to provide some basic functionality normally offered by jQuery.<br/>\nTo minimize the multiple jQuery conflict we have while integrating in various system, we implemented the very small subset that the framework needs.<br/>\nSee <a href=\"https://coveo.github.io/search-ui/globals.html#__\">$$</a>, which is a function that wraps this class constructor, for less verbose code.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Dom.useNativeJavaScriptEvents",
		"notSupportedIn": "",
		"comment": "<p>Whether to always register, remove, and trigger events using standard JavaScript rather than attempting to use jQuery first.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Dom.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new Dom object with the given HTMLElement</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Dropdown",
		"notSupportedIn": "",
		"comment": "<p>A dropdown widget with standard styling.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Dropdown.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>Dropdown</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "EndpointCaller",
		"notSupportedIn": "",
		"comment": "<p>This class is in charge of calling an endpoint (eg: a <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a>).\nThis means it&#39;s only uses to execute an XMLHttpRequest (for example), massage the response and check if there are errors.</p>\n<p>Will execute the call and return a Promise.</p>\n<p>Call using one of those options :</p>\n<ul>\n<li>XMLHttpRequest for recent browser that support CORS, or if the endpoint is on the same origin.</li>\n<li>XDomainRequest for older IE browser that do not support CORS.</li>\n<li>Jsonp if all else fails, or is explicitly enabled.</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "EndpointCaller.useJsonp",
		"notSupportedIn": "",
		"comment": "<p>Set this property to true to enable Jsonp call to the endpoint.<br/>\nBe aware that jsonp is &quot;easier&quot; to setup endpoint wise, but has a lot of drawback and limitation for the client code.<br/>\nDefault to false.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "EndpointCaller.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new EndpointCaller.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ExpressionBuilder",
		"notSupportedIn": "",
		"comment": "<p>An <code>ExpressionBuilder</code> that is mostly used by the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a>.<br/>\nIt is used to build a single query expression.<br/>\nIt allows combining multiple expression parts into a single string and provides utilities to generate common expression parts.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSearch",
		"notSupportedIn": "",
		"comment": "<p>Used by the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component to render and handle the facet search part of each facet.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetSettings",
		"notSupportedIn": "",
		"comment": "<p>Handle the rendering of the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> settings menu (typically the ... in the facet header).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FacetValue",
		"notSupportedIn": "",
		"comment": "<p>A class which holds information and operation available on a single facet value returned by a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>.<br/>\nThis class is used extensively in the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread",
		"notSupportedIn": "",
		"comment": "<p>The <code>FoldingForThread</code> component inherits from the <a href=\"https://coveo.github.io/search-ui/components/folding.html\"><code>Folding</code></a> component. It offers the\nsame configuration options.\nFolding conversations and threads requires different processing. When you need to fold all child items (including\ntheir attachments) on the same level under a common ancestor item, use this component rather than the <code>Folding</code>\ncomponent.</p>\n<p>This component works well with Chatter and Lithium.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>There can only be one <code>FoldingForThread</code> component per <a href=\"https://coveo.github.io/search-ui/components/tab.html\"><code>Tab</code></a> component.</p>\n</blockquote>\n<p>See <a href=\"https://docs.coveo.com/en/428/\">Folding Results</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.bind",
		"notSupportedIn": "",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n",
		"type": "ComponentEvents",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.root",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.options",
		"notSupportedIn": "",
		"comment": "<p>The options for the component</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.options.child",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field that determines whether a certain result is a child of another top result.\n<strong>Note:</strong></p>\n<blockquote>\n<p>In the index, the values of the corresponding field must:</p>\n<ul>\n<li>Contain alphanumerical characters only.</li>\n<li>Contain no more than 60 characters.</li>\n</ul>\n</blockquote>\n<p>Default value is <code>@foldingchild</code>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "@foldingchild"
		}
	},
	{
		"name": "FoldingForThread.options.childField",
		"notSupportedIn": "",
		"comment": "<p>This option is deprecated. Instead, use the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.parent\">Folding.options.parent</a> option.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.options.enableExpand",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to add a callback function on the top result, allowing to make an additional query to load all\nof its child results (e.g., to load all conversations of a given thread).\nConcretely, the <a href=\"https://coveo.github.io/search-ui/components/resultfolding.html\"><code>ResultFolding</code></a> component uses this for its <strong>Show More</strong> link.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.expandexpression\"><code>expandExpression</code></a> and\n<a href=\"https://coveo.github.io/search-ui/components/folding.html#options.maximumexpandedresults\"><code>maximumExpandedResults</code></a> options.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "true"
		}
	},
	{
		"name": "FoldingForThread.options.expandExpression",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\"><code>enableExpand</code></a> option is <code>true</code>, specifies a custom constant\nexpression to send when querying the expanded results.\nDefault value is <code>undefined</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableExpand"
		}
	},
	{
		"name": "FoldingForThread.options.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the field on which to do the folding.\nSpecifying a value for this option is required for this component to work.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>In an Elasticsearch index, the corresponding field must be configured as a <em>Facet</em> field\n(see <a href=\"https://docs.coveo.com/en/1982/\">Add or Edit Fields</a>).\nThis limitation does not apply to Coveo indexes.</p>\n</blockquote>\n<p>Default value is <code>@foldingcollection</code>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "@foldingcollection"
		}
	},
	{
		"name": "FoldingForThread.options.getMoreResults",
		"notSupportedIn": "",
		"comment": "<p>Specifies the function that manages the folding of all results.\nDefault value is:</p>\n<pre><code class=\"lang-javascript\">Coveo.Folding.defaultGetMoreResults = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">results</span>) </span>{\n   <span class=\"hljs-comment\">// The results are flat, just do the folding.</span>\n   <span class=\"hljs-keyword\">return</span> Coveo.Folding.foldWithParent(results);\n}\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.options.getResult",
		"notSupportedIn": "",
		"comment": "<p>Specifies the function that manages the individual folding of each result.\nDefault value is:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> results = result.childResults || [];\n<span class=\"hljs-comment\">// Add the top result at the top of the list.</span>\nresults.unshift(result);\n<span class=\"hljs-comment\">// Empty childResults just to clean it.</span>\nresult.childResults = [];\n<span class=\"hljs-comment\">// Fold those results.</span>\nresults = Coveo.Folding.foldWithParent(results);\n<span class=\"hljs-comment\">// The first result is the top one.</span>\n<span class=\"hljs-keyword\">var</span> topResult = results.shift();\n<span class=\"hljs-comment\">// All other results are childResults.</span>\ntopResult.childResults = results;\n<span class=\"hljs-keyword\">return</span> topResult;\n</code></pre>\n<p>You can pre-process all the result with this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\"><code>init</code></a> call of your search interface:</p>\n<pre><code class=\"lang-javascript\">Coveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">Folding</span>: {\n     <span class=\"hljs-attr\">getResult</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n       result = Coveo.Folding.defaultGetResult(result);\n       <span class=\"hljs-comment\">// Your code here</span>\n     }\n   }\n})\n</code></pre>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.options.maximumExpandedResults",
		"notSupportedIn": "",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\"><code>enableExpand</code></a> option is <code>true</code>, specifies the maximum number of\nresults to load when expanding.\nDefault value is <code>100</code>. Minimum value is <code>1</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"depend": "enableExpand",
			"min": "1",
			"defaultValue": "100"
		}
	},
	{
		"name": "FoldingForThread.options.parent",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field that determines whether a certain result is a top result containing other child results.\n<strong>Note:</strong></p>\n<blockquote>\n<p>In the index, the values of the corresponding field must:</p>\n<ul>\n<li>Contain alphanumerical characters only.</li>\n<li>Contain no more than 60 characters.</li>\n</ul>\n</blockquote>\n<p>Default value is <code>@foldingparent</code>.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {
			"defaultValue": "@foldingparent"
		}
	},
	{
		"name": "FoldingForThread.options.parentField",
		"notSupportedIn": "",
		"comment": "<p>This option is deprecated. Instead, use the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.child\">Folding.options.child</a> option.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.options.range",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum number of child results to fold.\n<strong>Example:</strong></p>\n<blockquote>\n<p>For an email thread with a total of 20 messages, using the default value of <code>2</code> means that the component loads\nup to a maximum of 2 child messages under the original message, unless the end user expands the entire\nconversation using the <strong>Show More</strong> link (see the <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\"><code>enableExpand</code></a>\noption).</p>\n</blockquote>\n<p>Default value is <code>2</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {
			"min": "0",
			"defaultValue": "2"
		}
	},
	{
		"name": "FoldingForThread.options.rearrange",
		"notSupportedIn": "",
		"comment": "<p>Specifies the sort criteria to apply to the top result and its child results (e.g., <code>date ascending</code>,\n<code>@myfield descending</code>, etc.). See <a href=\"https://docs.coveo.com/en/1461/#RestQueryParameters-sortCriteria\">sortCriteria</a>.\nThis option works from the results returned by the index. This means that if only the three most relevant folded results are returned by the index\nand you choose to rearrange the folded results by date, then the three most relevant results will be rearranged by date,\nmeaning that the first folded result is not necessarily the oldest or newest item.</p>\n<p>However, since clicking on the <code>Show More</code> button triggers a new query, you would receive new results based on the sort criteria of this option.</p>\n<p><strong>Example</strong></p>\n<blockquote>\n<p>If you are folding email results by conversation and you specify <code>date descending</code> as the <code>rearrange</code> value of\nthe <code>Folding</code> component, the component re-arranges email conversations so that the newest email is always the\ntop result. Specifying <code>date ascending</code> instead always makes the original email the top result, as it is also\nnecessarily the oldest.</p>\n</blockquote>\n<p>By default, the component displays the results in the order that the index returns them.</p>\n",
		"type": "SortCriteria",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FoldingForThread.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>FoldingForThread</code> component</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FormGroup",
		"notSupportedIn": "",
		"comment": "<p>A simple <code>fieldset</code> HTMLElement containing multiple form widgets.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "FormGroup.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>FormGroup</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "GoogleApiPositionProvider",
		"notSupportedIn": "",
		"comment": "<p>The <code>GoogleApiPositionProvider</code> class uses the\n<a href=\"https://developers.google.com/maps/documentation/geolocation/intro\">Google Maps Geolocation API</a> to provide the\nposition of the end user to a <a href=\"https://coveo.github.io/search-ui/components/distanceresources.html\"><code>DistanceResources</code></a> component whose\n<a href=\"https://coveo.github.io/search-ui/components/distanceresources.html#options.googleapikey\"><code>googleApiKey</code></a> option is set to a valid  Google Maps Geolocation API\nkey.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HistoryController",
		"notSupportedIn": "",
		"comment": "<p>This component is instantiated automatically by the framework on the root if the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/>\nWhen the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enablehistory\">SearchInterface.options.enableHistory</a> option is set to true, this component is instantiated.<br/>\nIt&#39;s only job is to apply changes in the <a href=\"https://coveo.github.io/search-ui/classes/querystatemodel.html\">QueryStateModel</a> to the hash in the URL, and vice versa.<br/>\nThis component does <em>not</em> hold the state of the interface, it only represent it in the URL.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HistoryController.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HistoryController.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HistoryController.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "HistoryController.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new HistoryController</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Initialization",
		"notSupportedIn": "",
		"comment": "<p>The main purpose of this class is to initialize the framework (a.k.a the code executed when calling <code>Coveo.init</code>).<br/>\nIt&#39;s also in charge or registering the available components, as well as the method that we expost to the global Coveo scope.<br/>\nFor example, the <code>Coveo.executeQuery</code> function will be registed in this class by the <a href=\"https://coveo.github.io/search-ui/classes/querycontroller.html\">QueryController</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "InitializationEvents",
		"notSupportedIn": "",
		"comment": "<p>This static class is there to contain the different string definitions for all the events related to initialization.\nNote that these events will only be triggered when the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> function is called.</p>\n<p>This means these events are normally called only once when the search interface is initialized.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "InitializationEvents.afterComponentsInitialization",
		"notSupportedIn": "",
		"comment": "<p>Triggered after the components are initialized (eg: After the constructor of each component is executed)\nbut before their state is set from the hash portion of the URL (e.g., <code>http://mysearchinterface#q=myQuery</code>).\nThis is also before the first query is launched (if the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.autotriggerquery\">SearchInterface.options.autoTriggerQuery</a> is <code>true</code>).</p>\n<p>The string value is <code>afterComponentsInitialization</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "InitializationEvents.afterInitialization",
		"notSupportedIn": "",
		"comment": "<p>Triggered right after the UI is fully initialized.\nConcretely this means that the constructor of each component has been executed, and that the state coming for the URL (e.g., <code>http://mysearchinterface#q=myquery</code>) has been applied.</p>\n<p>It is triggered <em>before</em> the first query is launched, and if the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.autotriggerquery\">SearchInterface.options.autoTriggerQuery</a> is <code>true</code>.</p>\n<p>The string value is <code>afterInitialization</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "InitializationEvents.beforeInitialization",
		"notSupportedIn": "",
		"comment": "<p>This event is triggered right before each components inside the search interface get initialized (eg: Before the constructor of each component is executed).\nThe string value is <code>beforeInitialization</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "InitializationEvents.nuke",
		"notSupportedIn": "",
		"comment": "<p>This is triggered when the UI needs to be dynamically removed so that components can unbind any internal handlers they might have set globally on the window or the document.\nAfter this event has been executed, the search interface can be dynamically removed and all handlers can be considered cleanly removed.</p>\n<p>The string value is <code>nuke</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "InitializationEvents.restoreHistoryState",
		"notSupportedIn": "",
		"comment": "<p>Triggered right before the state from the URL (e.g., <code>http://mysearchinterface#q=myQuery</code>) gets applied in the interface.\nThis will typically only be useful if the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enablehistory\">SearchInterface.options.enableHistory</a> is set to <code>true</code>.</p>\n<p>The string value is <code>restoreHistoryState</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "LocalStorageHistoryController",
		"notSupportedIn": "",
		"comment": "<p>This component acts like the <a href=\"https://coveo.github.io/search-ui/classes/historycontroller.html\">HistoryController</a> excepts that is saves the <a href=\"https://coveo.github.io/search-ui/classes/querystatemodel.html\">QueryStateModel</a> in the local storage.<br/>\nThis will not allow &#39;back&#39; and &#39;forward&#39; navigation in the history, like the standard <a href=\"https://coveo.github.io/search-ui/classes/historycontroller.html\">HistoryController</a> allows. Instead, it load the query state only on page load.<br/>\nTo enable this component, you should set the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.uselocalstorageforhistory\">SearchInterface.options.useLocalStorageForHistory</a> as well as the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enablehistory\">SearchInterface.options.enableHistory</a> options to true.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "LocalStorageHistoryController.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "LocalStorageHistoryController.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "LocalStorageHistoryController.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "LocalStorageHistoryController.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new LocalStorageHistoryController instance</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Model",
		"notSupportedIn": "",
		"comment": "<p>A <em>model</em> is a key-value store that triggers various JavaScript events when any value associated to one of its key changes.<br/>\nThis class is meant to be extended, one of the most important extension being the <a href=\"https://coveo.github.io/search-ui/classes/querystatemodel.html\">QueryStateModel</a> class.<br/>\nComponents set values in this key-value store and listen to triggered events in order to update themselves accordingly.<br/></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Model.attributes",
		"notSupportedIn": "",
		"comment": "<p>The attributes contained in this model.</br>\nNormally, you should not set attributes directly on this property, as this would prevent required events from being triggered.</p>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Model.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Model.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Model.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Model.eventTypes",
		"notSupportedIn": "",
		"comment": "<p>The event types that can be triggered:<br/>\n• <code>preprocess</code>: triggered before a value is set on an attribute. This allows the value to be modified before it is set.<br/>\n• <code>changeOne</code>: triggered when a single value changes.</br>\n• <code>change</code>: triggered when one or many values change.</br>\n• <code>reset</code>: triggered when all attributes are reset to their default values. </br>\n• <code>all</code>: triggered after the <code>change</code> event.</br></p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MultiSelect",
		"notSupportedIn": "",
		"comment": "<p>A multi select widget with standard styling.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "MultiSelect.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>MultiSelect</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "NavigatorPositionProvider",
		"notSupportedIn": "",
		"comment": "<p>The <code>NavigatorPositionProvider</code> class uses the current web browser to provide the position of the end user to\na <a href=\"https://coveo.github.io/search-ui/components/distanceresources.html\"><code>DistanceResources</code></a> component whose\n[<code>useNavigator</code>]{DistanceResources.options.useNavigator} option is set to <code>true</code>.\n<strong>Note:</strong></p>\n<blockquote>\n<p>Recent web browsers typically require a site to be in HTTPS to enable their geolocation service.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "NumericSpinner",
		"notSupportedIn": "",
		"comment": "<p>A numeric spinner widget with standard styling.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "NumericSpinner.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>NumericSpinner</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxEvents",
		"notSupportedIn": "",
		"comment": "<p>The <code>OmniboxEvents</code> static class contains the string definitions of all events that strongly relate to the\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxEvents.buildingQuerySuggest",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component before sending a query suggestion request to the Search API.\nAllows external functions to refine the payload b3efore sending the request.</p>\n<p>This event is only triggered by standard ML-powered query suggestions, and not <a href=\"https://coveo.github.io/search-ui/components/analyticssuggestions.html\">AnalyticsSuggestions</a> or <a href=\"https://coveo.github.io/search-ui/components/fieldsuggestions.html\">FieldSuggestions</a>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxEvents.populateOmniboxSuggestions",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component before query completion suggestions are rendered.\nThe out-of-the-box Coveo JavaScript Search Framework query completion suggestion addons (see the\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablefieldaddon\"><code>enableFieldAddon</code></a>,\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablequeryextensionaddon\"><code>enableQueryExtensionAddon</code></a>, and\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablequerysuggestaddon\"><code>enableQuerySuggestAddon</code></a> options of the <code>Omnibox</code>) push their\nrespective suggestions in the argument object which is passed along with this event.</p>\n<p>All <code>populateOmniboxSuggestions</code> event handlers receive a\n<a href=\"https://coveo.github.io/search-ui/interfaces/ipopulateomniboxsuggestionseventargs.html\"><code>PopulateOmniboxSuggestionsEventArgs</code></a> object as an argument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxEvents.querySuggestGetFocus",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component when a query suggestion gets focus following a mouse hovering or keyboard navigation event.\nAll <code>querySuggestGetFocus</code> event handlers receive an object implementing the <a href=\"https://coveo.github.io/search-ui/interfaces/iquerysuggestselection.html\"><code>IQuerySuggestSelection</code></a> interface as an argument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxEvents.querySuggestLoseFocus",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component when a query suggestion loses focus following a mouse hovering or keyboard navigation event.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxEvents.querySuggestRendered",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component when a query suggestion has finished rendering.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxEvents.querySuggestSelection",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component when a query suggestion is selected by a mouse click or pressing the enter key.\nAll <code>querySuggestSelection</code> event handlers receive an object implementing the <a href=\"https://coveo.github.io/search-ui/interfaces/iquerysuggestselection.html\"><code>IQuerySuggestSelection</code></a> interface as an argument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "OmniboxEvents.querySuggestSuccess",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component when query suggestions are received from the Search API.\nAllows external functions to look into the received query suggestions, and modify them if needed.</p>\n<p>This event is only triggered by standard ML-powered query suggestions, and not <a href=\"https://coveo.github.io/search-ui/components/analyticssuggestions.html\">AnalyticsSuggestions</a> or <a href=\"https://coveo.github.io/search-ui/components/fieldsuggestions.html\">FieldSuggestions</a>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "PublicPathUtils",
		"notSupportedIn": "",
		"comment": "<p>Set of utilities to determine where to load the lazy chunks from.\nYou should add the <code>coveo-script</code> class on the script tag that includes the Coveo framework to make sure the framework can always\nauto-detect the path to load the lazy chunks from. More details here\">https://docs.coveo.com/en/295/javascript-search-framework/lazy-versus-eager-component-loading#fixing-code-chunks-loading-path-issues}</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder",
		"notSupportedIn": "",
		"comment": "<p>The QueryBuilder is used to build a <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html\">IQuery</a> that will be able to be executed using the Search API.\nThe class exposes several members and methods that help components and external code to build up the final query that is sent to the Search API.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.actionsHistory",
		"notSupportedIn": "",
		"comment": "<p>The actions history represents the past actions a user made and is used by the Coveo Machine Learning service to suggest recommendations.\nIt is generated by the page view script (<a href=\"https://github.com/coveo/coveo.analytics.js)\">https://github.com/coveo/coveo.analytics.js)</a>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.advancedExpression",
		"notSupportedIn": "",
		"comment": "<p>Used to build the advanced part of the query expression.\nThis part is typically formed of filter expressions generated by components such as facets, external code, etc.</p>\n",
		"type": "ExpressionBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.allowQueriesWithoutKeywords",
		"notSupportedIn": "",
		"comment": "<p>Specifies if the Search API should perform queries even when no keywords were entered by the end user.\nEnd user keywords are present in either the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#q\">IQuery.q</a> or <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#lq\">IQuery.lq</a> part of the query.</p>\n<p>This parameter is normally controlled by SearchInterface.options.allowEmptyQuery option.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.categoryFacets",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of request for the CategoryFacet component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.childField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the childField when doing parent-child loading (See: <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.commerce",
		"notSupportedIn": "",
		"comment": "<p>A request for a commerce query.</p>\n",
		"type": "ICommerceRequest",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.constantExpression",
		"notSupportedIn": "",
		"comment": "<p>Used to build the advanced part of the query expression.\nThis part is similar to <code>advancedExpression</code>, but its content is interpreted as a constant expression by the index and it takes advantage of special caching features.</p>\n",
		"type": "ExpressionBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.context",
		"notSupportedIn": "",
		"comment": "<p>The custom context information to send along with the query. Each value should be a string or an array of strings.\nCustom context information can influence the output of Coveo Machine Learning models and can also be used in query pipeline conditions.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.disjunctionExpression",
		"notSupportedIn": "",
		"comment": "<p>Used to build the disjunctive part of the query expression.\nWhen present, this part is evaluated separately from the other expressions and the matching results are merged to those matching expressions, <code>advancedExpression</code> and <code>constantExpression</code>.</p>\n<p>The final boolean expression for the query is thus (basic advanced constant) OR (disjunction).</p>\n",
		"type": "ExpressionBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.enableCollaborativeRating",
		"notSupportedIn": "",
		"comment": "<p><strong>Note:</strong></p>\n<blockquote>\n<p>The Coveo Cloud V2 platform does not support collaborative rating. Therefore, this property is obsolete in Coveo Cloud V2.</p>\n</blockquote>\n<p>Whether the index should take collaborative rating in account when ranking result (See: <a href=\"https://coveo.github.io/search-ui/components/resultrating.html\">ResultRating</a>).</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.enableDebug",
		"notSupportedIn": "",
		"comment": "<p>Whether to enable debug info on the query.\nThis will return additional information on the resulting JSON response from the Search API.</p>\n<p>Mostly: execution report (a detailed breakdown of the parsed and executed query).</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.enableDidYouMean",
		"notSupportedIn": "",
		"comment": "<p>Whether to enable query corrections on this query (see <a href=\"https://coveo.github.io/search-ui/components/didyoumean.html\">DidYouMean</a>).</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.enableLowercaseOperators",
		"notSupportedIn": "",
		"comment": "<p>Whether to interpret the <code>AND</code>, <code>NOT</code>, <code>OR</code>, and <code>NEAR</code> keywords in the basic\n<a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#expression\"><code>expression</code></a> as query operators, even if those keywords are in lowercase.\nSetting this attribute to <code>true</code> has no effect unless <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#enablequerysyntax\"><code>enableQuerySyntax</code></a>\nis also <code>true</code>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Normally, the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablelowercaseoperators\"><code>enableLowercaseOperators</code></a> option of the\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a> component determines the value of this attribute during the initialization of the\nsearch page.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.enablePartialMatch",
		"notSupportedIn": "",
		"comment": "<p>Whether to automatically convert the basic <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#expression\"><code>expression</code></a> to a partial match\nexpression if it contains at least a certain number of keywords (see\n<a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#partialmatchkeywords\"><code>partialMatchKeywords</code></a>), so that items containing at least a certain\nsubset of those keywords (see <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#partialmatchthreshold\"><code>partialMatchThreshold</code></a>) will match the\nquery.\n<strong>Note:</strong></p>\n<blockquote>\n<p>Normally, the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablepartialmatch\"><code>enablePartialMatch</code></a> option of the\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a> component determines the value of this attribute during the initialization of the\nsearch page.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.enableQuerySyntax",
		"notSupportedIn": "",
		"comment": "<p>Whether to interpret special query syntax (e.g., <code>@objecttype=message</code>) in the basic\n<a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#expression\"><code>expression</code></a> (see\n<a href=\"https://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>).\nSee also <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#enablelowercaseoperators\"><code>enableLowercaseOperators</code></a>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Normally, the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\"><code>enableQuerySyntax</code></a> option of the\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a> component determines the value of this attribute during the initialization of the\nsearch page. End user preferences can also modify the value of this attribute.</p>\n</blockquote>\n<p>Default value is <code>false</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.enableQuestionMarks",
		"notSupportedIn": "",
		"comment": "<p>Whether to interpret question mark characters (<code>?</code>) in the basic <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#expression\"><code>expression</code></a>\nkeywords (see <a href=\"https://docs.coveo.com/en/1580/\">Using Wildcards in Queries</a>.\nSetting this attribute to <code>true</code> has no effect unless <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#enablewildcards\"><code>enableWildcards</code></a> is\nalso <code>true</code>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Normally, the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequestionmarks\"><code>enableQuestionMarks</code></a> option of the\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a> component determines the value of this attribute during the initialization of the\nsearch page.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.enableWildcards",
		"notSupportedIn": "",
		"comment": "<p>Whether to interpret wildcard characters (<code>*</code>) in the basic <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#expression\"><code>expression</code></a> keywords.\nSetting this attribute to <code>true</code> enables the wildcards features of the index, effectively expanding keywords\ncontaining wildcard characters (<code>*</code>) to the possible matching keywords in order to broaden the query (see\n<a href=\"https://docs.coveo.com/en/1580/\">Using Wildcards in Queries</a>).</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#enablequestionmarks\"><code>enableQuestionMarks</code></a>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Normally, the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablewildcards\"><code>enableWildcards</code></a> option of the\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a> component determines the value of this attribute during the initialization of the\nsearch page.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.excerptLength",
		"notSupportedIn": "",
		"comment": "<p>Specifies the length (in number of characters) of the excerpts generated by the indexer based on the keywords present in the query.\nThe index includes the top most interesting sentences (in the order they appear in the item) that fit in the specified number of characters.</p>\n<p>When not specified, the default value is 200.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.expression",
		"notSupportedIn": "",
		"comment": "<p>Used to build the basic part of the query expression.\nThis part typically consists of user-entered content such as query keywords, etc.</p>\n",
		"type": "ExpressionBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.facetOptions",
		"notSupportedIn": "",
		"comment": "<p>The global configuration options to apply to the requests in the facets array.</p>\n",
		"type": "IFacetOptions",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.facetRequests",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of request for the DynamicFacet component.\nCannot be used alongside <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#groupbyrequests\"><code>groupByRequests</code></a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.filterField",
		"notSupportedIn": "",
		"comment": "<p>Specifies a field on which <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> should be performed.\nFolding is a kind of duplicate filtering where only the first result with any given value of the field is included in the result set.</p>\n<p>It&#39;s typically used to return only one result in a conversation, for example when forum posts in a thread are indexed as separate items.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.filterFieldRange",
		"notSupportedIn": "",
		"comment": "<p>Number of results that should be folded, using the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#filterfield\">IQuery.filterField</a>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.firstResult",
		"notSupportedIn": "",
		"comment": "<p>This is the 0-based index of the first result to return.\nIf not specified, this parameter defaults to 0.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.groupByRequests",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of Group By operations that can be performed on the query results to extract facets.\nCannot be used alongside <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#facetrequests\"><code>facetRequests</code></a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.longQueryExpression",
		"notSupportedIn": "",
		"comment": "<p>The contextual text.\nThis is the contextual text part of the query. It uses the Coveo Machine Learning service to pick key keywords from the text and add them to the basic expression.\nThis field is mainly used to pass context such a case description, long textual query or any other form of text that might help in\nrefining the query.</p>\n",
		"type": "ExpressionBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.maximumAge",
		"notSupportedIn": "",
		"comment": "<p>The maximum age for cached query results, in milliseconds.\nIf results for the exact same request (including user identities) are available in the in-memory cache, they will be used if they are not older than the specified value.</p>\n<p>Otherwise, the query will be sent to the index.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.numberOfResults",
		"notSupportedIn": "",
		"comment": "<p>This is the number of results to return, starting from <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#firstresult\">IQuery.firstResult</a>.\nIf not specified, this parameter defaults to 10.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.parentField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the <code>parentField</code> when doing parent-child loading (See: <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.partialMatchKeywords",
		"notSupportedIn": "",
		"comment": "<p>The minimum number of keywords that need to be present in the basic <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#expression\"><code>expression</code></a>\nto convert it to a partial match expression.\nThe value of this attribute has no meaning unless <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#enablepartialmatch\"><code>enablePartialMatch</code></a> is\n<code>true</code>.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#partialmatchthreshold\"><code>partialMatchThreshold</code></a>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Normally, the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchkeywords\"><code>partialMatchKeywords</code></a> option of the\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a> component determines the value of this attribute during the initialization of the\nsearch page.</p>\n</blockquote>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.partialMatchThreshold",
		"notSupportedIn": "",
		"comment": "<p>An absolute or relative (percentage) value indicating the minimum number of partial match expression keywords an\nitem must contain to match the query.\nThe value of this attribute has no meaning unless <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#enablepartialmatch\"><code>enablePartialMatch</code></a> is\n<code>true</code>.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#partialmatchkeywords\"><code>partialMatchKeywords</code></a>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Normally, the <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchthreshold\"><code>partialMatchThreshold</code></a> option of the\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html\"><code>Querybox</code></a> component determines the value of this attribute during the initialization of the\nsearch page.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.pipeline",
		"notSupportedIn": "",
		"comment": "<p>Name of the query pipeline to use.\nSpecifies the name of the query pipeline to use for the query. If not specified, the default value is default, which means the default query pipeline will be used.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.queryFunctions",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of Query Function operation that will be executed on the results.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.rankingFunctions",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of Ranking Function operations that will be executed on the results.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.recommendation",
		"notSupportedIn": "",
		"comment": "<p>This is the ID of the recommendation interface that generated the query.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.searchHub",
		"notSupportedIn": "",
		"comment": "<p>The hub value set from the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component.\nUsed for analytics reporting in the Coveo platform.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.sortCriteria",
		"notSupportedIn": "",
		"comment": "<p>Specifies the sort criterion(s) to use to sort results. If not specified, this parameter defaults to relevancy.\nPossible values are : <br/>\n-- relevancy :  This uses all the configured ranking weights as well as any specified ranking expressions to rank results.<br/>\n-- dateascending / datedescending Sort using the value of the <code>@date</code> field, which is typically the last modification date of an item in the index.<br/>\n-- qre : Sort using only the weights applied through ranking expressions. This is much like using <code>relevancy</code> except that automatic weights based on keyword proximity etc, are not computed.<br/>\n-- nosort : Do not sort the results. The order in which items are returned is essentially random.<br/>\n-- @field ascending / @field descending Sort using the value of a custom field.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.tab",
		"notSupportedIn": "",
		"comment": "<p>The tab value set from the <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryBuilder.userActions",
		"notSupportedIn": "",
		"comment": "<p>A request to retrieve user actions in the query response.</p>\n",
		"type": "IUserActionsRequest",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryController",
		"notSupportedIn": "",
		"comment": "<p>This class is automatically instantiated and bound to the root of your search interface when you initialize the framework.<br/>\nIt is essentially a singleton that wraps the access to the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a> endpoint to execute query, and is in charge of triggering the different query events.<br/>\nThis is what every component of the framework uses internally to execute query or access the endpoint.<br/>\nWhen calling <code>Coveo.executeQuery</code> this class is used.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryController.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryController.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryController.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryController.constructor",
		"notSupportedIn": "",
		"comment": "<p>Create a new query controller</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents",
		"notSupportedIn": "",
		"comment": "<p>This static class is there to contains the different string definition for all the events related to query.\nNote that these events will only be triggered when the <a href=\"https://coveo.github.io/search-ui/classes/querycontroller.html#executequery\">QueryController.executeQuery</a> method is used, either directly or by using <a href=\"https://coveo.github.io/search-ui/interfaces/ibuildingadvancedsearcheventargs.html#executequery\">executeQuery</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.buildingQuery",
		"notSupportedIn": "",
		"comment": "<p>Triggered when the query is being built.\nThis is typically where all components will contribute their part to the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html\">IQuery</a> using the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a>.</p>\n<p>All bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/ibuildingqueryeventargs.html\">IBuildingQueryEventArgs</a> as an argument.</p>\n<p>The string value is <code>buildingQuery</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.deferredQuerySuccess",
		"notSupportedIn": "",
		"comment": "<p>Triggered after the main query success event has finished executing.\nThis is typically where facets will process the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyresult.html\">IGroupByResult</a> and render themselves.</p>\n<p>All bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/iquerysuccesseventargs.html\">IQuerySuccessEventArgs</a> as an argument.</p>\n<p>The string value is <code>deferredQuerySuccess</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.doneBuildingQuery",
		"notSupportedIn": "",
		"comment": "<p>Triggered when the query is done being built.\nThis is typically where the facet will add it&#39;s <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> to the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html\">IQuery</a>.</p>\n<p>All bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/idonebuildingqueryeventargs.html\">IDoneBuildingQueryEventArgs</a> as an argument.</p>\n<p>The string value is <code>doneBuildingQuery</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.duringFetchMoreQuery",
		"notSupportedIn": "",
		"comment": "<p>Triggered when more results are being fetched on the Search API (think : infinite scrolling, or pager).\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/iduringqueryeventargs.html\">IDuringQueryEventArgs</a> as an argument.</p>\n<p>The string value is <code>duringFetchMoreQuery</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.duringQuery",
		"notSupportedIn": "",
		"comment": "<p>Triggered when the query is being executed on the Search API.\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/iduringqueryeventargs.html\">IDuringQueryEventArgs</a> as an argument.</p>\n<p>The string value is <code>duringQuery</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.fetchMoreSuccess",
		"notSupportedIn": "",
		"comment": "<p>Triggered when a more results were successfully returned from the Search API. (think : infinite scrolling, or pager).\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/ifetchmoresuccesseventargs.html\">IFetchMoreSuccessEventArgs</a> as an argument.</p>\n<p>The string value is <code>fetchMoreSuccess</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.newQuery",
		"notSupportedIn": "",
		"comment": "<p>Triggered when a new query is launched.\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/inewqueryeventargs.html\">INewQueryEventArgs</a> as an argument.</p>\n<p>The string value is <code>newQuery</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.noResults",
		"notSupportedIn": "",
		"comment": "<p>Triggered when there is no result for a particular query.\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/inoresultseventargs.html\">INoResultsEventArgs</a> as an argument.</p>\n<p>The string value is <code>noResults</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.preprocessMoreResults",
		"notSupportedIn": "",
		"comment": "<p>Triggered before the <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#fetchmoresuccess\">QueryEvents.fetchMoreSuccess</a> event.\nThis allows external code to modify the results before rendering them.</p>\n<p>For example, the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component might use this event to construct a coherent parent child relationship between query results.</p>\n<p>All bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/ipreprocessresultseventargs.html\">IPreprocessResultsEventArgs</a> as an argument.</p>\n<p>The string value is <code>preprocessMoreResults</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.preprocessResults",
		"notSupportedIn": "",
		"comment": "<p>Triggered before the <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a> event.\nThis allows external code to modify the results before rendering them.</p>\n<p>For example, the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component might use this event to construct a coherent parent child relationship between query results.</p>\n<p>All bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/ipreprocessresultseventargs.html\">IPreprocessResultsEventArgs</a> as an argument.</p>\n<p>The string value is <code>preprocessResults</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.queryError",
		"notSupportedIn": "",
		"comment": "<p>Triggered when there was an error executing a query on the Search API.\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/iqueryerroreventargs.html\">IQueryErrorEventArgs</a> as an argument.</p>\n<p>The string value is <code>queryError</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryEvents.querySuccess",
		"notSupportedIn": "",
		"comment": "<p>Triggered when a query successfully returns from the Search API.\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/iquerysuccesseventargs.html\">IQuerySuccessEventArgs</a> as an argument.</p>\n<p>The string value is <code>querySuccess</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryStateModel",
		"notSupportedIn": "",
		"comment": "<p>The <code>QueryStateModel</code> class is a key-value store which contains the current state of the components that can affect\nthe query (see <a href=\"https://docs.coveo.com/en/344/\">State</a>). This class inherits from the <a href=\"https://coveo.github.io/search-ui/classes/model.html\"><code>Model</code></a>\nclass. Optionally, it is possible to persist the state in the query string in order to enable browser history\nmanagement (see the <a href=\"https://coveo.github.io/search-ui/classes/historycontroller.html\"><code>HistoryController</code></a> class).\nComponents set values in the <code>QueryStateModel</code> instance to reflect their current state. The <code>QueryStateModel</code>\ntriggers state events (see <a href=\"https://coveo.github.io/search-ui/classes/model.html#eventtypes\"><code>eventTypes</code></a>) whenever one of its values is modified. Components\nlisten to triggered state events to update themselves when appropriate.</p>\n<p>For instance, when a query is triggered, the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\"><code>Searchbox</code></a> component sets the <code>q</code> attribute (the\nbasic query expression), while the <a href=\"https://coveo.github.io/search-ui/components/pager.html\"><code>Pager</code></a> component sets the <code>first</code> attribute (the index of the\nfirst result to display in the result list), and so on.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>The user modifies the content of the <code>Searchbox</code> and submits a query. This triggers the following state events:</p>\n<ul>\n<li><code>state:change:q</code> (because the value of <code>q</code> has changed).</li>\n<li><code>state:change</code> (because at least one value has changed in the <code>QueryStateModel</code>).</li>\n</ul>\n<p>Components or external code can attach handlers to those events:</p>\n<pre><code class=\"lang-javascript\">Coveo.$$(<span class=\"hljs-built_in\">document</span>).on(<span class=\"hljs-string\">'state:change:q'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  [ ... ]\n});\n</code></pre>\n</blockquote>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Normally, you should interact with the <code>QueryStateModel</code> instance using the <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequestvalue.html#state\"><code>Coveo.state</code></a> top-level\nfunction.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryStateModel.attributes",
		"notSupportedIn": "",
		"comment": "<p>The attributes contained in this model.</br>\nNormally, you should not set attributes directly on this property, as this would prevent required events from being triggered.</p>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryStateModel.disabled",
		"notSupportedIn": "",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryStateModel.logger",
		"notSupportedIn": "",
		"comment": "<p>Allows component to log in the dev console.</p>\n",
		"type": "Logger",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryStateModel.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryStateModel.eventTypes",
		"notSupportedIn": "",
		"comment": "<p>The event types that can be triggered:<br/>\n• <code>preprocess</code>: triggered before a value is set on an attribute. This allows the value to be modified before it is set.<br/>\n• <code>changeOne</code>: triggered when a single value changes.</br>\n• <code>change</code>: triggered when one or many values change.</br>\n• <code>reset</code>: triggered when all attributes are reset to their default values. </br>\n• <code>all</code>: triggered after the <code>change</code> event.</br></p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QueryStateModel.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>QueryStateModel</code> instance.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummaryEvents",
		"notSupportedIn": "",
		"comment": "<p>This static class is there to contains the different string definition for all the events related to the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuerySummaryEvents.cancelLastAction",
		"notSupportedIn": "",
		"comment": "<p>Triggered when the last action is being cancelled by the query summary component\nAllows external code to revert their last action.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewEvents",
		"notSupportedIn": "",
		"comment": "<p>The <code>QuickviewEvents</code> static class contains the string definitions of all events that strongly relate to the\n<a href=\"https://coveo.github.io/search-ui/components/quickview.html\"><code>Quickview</code></a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewEvents.openQuickview",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <a href=\"https://coveo.github.io/search-ui/components/quickviewdocument.html\"><code>QuickviewDocument</code></a> component when the end user has just clicked the\n<strong>Quickview</strong> button/link to open the quickview modal window.\nThis event allows external code to modify the terms to highlight before the content of the quickview modal window\nis rendered.</p>\n<p>All <code>openQuickview</code> event handlers receive an\n<code>OpenQuickviewEventArgs</code> object as an argument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "QuickviewEvents.quickviewLoaded",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <a href=\"https://coveo.github.io/search-ui/components/quickviewdocument.html\"><code>QuickviewDocument</code></a> component when the content to display in the\nquickview modal window has just finished downloading.\nThe <a href=\"https://coveo.github.io/search-ui/components/quickview.html\"><code>Quickview</code></a> component listens to this event to know when to remove its loading animation.</p>\n<p>All <code>quickviewLoaded</code> event handlers receive a <a href=\"https://coveo.github.io/search-ui/interfaces/iquickviewloadedeventargs.html\"><code>QuickviewLoadedEventArgs</code></a> object\nas an argument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "RadioButton",
		"notSupportedIn": "",
		"comment": "<p>A radio button widget with standard styling.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "RadioButton.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>RadioButton</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResponsiveComponents",
		"notSupportedIn": "",
		"comment": "<p>This class serves as a way to get and set the different screen size breakpoints for the interface.\nBy setting those, you can impact, amongst others, the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a>&#39;s, <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a>&#39;s or the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a>&#39;s behaviour.</p>\n<p>For example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> components of your interface will switch to a dropdown menu when the screen size reaches 800px or less.</p>\n<p>You could modify this value using <code>this</code> calls</p>\n<p>Normally, you would interact with this class using the instance bound to <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#responsivecomponents\">SearchInterface.responsiveComponents</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultListEvents",
		"notSupportedIn": "",
		"comment": "<p>The <code>ResultListEvents</code> static class contains the string definitions of all events that strongly relate to the result\nlist.\nSee <a href=\"https://docs.coveo.com/en/417/\">Events</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultListEvents.changeLayout",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <code>ResultLayout</code> component whenever the current result layout changes (see\n<a href=\"https://docs.coveo.com/en/360/\">Result Layouts</a>).\nAll <code>changeLayout</code> event handlers receive a <a href=\"https://coveo.github.io/search-ui/interfaces/ichangelayouteventargs.html\"><code>ChangeLayoutEventArgs</code></a> object as an\nargument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultListEvents.newResultDisplayed",
		"notSupportedIn": "",
		"comment": "<p>Triggered each time the result list has just finished rendering a single result.\nAll <code>newResultDisplayed</code> event handlers receive a\n<a href=\"https://coveo.github.io/search-ui/interfaces/idisplayednewresulteventargs.html\"><code>DisplayedNewResultEventArgs</code></a> object as an argument.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultListEvents.newResultsDisplayed",
		"notSupportedIn": "",
		"comment": "<p>Triggered when the result list has just finished rendering the current page of results.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultListEvents.openQuickview",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\"><code>ResultLink</code></a> result template component when its\n<a href=\"https://coveo.github.io/search-ui/components/resultlink.html#options.openquickview\"><code>openQuickview</code></a> option is set to <code>true</code> and the end user clicks the\nresult link. The <a href=\"https://coveo.github.io/search-ui/components/quickview.html\"><code>Quickview</code></a> component listens to this event to be able to open the quickview\nmodal window in reaction.\nSee also the <a href=\"https://coveo.github.io/search-ui/classes/quickviewevents.html#openquickview\"><code>openQuickview</code></a> event (which is identical to this one, except\nthat it is triggered by the [<code>QuickviewDocument</code>] result template component instead).</p>\n<p>All <code>openQuickview</code> event handlers receive an <a href=\"https://coveo.github.io/search-ui/interfaces/iopenquickvieweventargs.html\"><code>OpenQuickviewEventArgs</code></a> object as\nan argument</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultPreviewsManagerEvents",
		"notSupportedIn": "",
		"comment": "<p>Those are the string definitions of events for ResultPreviewsManager.\nThose events should be bound to the element returned by <code>resolveRoot</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultPreviewsManagerEvents.populateSearchResultPreviews",
		"notSupportedIn": "",
		"comment": "<p>Executed when a Suggestion is focused and waiting for search result previews.\nThis always receives <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulatesearchresultpreviewseventargs.html\">IPopulateSearchResultPreviewsEventArgs</a> as arguments.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResultPreviewsManagerEvents.updateResultPreviewsManagerOptions",
		"notSupportedIn": "",
		"comment": "<p>Executed when a Suggestion is focused before PopulateSearchResultPreviews is called to fetch more options.\nThis always receives <a href=\"https://coveo.github.io/search-ui/interfaces/iupdateresultpreviewsmanageroptionseventargs.html\">IUpdateResultPreviewsManagerOptionsEventArgs</a> as arguments.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchEndpoint",
		"notSupportedIn": "",
		"comment": "<p>The <code>SearchEndpoint</code> class allows the framework to perform HTTP requests against the Search API (e.g., searching, getting query suggestions, getting the HTML preview of an item, etc.).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchEndpoint.endpoints",
		"notSupportedIn": "",
		"comment": "<p>A map of all initialized <code>SearchEndpoint</code> instances.\n<strong>Example:</strong> <code>Coveo.SearchEndpoint.endpoints[&quot;default&quot;]</code> returns the default endpoint that was created at initialization.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "SearchEndpoint.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>SearchEndpoint</code> instance.\nUses a set of adequate default options, and merges these with the <code>options</code> parameter.\nAlso creates an <a href=\"https://coveo.github.io/search-ui/classes/endpointcaller.html\"><code>EndpointCaller</code></a> instance and uses it to communicate with the endpoint\ninternally.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StandaloneSearchInterfaceEvents",
		"notSupportedIn": "",
		"comment": "<p>The <code>StandaloneSearchInterfaceEvents</code> static class contains the string definitions of all events that strongly relate to the standalone search interface.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StandaloneSearchInterfaceEvents.beforeRedirect",
		"notSupportedIn": "",
		"comment": "<p>Triggered by the <code>StandaloneSearchBox</code> component during initialization, just before redirecting to the full search page.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "StaticPositionProvider",
		"notSupportedIn": "",
		"comment": "<p>The <code>StaticPositionProvider</code> class provides a static end user position to a\n<a href=\"https://coveo.github.io/search-ui/components/distanceresources.html\"><code>DistanceResources</code></a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateCache",
		"notSupportedIn": "",
		"comment": "<p>Holds a reference to all template available in the framework</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TemplateHelpers",
		"notSupportedIn": "",
		"comment": "<p>Allow to register and return template helpers (essentially: Utility functions that can be executed in the context of a template to render complex elements).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TextInput",
		"notSupportedIn": "",
		"comment": "<p>A text input widget with standard styling.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "TextInput.constructor",
		"notSupportedIn": "",
		"comment": "<p>Creates a new <code>TextInput</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAdvancedSearchSection",
		"notSupportedIn": "",
		"comment": "<p>Describe a section in the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAdvancedSearchSection.inputs",
		"notSupportedIn": "",
		"comment": "<p>The array of inputs to populate.\nExternal code should only push inputs that match the type <a href=\"https://coveo.github.io/search-ui/globals.html#baseformtypes\">BaseFormTypes</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAdvancedSearchSection.name",
		"notSupportedIn": "",
		"comment": "<p>The name of the section.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsActionCause",
		"notSupportedIn": "",
		"comment": "<p>The IAnalyticsActionCause interface describes the cause of an event for the analytics service.\nSee the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsActionCause.name",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of the event. While you can actually set this property to any arbitrary string value, its value\nshould uniquely identify the precise action that triggers the event. Thus, each individual event should have its\nown unique <code>name</code> value.\nExample: <code>searchBoxSubmit</code>, <code>resultSort</code>, etc.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsActionCause.type",
		"notSupportedIn": "",
		"comment": "<p>Specifies the type of the event. While you can actually set this property to any arbitrary string value, it should\ndescribe the general category of the event. Thus, more than one event can have the same <code>type</code> value, which makes\nit possible to group events with identical types when doing reporting.\nExample: All search box related events could have <code>searchbox</code> as their <code>type</code> value.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsClickQuerySuggestPreviewMeta",
		"notSupportedIn": "",
		"comment": "<p>Describes the object sent as metadata along with <code>clickQuerySuggestPreview</code> usage analytics events.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsClickQuerySuggestPreviewMeta.displayedRank",
		"notSupportedIn": "",
		"comment": "<p>The 0-based position of the preview item that was opened.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsClickQuerySuggestPreviewMeta.suggestion",
		"notSupportedIn": "",
		"comment": "<p>The query suggestion for which a preview item was opened.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsClient",
		"notSupportedIn": "",
		"comment": "<p>The <code>IAnalyticsClient</code> interface describes an analytics client that can log events to, or return information from the\nusage analytics service.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsDocumentViewEventArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IAnalyticsDocumentViewEventArgs</code> interface describes the object that all\n<a href=\"https://coveo.github.io/search-ui/classes/analyticsevents.html#documentviewevent\"><code>documentViewEvent</code></a> handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsDocumentViewEventArgs.documentViewEvent",
		"notSupportedIn": "",
		"comment": "<p>The data to send in the request body of the Usage Analytics Write REST API call that logs the <code>click</code> event.</p>\n",
		"type": "IAPIDocumentViewEvent",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsDocumentViewMeta",
		"notSupportedIn": "",
		"comment": "<p>The <code>IAnalyticsDocumentViewMeta</code> interface describes the expected metadata when logging a click event / item view.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component, and more specifically its\n<a href=\"https://coveo.github.io/search-ui/components/analytics.html#logclickevent\"><code>logClickEvent</code></a> method.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsDocumentViewMeta.author",
		"notSupportedIn": "",
		"comment": "<p>The author of the clicked item.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsDocumentViewMeta.documentTitle",
		"notSupportedIn": "",
		"comment": "<p>The title of the clicked item.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsDocumentViewMeta.documentURL",
		"notSupportedIn": "",
		"comment": "<p>The URL of the clicked item.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent",
		"notSupportedIn": "",
		"comment": "<p>The common subset of fields used to describe Coveo Cloud usage analytics <a href=\"https://coveo.github.io/search-ui/interfaces/isearchevent.html\"><em>search</em></a>, <a href=\"@link IClickEvent\"><em>click</em></a>, and <a href=\"@link ICustomEvent\"><em>custom</em></a> events.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.actionCause",
		"notSupportedIn": "",
		"comment": "<p>A unique name describing the action that triggered the event.\nSee the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#name\"><code>name</code></a> property of the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\"><code>IAnalyticsActionCause</code></a> interface.</p>\n<p><strong>Example:</strong> <code>pagerNext</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.actionType",
		"notSupportedIn": "",
		"comment": "<p>A name describing the category of actions to which the action that triggered the event belongs.\nSee the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#type\"><code>type</code></a> property of the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\"><code>IAnalyticsActionCause</code></a> interface.</p>\n<p><strong>Example:</strong> <code>getMoreResults</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.anonymous",
		"notSupportedIn": "",
		"comment": "<p>Whether the event should be logged anonymously to the Coveo Cloud usage analytics service.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.anonymous\"><code>anonymous</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.customData",
		"notSupportedIn": "",
		"comment": "<p>Additional metadata to send along with the event.\n<strong>Note:</strong> This field may include custom user context information (see <a href=\"https://docs.coveo.com/en/399/\">Sending Custom Context Information</a>).</p>\n<p><strong>Example:</strong> <code>{ &quot;currentResultsPerPage&quot;: 25, &quot;userRole&quot;: &quot;developer&quot; }</code></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.device",
		"notSupportedIn": "",
		"comment": "<p>The name of the device or browser that triggered the event.\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\n<p><strong>Example:</strong> <code>Chrome</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.language",
		"notSupportedIn": "",
		"comment": "<p>The language of the search interface from which the event originates.\nMust be a valid <a href=\"https://en.wikipedia.org/wiki/ISO_639-1\">ISO-639-1 code</a>.</p>\n<p><strong>Note:</strong> By default, the framework sets this field according to the currently loaded culture file (see <a href=\"https://docs.coveo.com/en/421/\">Changing the Language of Your Search Interface</a>).</p>\n<p><strong>Example:</strong> <code>en</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.mobile",
		"notSupportedIn": "",
		"comment": "<p>Whether the event originates from a mobile device.\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.originContext",
		"notSupportedIn": "",
		"comment": "<p>The broad application context from which the event originates.\n<strong>Note:</strong> By default, the framework sets this field to <code>Search</code>. However, you can use the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#setorigincontext\"><code>setOriginContext</code></a> method of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component to modify the default value.</p>\n<p><strong>Example:</strong> <code>Search</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.originLevel1",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the search interface from which the event originates.\n<strong>Note:</strong> This field is normally set through the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.searchhub\"><code>searchHub</code></a> option of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <code>PartnerPortalSearch</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.originLevel2",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the tab from which the event originates.\n<strong>Note:</strong> The framework normally sets this field to the identifier of the currently selected <a href=\"https://coveo.github.io/search-ui/components/tab.html\"><code>Tab</code></a> in the search interface.</p>\n<p><strong>Example:</strong> <code>All</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.originLevel3",
		"notSupportedIn": "",
		"comment": "<p>The address of the webpage that linked to the search interface from which the event originates.\n<strong>Note:</strong> The framework normally sets this field to the current <code>document.referrer</code> value.</p>\n<p><strong>Example:</strong> <code>http://example.com/</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.responseTime",
		"notSupportedIn": "",
		"comment": "<p>The time it took to get a response from the Search API for the query related to the event (in milliseconds).\n<strong>Note:</strong> The framework normally sets this field to <code>0</code>, except for <a href=\"https://coveo.github.io/search-ui/interfaces/isearchevent.html\">search events</a> in which case it sets the field by retrieving the information from the related Search API query response.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.userAgent",
		"notSupportedIn": "",
		"comment": "<p>The software acting on behalf of the end-user whose action triggered the event.\n<strong>Note:</strong> By default, the framework sets this field to the current <code>navigator.userAgent</code> value.</p>\n<p><strong>Example:</strong> <code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.userDisplayName",
		"notSupportedIn": "",
		"comment": "<p>The display name of the end-user whose action triggered the event.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.userdisplayname\"><code>userDisplayName</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <code>Alice Smith</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.userGroups",
		"notSupportedIn": "",
		"comment": "<p>The groups the end-user whose action triggered the event belongs to.\n<strong>Note:</strong> This field is normally left undefined, and the Coveo Cloud usage analytics service attempts to extract the information from the search token when actually recording the event.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEvent.username",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the end-user whose action triggered the event.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.user\"><code>user</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <a href=\"mailto:`asmith@example.com\">`asmith@example.com</a>`</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEventArgs",
		"notSupportedIn": "",
		"comment": "<p>The object that all <a href=\"https://coveo.github.io/search-ui/classes/analyticsevents.html#analyticseventready\"><code>analyticsEventReady</code></a> handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEventArgs.coveoAnalyticsEventData",
		"notSupportedIn": "",
		"comment": "<p>The fields describing the Coveo Cloud usage analytics event.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsEventArgs.event",
		"notSupportedIn": "",
		"comment": "<p>The type of Coveo Cloud usage analytics event.</p>\n",
		"type": "",
		"constrainedValues": [
			"CoveoCustomEvent,CoveoClickEvent,CoveoSearchEvent"
		],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState",
		"notSupportedIn": "",
		"comment": "<p>Describes the current condition of a single dynamic facet value.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState.displayValue",
		"notSupportedIn": "",
		"comment": "<p>The custom display name of the dynamic facet value that was interacted with.\n<strong>Example:</strong> <code>Alice R. Smith</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState.end",
		"notSupportedIn": "",
		"comment": "<p>The maximum value of the dynamic range facet value.\n<strong>Examples:</strong></p>\n<blockquote>\n<ul>\n<li><code>500</code></li>\n<li><code>2018-12-31T23:59:59.999Z</code></li>\n</ul>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState.endInclusive",
		"notSupportedIn": "",
		"comment": "<p>Whether the <a href=\"https://coveo.github.io/search-ui/interfaces/irangevalue.html#end\"><code>end</code></a> value is included in the dynamic range facet value.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState.facetType",
		"notSupportedIn": "",
		"comment": "<p>The type of values displayed in the dynamic facet.</p>\n",
		"type": "FacetType",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState.field",
		"notSupportedIn": "",
		"comment": "<p>The name of the field the dynamic facet displaying the value is based on.\n<strong>Example:</strong> <code>author</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState.id",
		"notSupportedIn": "",
		"comment": "<p>The unique identifier of the dynamic facet displaying the value.\n<strong>Example:</strong> <code>author</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState.start",
		"notSupportedIn": "",
		"comment": "<p>The minimum value of the dynamic range facet value.\n<strong>Examples:</strong></p>\n<blockquote>\n<ul>\n<li><code>0</code></li>\n<li><code>2018-01-01T00:00:00.000Z</code></li>\n</ul>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState.state",
		"notSupportedIn": "",
		"comment": "<p>The new state of the dynamic facet value that was interacted with.</p>\n",
		"type": "FacetValueState",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState.title",
		"notSupportedIn": "",
		"comment": "<p>The title of the dynamic facet.\n<strong>Example:</strong> <code>Author</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState.value",
		"notSupportedIn": "",
		"comment": "<p>The original name (i.e., field value) of the dynamic facet value.\n<strong>Example:</strong> <code>alice_r_smith</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnalyticsFacetState.valuePosition",
		"notSupportedIn": "",
		"comment": "<p>The current 1-based position of the dynamic facet value, relative to other values in the same dynamic facet.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnchorUtilsOptions",
		"notSupportedIn": "",
		"comment": "<p>Options for building an <code>&lt;a&gt;</code> tag.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnchorUtilsOptions.class",
		"notSupportedIn": "",
		"comment": "<p>The CSS class(es) of the tag.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnchorUtilsOptions.target",
		"notSupportedIn": "",
		"comment": "<p>The target (<code>href</code> attribute).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IAnchorUtilsOptions.text",
		"notSupportedIn": "",
		"comment": "<p>The tag&#39;s text content.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBadgeColors",
		"notSupportedIn": "",
		"comment": "<p>Badge Colors</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBeforeRedirectEventArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IBeforeRedirectEventArgs</code> interface describes the object that all\n<a href=\"https://coveo.github.io/search-ui/classes/standalonesearchinterfaceevents.html#beforeredirect\"><code>beforeRedirect</code></a> event handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBeforeRedirectEventArgs.cancel",
		"notSupportedIn": "",
		"comment": "<p>If this property is set to <code>true</code> by a <code>beforeRedirect</code> event handler, the <code>StandaloneSearchBox</code> component will not redirect to the full search page.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBeforeRedirectEventArgs.searchPageUri",
		"notSupportedIn": "",
		"comment": "<p>The URI of the page that the search interface will redirect to when a query is performed by the <code>StandaloneSearchBox</code> component.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBreadcrumbItem",
		"notSupportedIn": "",
		"comment": "<p>Represent an item to insert in the breadcrumb</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBreadcrumbItem.element",
		"notSupportedIn": "",
		"comment": "<p>The HTMLElement to insert in the breadcrumb</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBuildingAdvancedSearchEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\">AdvancedSearchEvents.buildingAdvancedSearch</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBuildingAdvancedSearchEventArgs.executeQuery",
		"notSupportedIn": "",
		"comment": "<p>An easy way to execute a new query.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBuildingAdvancedSearchEventArgs.sections",
		"notSupportedIn": "",
		"comment": "<p>Sections which external code can populate by pushing into this array.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBuildingQueryEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#buildingquery\">QueryEvents.buildingQuery</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBuildingQueryEventArgs.cancel",
		"notSupportedIn": "",
		"comment": "<p>If this property is set to true by any handlers, the query will not be executed.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBuildingQueryEventArgs.queryBuilder",
		"notSupportedIn": "",
		"comment": "<p>Allow handlers to modify the query by using the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a></p>\n",
		"type": "QueryBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IBuildingQueryEventArgs.searchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Determine if the query is a &quot;search-as-you-type&quot;</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IChangeAnalyticsCustomDataEventArgs</code> interface describes the object that all\n<a href=\"https://coveo.github.io/search-ui/classes/analyticsevents.html#changeanalyticscustomdata\"><code>changeAnalyticsCustomData</code></a> event handlers receive as an argument.\nThis interface extends the <a href=\"https://coveo.github.io/search-ui/interfaces/ichangeableanalyticsdataobject.html\"><code>IChangeableAnalyticsDataObject</code></a> interface.</p>\n<p><strong>Notes:</strong></p>\n<blockquote>\n<ul>\n<li>External code can only modify the attributes described by the <code>IChangeableAnalyticsDataObject</code> interface.</li>\n<li>When the analytics event being logged is a <code>ClickEvent</code>, the <code>ChangeAnalyticsCustomDataEventArgs</code> object also\ncontains a <code>resultData</code> attribute, which describes the <a href=\"https://coveo.github.io/search-ui/interfaces/iqueryresult.html\"><code>QueryResult</code></a> that was clicked.\nExternal code <strong>cannot</strong> modify this object.</li>\n</ul>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.actionCause",
		"notSupportedIn": "",
		"comment": "<p>The cause of the usage analytics event.\nFor instance, triggering a query using the search box logs a usage analytics event with <code>searchBoxSubmit</code> as its\n<code>actionCause</code>, whereas triggering a query by selecting a facet value logs a usage analytics event with\n<code>facetSelect</code> as its <code>actionCause</code>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>cannot</strong> modify the value of this attribute.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.actionType",
		"notSupportedIn": "",
		"comment": "<p>The generic action type of the usage analytics event.\nAll analytics events that strongly relate to a certain feature or component usually share the same <code>actionType</code>.</p>\n<p>For instance, all usage analytics events relating to the <a href=\"https://coveo.github.io/search-ui/components/facet.html\"><code>Facet</code></a> component have <code>facet</code> as their\n<code>actionType</code>, whereas all usage analytics events relating to the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\"><code>Breadcrumb</code></a> component have\n<code>breadcrumb</code> as their <code>actionType</code>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>cannot</strong> modify the value of this attribute.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.language",
		"notSupportedIn": "",
		"comment": "<p>The language of the search interface from which the usage analytics event originates.\nBy default, the framework populates this attribute with the currently loaded localization and culture file of the\nsearch interface from which the usage analytics event originates.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.metaObject",
		"notSupportedIn": "",
		"comment": "<p>The metadata to send along with the usage analytics event.\n<strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>can</strong> modify existing values, or add new key-value pairs in this attribute.</p>\n</blockquote>\n",
		"type": "IChangeableAnalyticsMetaObject",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.originLevel1",
		"notSupportedIn": "",
		"comment": "<p>The high-level origin of the usage analytics event.\nFor instance, this could be the name of the search hub, or a name that can uniquely identify the search page from\nwhich the usage analytics event originates.</p>\n<p>Default value is <code>default</code>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.originLevel2",
		"notSupportedIn": "",
		"comment": "<p>The mid-level origin of the usage analytics event.\nBy default, the framework populates this attribute with the <code>data-id</code> of the currently selected tab in the search\ninterface from which the usage analytics event originates.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.originLevel3",
		"notSupportedIn": "",
		"comment": "<p>The low-level origin of the usage analytics event.\nFor instance, this could be the HTTP identifier of the page from which the usage analytics event originates.</p>\n<p>Default value is the empty string.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.type",
		"notSupportedIn": "",
		"comment": "<p>The type of the usage analytics event.\n<strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>cannot</strong> modify the value of this attribute.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [
			"SearchEvent,CustomEvent,ClickEvent"
		],
		"miscAttributes": {}
	},
	{
		"name": "IChangeLayoutEventArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IChangeLayoutEventArgs</code> interface describes the object that all\n<a href=\"https://coveo.github.io/search-ui/classes/resultlistevents.html#changelayout\"><code>ChangeLayout</code></a> event handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeLayoutEventArgs.layout",
		"notSupportedIn": "",
		"comment": "<p>The name of the new layout.</p>\n",
		"type": "ValidLayout",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeLayoutEventArgs.results",
		"notSupportedIn": "",
		"comment": "<p>The current page of results.</p>\n",
		"type": "IQueryResults",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeableAnalyticsDataObject",
		"notSupportedIn": "",
		"comment": "<p>The <code>IChangeableAnalyticsDataObject</code> interface describes the modifiable part of the object that all\n<a href=\"https://coveo.github.io/search-ui/classes/analyticsevents.html#changeanalyticscustomdata\"><code>changeAnalyticsCustomData</code></a> event handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeableAnalyticsDataObject.language",
		"notSupportedIn": "",
		"comment": "<p>The language of the search interface from which the usage analytics event originates.\nBy default, the framework populates this attribute with the currently loaded localization and culture file of the\nsearch interface from which the usage analytics event originates.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeableAnalyticsDataObject.metaObject",
		"notSupportedIn": "",
		"comment": "<p>The metadata to send along with the usage analytics event.\n<strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>can</strong> modify existing values, or add new key-value pairs in this attribute.</p>\n</blockquote>\n",
		"type": "IChangeableAnalyticsMetaObject",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeableAnalyticsDataObject.originLevel1",
		"notSupportedIn": "",
		"comment": "<p>The high-level origin of the usage analytics event.\nFor instance, this could be the name of the search hub, or a name that can uniquely identify the search page from\nwhich the usage analytics event originates.</p>\n<p>Default value is <code>default</code>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeableAnalyticsDataObject.originLevel2",
		"notSupportedIn": "",
		"comment": "<p>The mid-level origin of the usage analytics event.\nBy default, the framework populates this attribute with the <code>data-id</code> of the currently selected tab in the search\ninterface from which the usage analytics event originates.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeableAnalyticsDataObject.originLevel3",
		"notSupportedIn": "",
		"comment": "<p>The low-level origin of the usage analytics event.\nFor instance, this could be the HTTP identifier of the page from which the usage analytics event originates.</p>\n<p>Default value is the empty string.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IChangeableAnalyticsMetaObject",
		"notSupportedIn": "",
		"comment": "<p>The <code>IChangeableAnalyticsMetaObject</code> interface describes the metadata which can be sent along with any usage\nanalytics event.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent",
		"notSupportedIn": "",
		"comment": "<p>Describes a Coveo Cloud usage analytics <em>click</em> event.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.actionCause",
		"notSupportedIn": "",
		"comment": "<p>A unique name describing the action that triggered the event.\nSee the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#name\"><code>name</code></a> property of the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\"><code>IAnalyticsActionCause</code></a> interface.</p>\n<p><strong>Example:</strong> <code>pagerNext</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.actionType",
		"notSupportedIn": "",
		"comment": "<p>A name describing the category of actions to which the action that triggered the event belongs.\nSee the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#type\"><code>type</code></a> property of the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\"><code>IAnalyticsActionCause</code></a> interface.</p>\n<p><strong>Example:</strong> <code>getMoreResults</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.anonymous",
		"notSupportedIn": "",
		"comment": "<p>Whether the event should be logged anonymously to the Coveo Cloud usage analytics service.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.anonymous\"><code>anonymous</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.collectionName",
		"notSupportedIn": "",
		"comment": "<p>The name of the collection to which the clicked query result item belongs.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>default</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.customData",
		"notSupportedIn": "",
		"comment": "<p>Additional metadata to send along with the event.\n<strong>Note:</strong> This field may include custom user context information (see <a href=\"https://docs.coveo.com/en/399/\">Sending Custom Context Information</a>).</p>\n<p><strong>Example:</strong> <code>{ &quot;currentResultsPerPage&quot;: 25, &quot;userRole&quot;: &quot;developer&quot; }</code></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.device",
		"notSupportedIn": "",
		"comment": "<p>The name of the device or browser that triggered the event.\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\n<p><strong>Example:</strong> <code>Chrome</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.documentCategory",
		"notSupportedIn": "",
		"comment": "<p>The type of query result item that was clicked.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>FAQ</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.documentPosition",
		"notSupportedIn": "",
		"comment": "<p>The 1-based position of the clicked item in the query results set.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.documentTitle",
		"notSupportedIn": "",
		"comment": "<p>The title of the clicked query result item.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>Coveo ML Frequently Asked Questions</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.documentUri",
		"notSupportedIn": "",
		"comment": "<p>The URI of the clicked query result item.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>http://www.example.com/org:organization/articletype:FAQ/article:aB1c2000000A1BcDEF/language:en_US</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.documentUriHash",
		"notSupportedIn": "",
		"comment": "<p>The hashed URI of the clicked query result item.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>AbCñdeFghiJKLM1n</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.documentUrl",
		"notSupportedIn": "",
		"comment": "<p>The URL of the clicked query result item.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>https://example.com/aB1c2000000A1Bc</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.language",
		"notSupportedIn": "",
		"comment": "<p>The language of the search interface from which the event originates.\nMust be a valid <a href=\"https://en.wikipedia.org/wiki/ISO_639-1\">ISO-639-1 code</a>.</p>\n<p><strong>Note:</strong> By default, the framework sets this field according to the currently loaded culture file (see <a href=\"https://docs.coveo.com/en/421/\">Changing the Language of Your Search Interface</a>).</p>\n<p><strong>Example:</strong> <code>en</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.mobile",
		"notSupportedIn": "",
		"comment": "<p>Whether the event originates from a mobile device.\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.originContext",
		"notSupportedIn": "",
		"comment": "<p>The broad application context from which the event originates.\n<strong>Note:</strong> By default, the framework sets this field to <code>Search</code>. However, you can use the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#setorigincontext\"><code>setOriginContext</code></a> method of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component to modify the default value.</p>\n<p><strong>Example:</strong> <code>Search</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.originLevel1",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the search interface from which the event originates.\n<strong>Note:</strong> This field is normally set through the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.searchhub\"><code>searchHub</code></a> option of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <code>PartnerPortalSearch</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.originLevel2",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the tab from which the event originates.\n<strong>Note:</strong> The framework normally sets this field to the identifier of the currently selected <a href=\"https://coveo.github.io/search-ui/components/tab.html\"><code>Tab</code></a> in the search interface.</p>\n<p><strong>Example:</strong> <code>All</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.originLevel3",
		"notSupportedIn": "",
		"comment": "<p>The address of the webpage that linked to the search interface from which the event originates.\n<strong>Note:</strong> The framework normally sets this field to the current <code>document.referrer</code> value.</p>\n<p><strong>Example:</strong> <code>http://example.com/</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.queryPipeline",
		"notSupportedIn": "",
		"comment": "<p>The name of the query pipeline to which the Search API query that returned the clicked result item was routed.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>PartnerPortalSearchPipeline</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.rankingModifier",
		"notSupportedIn": "",
		"comment": "<p>The ranking modifier that was applied to the clicked query result item.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>Reveal ART</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.responseTime",
		"notSupportedIn": "",
		"comment": "<p>The time it took to get a response from the Search API for the query related to the event (in milliseconds).\n<strong>Note:</strong> The framework normally sets this field to <code>0</code>, except for <a href=\"https://coveo.github.io/search-ui/interfaces/isearchevent.html\">search events</a> in which case it sets the field by retrieving the information from the related Search API query response.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.searchQueryUid",
		"notSupportedIn": "",
		"comment": "<p>The unique identifier of the Search API query that returned the clicked result item.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>74682726-0e20-46eb-85ac-f37259346f57</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.sourceName",
		"notSupportedIn": "",
		"comment": "<p>The name of the source that contains the clicked query result item.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>Product Documentation</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.splitTestRunName",
		"notSupportedIn": "",
		"comment": "<p>The name of the A/B test that applied to the related Search API query.\n<strong>Note:</strong> This field is normally set by the <code>splitTestRunName</code> option of the <code>Analytics</code> component. However, if this option is left undefined, the framework attempts to set this field by retrieving information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>Testing new ART model</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.splitTestRunVersion",
		"notSupportedIn": "",
		"comment": "<p>The version of the A/B test that applied to the related Search API query (i.e., version A or version B).\n<strong>Note:</strong> This field is normally set by the <code>splitTestRunVersion</code> option of the <code>Analytics</code> component. However, if this option is left undefined and the related Search API query response indicates that an A/B test was applied, the framework sets this field to the name of the query pipeline to which the query was routed.</p>\n<p><strong>Example:</strong> <code>PartnerPortalSearchPipelineWithART</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.userAgent",
		"notSupportedIn": "",
		"comment": "<p>The software acting on behalf of the end-user whose action triggered the event.\n<strong>Note:</strong> By default, the framework sets this field to the current <code>navigator.userAgent</code> value.</p>\n<p><strong>Example:</strong> <code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.userDisplayName",
		"notSupportedIn": "",
		"comment": "<p>The display name of the end-user whose action triggered the event.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.userdisplayname\"><code>userDisplayName</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <code>Alice Smith</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.userGroups",
		"notSupportedIn": "",
		"comment": "<p>The groups the end-user whose action triggered the event belongs to.\n<strong>Note:</strong> This field is normally left undefined, and the Coveo Cloud usage analytics service attempts to extract the information from the search token when actually recording the event.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.username",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the end-user whose action triggered the event.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.user\"><code>user</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <a href=\"mailto:`asmith@example.com\">`asmith@example.com</a>`</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IClickEvent.viewMethod",
		"notSupportedIn": "",
		"comment": "<p>The way the item was clicked.\n<strong>Note:</strong> The framework normally sets this field to the exact same value as <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsevent.html#actioncause\"><code>actionCause</code></a>.</p>\n<p><strong>Example:</strong> <code>documentOpen</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICommerceRequest",
		"notSupportedIn": "",
		"comment": "<p>A Search API commerce request.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICommerceRequest.catalogId",
		"notSupportedIn": "",
		"comment": "<p>The unique identifier of the catalog to query.\n<strong>Example:</strong> <code>46bc4275-e613-4dd5-b1ea-3e5aca1bcd9d</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICommerceRequest.filter",
		"notSupportedIn": "",
		"comment": "<p>A mandatory query expression to apply if the commerce request affects the query.\n<strong>Example:</strong> <code>@storeid==1001</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICommerceRequest.operation",
		"notSupportedIn": "",
		"comment": "<p>The way the commerce request should affect query results.\n<strong>Example:</strong> <code>selectCatalogObjects</code></p>\n",
		"type": "",
		"constrainedValues": [
			"selectCatalogObjects,excludeCatalogObjects"
		],
		"miscAttributes": {}
	},
	{
		"name": "IComponentBindings",
		"notSupportedIn": "",
		"comment": "<p>The bindings, or environment in which each component exists.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentBindings.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentBindings.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentBindings.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentBindings.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Triggers state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentBindings.root",
		"notSupportedIn": "",
		"comment": "<p>The root HTMLElement of the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> in which the component exists.</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentBindings.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentBindings.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "IAnalyticsClient",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentDefinition",
		"notSupportedIn": "",
		"comment": "<p>Definition for a Component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentDefinition.ID",
		"notSupportedIn": "",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentDefinition.className",
		"notSupportedIn": "",
		"comment": "<p>The generated <code>className</code> for this component.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentDefinition.doExport",
		"notSupportedIn": "",
		"comment": "<p>Function that can be called to export one or multiple module in the global scope.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentDefinition.fields",
		"notSupportedIn": "",
		"comment": "<p>The optional index fields that the component possess or display.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentDefinition.options",
		"notSupportedIn": "",
		"comment": "<p>The available options for the component.</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentDefinition.parent",
		"notSupportedIn": "",
		"comment": "<p>The optional parent of the component, which will be a component itself.</p>\n",
		"type": "IComponentDefinition",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentDefinition.constructor",
		"notSupportedIn": "",
		"comment": "<p>Constructor for each component</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentLocalizedStringOptionArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IComponentLocalizedStringOptionArgs</code> interface describes the available parameters when building a\n<a href=\"https://coveo.github.io/search-ui/classes/componentoptions.html#buildlocalizedstringoption\">fields option</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentLocalizedStringOptionArgs.alias",
		"notSupportedIn": "",
		"comment": "<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentLocalizedStringOptionArgs.attrName",
		"notSupportedIn": "",
		"comment": "<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\nthe hyphened name of the option).\n<strong>Note:</strong></p>\n<blockquote>\n<p>This should only be used for backward compatibility reasons.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentLocalizedStringOptionArgs.defaultFunction",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentLocalizedStringOptionArgs.depend",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\nproperly.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentLocalizedStringOptionArgs.deprecated",
		"notSupportedIn": "",
		"comment": "<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\nthe option is deprecated, and what now replaces it.\n<strong>Note:</strong></p>\n<blockquote>\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentLocalizedStringOptionArgs.postProcessing",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should allow a component option to further modify its own value once all other options\nof that component have been built.\n<strong>Example:</strong></p>\n<blockquote>\n<p>By default, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id-1\"><code>id</code></a> option of the <code>Facet</code> component uses a post processing function to\nset its value to that of the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option.</p>\n</blockquote>\n",
		"type": "IComponentOptionsPostProcessing",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentLocalizedStringOptionArgs.required",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\nfunction properly.\n<strong>Example:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option of the <code>Facet</code> component is required, since a facet cannot\nfunction properly without a field.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentLocalizedStringOptionArgs.section",
		"notSupportedIn": "",
		"comment": "<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentLocalizedStringOptionArgs.validator",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should indicate whether the option value is valid.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptions",
		"notSupportedIn": "",
		"comment": "<p>The <code>IComponentOptions</code> interface describes the available parameters when building any kind of component\noption.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptions.alias",
		"notSupportedIn": "",
		"comment": "<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptions.attrName",
		"notSupportedIn": "",
		"comment": "<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\nthe hyphened name of the option).\n<strong>Note:</strong></p>\n<blockquote>\n<p>This should only be used for backward compatibility reasons.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptions.defaultFunction",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptions.defaultValue",
		"notSupportedIn": "",
		"comment": "<p>Specifies the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "T",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptions.depend",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\nproperly.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptions.deprecated",
		"notSupportedIn": "",
		"comment": "<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\nthe option is deprecated, and what now replaces it.\n<strong>Note:</strong></p>\n<blockquote>\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptions.postProcessing",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should allow a component option to further modify its own value once all other options\nof that component have been built.\n<strong>Example:</strong></p>\n<blockquote>\n<p>By default, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id-1\"><code>id</code></a> option of the <code>Facet</code> component uses a post processing function to\nset its value to that of the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option.</p>\n</blockquote>\n",
		"type": "IComponentOptionsPostProcessing",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptions.required",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\nfunction properly.\n<strong>Example:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option of the <code>Facet</code> component is required, since a facet cannot\nfunction properly without a field.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptions.section",
		"notSupportedIn": "",
		"comment": "<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptions.validator",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should indicate whether the option value is valid.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOption",
		"notSupportedIn": "",
		"comment": "<p>The <code>IComponentOptionsTemplateOptionArgs</code> interface describes the available parameters when building a\ntemplate option.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOption.alias",
		"notSupportedIn": "",
		"comment": "<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOption.attrName",
		"notSupportedIn": "",
		"comment": "<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\nthe hyphened name of the option).\n<strong>Note:</strong></p>\n<blockquote>\n<p>This should only be used for backward compatibility reasons.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOption.defaultFunction",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOption.defaultValue",
		"notSupportedIn": "",
		"comment": "<p>Specifies the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOption.depend",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\nproperly.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOption.deprecated",
		"notSupportedIn": "",
		"comment": "<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\nthe option is deprecated, and what now replaces it.\n<strong>Note:</strong></p>\n<blockquote>\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOption.postProcessing",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should allow a component option to further modify its own value once all other options\nof that component have been built.\n<strong>Example:</strong></p>\n<blockquote>\n<p>By default, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id-1\"><code>id</code></a> option of the <code>Facet</code> component uses a post processing function to\nset its value to that of the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option.</p>\n</blockquote>\n",
		"type": "IComponentOptionsPostProcessing",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOption.required",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\nfunction properly.\n<strong>Example:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option of the <code>Facet</code> component is required, since a facet cannot\nfunction properly without a field.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOption.section",
		"notSupportedIn": "",
		"comment": "<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOption.validator",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should indicate whether the option value is valid.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOptionArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IComponentOptionsFieldOptionArgs</code> interface describes the available parameters when building a\n<a href=\"https://coveo.github.io/search-ui/classes/componentoptions.html#buildfieldoption\">field option</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.alias",
		"notSupportedIn": "",
		"comment": "<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.attrName",
		"notSupportedIn": "",
		"comment": "<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\nthe hyphened name of the option).\n<strong>Note:</strong></p>\n<blockquote>\n<p>This should only be used for backward compatibility reasons.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.defaultFunction",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.defaultValue",
		"notSupportedIn": "",
		"comment": "<p>Specifies the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.depend",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\nproperly.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.deprecated",
		"notSupportedIn": "",
		"comment": "<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\nthe option is deprecated, and what now replaces it.\n<strong>Note:</strong></p>\n<blockquote>\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.postProcessing",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should allow a component option to further modify its own value once all other options\nof that component have been built.\n<strong>Example:</strong></p>\n<blockquote>\n<p>By default, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id-1\"><code>id</code></a> option of the <code>Facet</code> component uses a post processing function to\nset its value to that of the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option.</p>\n</blockquote>\n",
		"type": "IComponentOptionsPostProcessing",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.required",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\nfunction properly.\n<strong>Example:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option of the <code>Facet</code> component is required, since a facet cannot\nfunction properly without a field.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.section",
		"notSupportedIn": "",
		"comment": "<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.validator",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should indicate whether the option value is valid.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IComponentOptionsFieldsOptionArgs</code> interface describes the available parameters when building a\n<a href=\"https://coveo.github.io/search-ui/classes/componentoptions.html#buildfieldsoption\">fields option</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.alias",
		"notSupportedIn": "",
		"comment": "<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.attrName",
		"notSupportedIn": "",
		"comment": "<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\nthe hyphened name of the option).\n<strong>Note:</strong></p>\n<blockquote>\n<p>This should only be used for backward compatibility reasons.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.defaultFunction",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.defaultValue",
		"notSupportedIn": "",
		"comment": "<p>Specifies the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.depend",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\nproperly.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.deprecated",
		"notSupportedIn": "",
		"comment": "<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\nthe option is deprecated, and what now replaces it.\n<strong>Note:</strong></p>\n<blockquote>\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.postProcessing",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should allow a component option to further modify its own value once all other options\nof that component have been built.\n<strong>Example:</strong></p>\n<blockquote>\n<p>By default, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id-1\"><code>id</code></a> option of the <code>Facet</code> component uses a post processing function to\nset its value to that of the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option.</p>\n</blockquote>\n",
		"type": "IComponentOptionsPostProcessing",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.required",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\nfunction properly.\n<strong>Example:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option of the <code>Facet</code> component is required, since a facet cannot\nfunction properly without a field.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.section",
		"notSupportedIn": "",
		"comment": "<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.validator",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should indicate whether the option value is valid.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IComponentOptionsListOptionArgs</code> interface describes the available parameters when building a\n[list option]{@link ComponentOptions.buildListOption).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.alias",
		"notSupportedIn": "",
		"comment": "<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.attrName",
		"notSupportedIn": "",
		"comment": "<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\nthe hyphened name of the option).\n<strong>Note:</strong></p>\n<blockquote>\n<p>This should only be used for backward compatibility reasons.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.defaultFunction",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.defaultValue",
		"notSupportedIn": "",
		"comment": "<p>Specifies the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.depend",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\nproperly.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.deprecated",
		"notSupportedIn": "",
		"comment": "<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\nthe option is deprecated, and what now replaces it.\n<strong>Note:</strong></p>\n<blockquote>\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.postProcessing",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should allow a component option to further modify its own value once all other options\nof that component have been built.\n<strong>Example:</strong></p>\n<blockquote>\n<p>By default, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id-1\"><code>id</code></a> option of the <code>Facet</code> component uses a post processing function to\nset its value to that of the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option.</p>\n</blockquote>\n",
		"type": "IComponentOptionsPostProcessing",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.required",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\nfunction properly.\n<strong>Example:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option of the <code>Facet</code> component is required, since a facet cannot\nfunction properly without a field.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.section",
		"notSupportedIn": "",
		"comment": "<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.separator",
		"notSupportedIn": "",
		"comment": "<p>Specifies the regular expression to use to separate the elements of the list option.\nDefault value is a regular expression that inserts a comma character (<code>,</code>) between each word.</p>\n",
		"type": "RegExp",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.validator",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should indicate whether the option value is valid.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsListOptionArgs.values",
		"notSupportedIn": "",
		"comment": "<p>Specifies the possible values the list option elements can take.</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IComponentOptionsNumberOptionArgs</code> interface describes the available parameters when building a\n[number option]{@link ComponentOptions.buildNumberOption).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.alias",
		"notSupportedIn": "",
		"comment": "<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.attrName",
		"notSupportedIn": "",
		"comment": "<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\nthe hyphened name of the option).\n<strong>Note:</strong></p>\n<blockquote>\n<p>This should only be used for backward compatibility reasons.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.defaultFunction",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.defaultValue",
		"notSupportedIn": "",
		"comment": "<p>Specifies the value the option must take when no other value is explicitly specified.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.depend",
		"notSupportedIn": "",
		"comment": "<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\nproperly.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.deprecated",
		"notSupportedIn": "",
		"comment": "<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\nthe option is deprecated, and what now replaces it.\n<strong>Note:</strong></p>\n<blockquote>\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.float",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the value of this option is a floating point number.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.max",
		"notSupportedIn": "",
		"comment": "<p>Specifies the exclusive maximum value the option can take.\nConfiguring the option using a value strictly greater than this maximum displays a warning message in the console\nand automatically sets the option to its maximum value.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.min",
		"notSupportedIn": "",
		"comment": "<p>Specifies the exclusive minimum value the option can take.\nConfiguring the option using a value strictly less than this minimum displays a warning message in the console and\nautomatically sets the option to its minimum value.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.postProcessing",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should allow a component option to further modify its own value once all other options\nof that component have been built.\n<strong>Example:</strong></p>\n<blockquote>\n<p>By default, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id-1\"><code>id</code></a> option of the <code>Facet</code> component uses a post processing function to\nset its value to that of the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option.</p>\n</blockquote>\n",
		"type": "IComponentOptionsPostProcessing",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.required",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\nfunction properly.\n<strong>Example:</strong></p>\n<blockquote>\n<p>The <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\"><code>field</code></a> option of the <code>Facet</code> component is required, since a facet cannot\nfunction properly without a field.</p>\n</blockquote>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.section",
		"notSupportedIn": "",
		"comment": "<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.validator",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that should indicate whether the option value is valid.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComponentOptionsPostProcessing",
		"notSupportedIn": "",
		"comment": "<p>The <code>IComponentOptionsPostProcessing&lt;T&gt;</code> interface describes a post process function that should allow a component\noption to further modify its own value once all other options of that component have been built.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComputedFieldRequest",
		"notSupportedIn": "",
		"comment": "<p>Describe a computed field request<br/>\nSee: <a href=\"https://docs.coveo.com/en/1467/\">Computed Fields</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComputedFieldRequest.field",
		"notSupportedIn": "",
		"comment": "<p>This specifies the field on which the aggregate operation will be performed. This field is typically a numerical value.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IComputedFieldRequest.operation",
		"notSupportedIn": "",
		"comment": "<p>This specifies the operation to execute on the field value.<br/>\nPossible operations:\n-- sum: Computes the sum of all values.\n-- average: Computes the average of all values.\n--minimum: Retrieves the smallest of all values.\n--maximum: Retrieves the largest of all values.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers",
		"notSupportedIn": "",
		"comment": "<p>The core template helpers provided by default.\n<strong>Usage Examples:</strong></p>\n<blockquote>\n<p><strong>HTML</strong></p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoFieldValue\"</span> <span class=\"hljs-attr\">data-helper</span>=<span class=\"hljs-string\">\"helperName\"</span> <span class=\"hljs-attr\">data-helper-options-optionName</span>=<span class=\"hljs-string\">\"option-value\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p><strong>Underscore</strong></p>\n<pre><code class=\"lang-erb\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> helperName(argument1, argument2) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span></span>\n</code></pre>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.anchor",
		"notSupportedIn": "",
		"comment": "<p>Formats a clickable HTML link (<code>&lt;a&gt;</code>).</p>\n<ul>\n<li><code>href</code>: The link URI</li>\n<li><code>options</code>: Optional. The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/ianchorutilsoptions.html\">IAnchorUtilsOptions</a>)</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.currency",
		"notSupportedIn": "",
		"comment": "<p>Formats a currency value to a string using the specified options.</p>\n<ul>\n<li><code>content</code>: The number value to format.</li>\n<li><code>options</code>: Optional. The options to use (see ICurrencyToStringOptions).</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.date",
		"notSupportedIn": "",
		"comment": "<p>Formats a date value to a date-only string using the specified options.</p>\n<ul>\n<li><code>content</code>: The Date value to format.</li>\n<li><code>options</code>: Optional. The options to use (see IDateToStringOptions).</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.dateTime",
		"notSupportedIn": "",
		"comment": "<p>Formats a date value to a date and time string using the specified\noptions.</p>\n<ul>\n<li><code>content</code>: The Date value to format.</li>\n<li><code>options</code>: Optional. The options to use (see IDateToStringOptions).</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.email",
		"notSupportedIn": "",
		"comment": "<p>Renders one or several email values in <code>mailto:</code> hyperlinks.</p>\n<ul>\n<li><code>value</code>: The string or array of strings that contains a list of semicolon-separated email\nvalues. When multiple values are passed, each value is displayed in a\nseparate hyperlink.</li>\n<li><code>companyDomain</code>: Optional. The string that contains your own domain (e.g.:\ncoveo.com). When specified, this parameter allows email addresses\ncoming from your own domain to be displayed in a shortened format\n(e.g.: Full Name), whereas email addresses coming from an external\ndomain will be displayed in an extended format (e.g.: Full Name\n(domain.com)). If this parameter is not specified, then the shortened\nformat will automatically be used.</li>\n<li><code>me</code>: Optional. The string that contains the current username. If it is\nspecified, then the email address containing the current username will\nbe replaced by the localized string &#39;Me&#39;.</li>\n<li><code>lengthLimit</code>: Optional. The number of email addresses that you want to display\nbefore an ellipse is added (e.g.: &#39;From Joe, John and 5 others&#39;).<br/>\nThe default value is 2.</li>\n<li><code>truncateName</code>: Optional. When the username is available from the email address,\nthen you can specify if you want to truncate the full name. (e.g.:\n&#39;John S.&#39; instead of &#39;John Smith&#39;).<br/>\nThe default value is <code>false</code>.</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.emailDateTime",
		"notSupportedIn": "",
		"comment": "<p>Formats a date value to a date and time string using options suitable for\nemail dates</p>\n<ul>\n<li><code>content</code>: The Date value to format.</li>\n<li><code>options</code>: Optional. The options to use (see IDateToStringOptions).</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.encodeCarriageReturn",
		"notSupportedIn": "",
		"comment": "<p>Replace all carriage return in a string by a &lt;br /&gt; tag</p>\n<ul>\n<li><code>value</code>: The string value to replace the carriage returns in.</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.fromFileTypeToIcon",
		"notSupportedIn": "",
		"comment": "<p>Generates an icon based on the file type of the current result. The icon\nwill be contained inside a <code>&lt;span&gt;</code> element with the appropriate CSS\nclass.</p>\n<ul>\n<li><code>result</code>: Optional. The current result object inside your template. In\nunderscore, it is referenced as <code>obj</code>. By default, the result\nwill be resolved automatically from your current template function (\nMeaning the nearest result in the current call stack execution inside\nyour template)</li>\n<li><code>options</code>: Optional. The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/iiconoptions.html\">IIconOptions</a>).</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.highlight",
		"notSupportedIn": "",
		"comment": "<p>Highlights a string using the provided highlight information.</p>\n<ul>\n<li><code>content</code>: The URI to shorten.</li>\n<li><code>highlights</code>: Optional. The highlight information to use.</li>\n<li><code>cssClass</code>: Optional. The name of the CSS class to use for highlighting.</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.highlightStreamHTML",
		"notSupportedIn": "",
		"comment": "<p>This helper operates exactly like the <a href=\"https://coveo.github.io/search-ui/interfaces/icorehelpers.html#highlightstreamtext\">highlightStreamText</a> helper, except\nthat it should be used to highlight HTML content. The helper takes care\nof not highlighting the HTML markup.</p>\n<ul>\n<li><code>content</code>: The string content to highlight</li>\n<li><code>termsToHighlight</code>: The terms to highlight (see <a href=\"https://coveo.github.io/search-ui/interfaces/ihighlightterm.html\">IHighlightTerm</a>)</li>\n<li><code>phraseToHighlight</code>: The phrases to highlight (see <a href=\"https://coveo.github.io/search-ui/interfaces/ihighlightphrase.html\">IHighlightPhrase</a>)</li>\n<li><code>options</code>: Optional. The options defined below as <a href=\"https://coveo.github.io/search-ui/interfaces/istreamhighlightoptions.html\">IStreamHighlightOptions</a></li>\n</ul>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p><code>highlightStreamHTML</code> should only be used for very particular/specific use cases (e.g., augmenting the result template with additional information rather than the typical excerpt/title), and is not a proper replacement for actually having the correct title and excerpt on your results.</p>\n<p>Using incorrect result titles or excerpts on your search interface also causes relevancy to suffer greatly, as the index uses the title and excerpt to find relevant results. Consequently, end users are more likely to see results whose titles do not match their query.</p>\n<p>Moreover, the recommended method to implement simple title and/or excerpt highlighting is to simply use the <a href=\"https://coveo.github.io/search-ui/components/excerpt.html\">Excerpt</a> and <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a> components.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.highlightStreamText",
		"notSupportedIn": "",
		"comment": "<p>Highlights the provided terms in a given string.<br/>\nBy default, the terms to highlight are the current query and the\nassociated stemming words from the index.\nThe only required parameter is the content, which specify the string that needs to be highlighted.\nThe other parameters will normally be automatically resolved for you from the current result object.</p>\n<ul>\n<li><code>content</code>: The string content to highlight</li>\n<li><code>termsToHighlight</code>: The terms to highlight (see <a href=\"https://coveo.github.io/search-ui/interfaces/ihighlightterm.html\">IHighlightTerm</a>)</li>\n<li><code>phraseToHighlight</code>: The phrases to highlight (see <a href=\"https://coveo.github.io/search-ui/interfaces/ihighlightphrase.html\">IHighlightPhrase</a>)</li>\n<li><code>options</code>: Optional. The options defined below as <a href=\"https://coveo.github.io/search-ui/interfaces/istreamhighlightoptions.html\">IStreamHighlightOptions</a></li>\n</ul>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p><code>highlightStreamText</code> should only be used for very particular/specific use cases (e.g., augmenting the result template with additional information rather than the typical excerpt/title), and is not a proper replacement for actually having the correct title and excerpt on your results.</p>\n<p>Using incorrect result titles or excerpts on your search interface also causes relevancy to suffer greatly, as the index uses the title and excerpt to find relevant results. Consequently, end users are more likely to see results whose titles do not match their query.</p>\n<p>Moreover, the recommended method to implement simple title and/or excerpt highlighting is to simply use the <a href=\"https://coveo.github.io/search-ui/components/excerpt.html\">Excerpt</a> and <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a> components.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.image",
		"notSupportedIn": "",
		"comment": "<p>Formats an HTML image tag (<code>&lt;img&gt;</code>).</p>\n<ul>\n<li><code>src</code>: The image source URI</li>\n<li><code>options</code>: Optional. The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/iimageutilsoptions.html\">IImageUtilsOptions</a>)</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.isMobileDevice",
		"notSupportedIn": "",
		"comment": "<p>Detect if the results is being rendered in a mobile device.\nIf it&#39;s not a mobile device, the helper return null ;</p>\n<p>If it&#39;s a mobile device, return the type of device (Android, iPhone, iPad) etc.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.loadTemplate",
		"notSupportedIn": "",
		"comment": "<p>Loads a partial template in the current template, by passing the ID of\nthe template to load, the condition for which this template should be\nloaded, and the context object (the object that the loaded template will\nuse as its data). By default, the context object will be the same as the\ntemplate that called this helper function. So, for example, in a\nResultList Component, the contextObject would, by default, be the Query\nResults.</p>\n<ul>\n<li><code>templateId</code>: The ID of the template to load.</li>\n<li><code>condition</code>: Optional. The boolean condition to determine if this template should\nload for this result set. Most of the time this would be a condition of\nthe type if raw.somefield == &#39;something&#39;.</li>\n<li><code>contextObject</code>: Optional. The object that should be used by the loaded template\nas its contextObject.</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.number",
		"notSupportedIn": "",
		"comment": "<p>Formats a numeric value using the format string.</p>\n<ul>\n<li><code>content</code>: The numeric value to format.</li>\n<li><code>format</code>: The format string to use. The options available are defined by\nthe <a href=\"https://github.com/klaaspieter/jquery-global#numbers\">Globalize</a> library.</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.shorten",
		"notSupportedIn": "",
		"comment": "<p>Shortens a string so that its length does not exceed a specific number of\ncharacters. An ellipsis is appended to the string if it exceeds the\nmaximum length.</p>\n<ul>\n<li><code>content</code>: The string to shorten.</li>\n<li><code>length</code>: The maximum length of the resulting string.</li>\n<li><code>highlights</code>: Optional. If provided, the string will be highlighted\nusing this highlight information.</li>\n<li><code>cssClass</code>: Optional. When highlighting, the name of the CSS class to use.</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.shortenPath",
		"notSupportedIn": "",
		"comment": "<p>Shortens a string using an algorithm suitable for file paths. The helper\nwill insert an ellipsis in the string where text has been removed when\nthe path exceeds the maximum length.</p>\n<ul>\n<li><code>content</code>: The path to shorten.</li>\n<li><code>length</code>: The maximum length of the resulting string.</li>\n<li><code>highlights</code>: Optional. If provided, the string will be highlighted using\nthis highlight information.</li>\n<li><code>cssClass</code>: Optional. When highlighting, the name of the CSS class to use.</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.shortenUri",
		"notSupportedIn": "",
		"comment": "<p>Shortens a string using an algorithm suitable for URIs. The helper will\ninsert an ellipsis in the string where text has been removed when the URI\nexceeds the maximum length.</p>\n<ul>\n<li><code>content</code>: The URI to shorten.</li>\n<li><code>length</code>: The maximum length of the resulting string.</li>\n<li><code>highlights</code>: Optional. If provided, the string will be highlighted\nusing this highlight information.</li>\n<li><code>cssClass</code>: Optional. When highlighting, the name of the CSS class to use.</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.size",
		"notSupportedIn": "",
		"comment": "<p>Formats a number, which represents a file size in bytes, into a logical unit size.\n<strong>Examples:</strong></p>\n<blockquote>\n<p><code>size(1024) =&gt; 1024 B</code></p>\n<p><code>size(1025) =&gt; 1 KB</code></p>\n<p><code>size(10240) =&gt; 10 KB</code></p>\n</blockquote>\n<p><strong>Usage Examples:</strong></p>\n<blockquote>\n<p><strong>HTML</strong></p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoFieldValue\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@size'</span> <span class=\"hljs-attr\">data-helper</span>=<span class=\"hljs-string\">\"size\"</span> <span class=\"hljs-attr\">data-helper-options-base</span>=<span class=\"hljs-string\">\"1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n</blockquote>\n<blockquote>\n<p><strong>Underscore</strong></p>\n<pre><code class=\"lang-erb\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> size(raw.size, {<span class=\"hljs-symbol\">base:</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-symbol\">precision:</span> <span class=\"hljs-number\">2</span>}) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span></span>\n</code></pre>\n</blockquote>\n<ul>\n<li><code>value</code>: The number to format</li>\n<li><code>options</code> : The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/isizeoptions.html\">ISizeOptions</a>)</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.thumbnail",
		"notSupportedIn": "",
		"comment": "<p>Formats an HTML image tag (<code>&lt;img&gt;</code>), and automatically uses the result\nobject to query the REST API to get the thumbnail for this result. For\nexample, this can be used to great effect when designing a template\nshowing users or previews of files.</p>\n<ul>\n<li><code>result</code>: Optional. The current result object inside your template. In\nunderscore, it is referenced as <code>obj</code>. By default, the result\nwill be resolved automatically from your current template function (\nMeaning the nearest result in the current call stack execution inside\nyour template)</li>\n<li><code>endpoint</code>: Optional. The name of the endpoint to use for your\nthumbnail. Default is default.</li>\n<li><code>options</code>: Optional. The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/iimageutilsoptions.html\">IImageUtilsOptions</a>).</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.time",
		"notSupportedIn": "",
		"comment": "<p>Formats a date value to a time-only string using the specified options.</p>\n<ul>\n<li><code>content</code>: The Date value to format.</li>\n<li><code>options</code>: Optional. The options to use (see IDateToStringOptions).</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.timeSpan",
		"notSupportedIn": "",
		"comment": "<p>Given a number, either in millisecond or second, convert to a HH:MM:SS format.\n<strong>Examples</strong></p>\n<blockquote>\n<p><code>timeSpan(1, {isMilliseconds: false}) =&gt; &#39;00:01&#39;</code></p>\n<p><code>timeSpan(1000, {isMilliseconds: true}) =&gt; &#39;00:01&#39;</code></p>\n</blockquote>\n<ul>\n<li><code>value</code>: The number to convert to a timespan</li>\n<li><code>options</code> : The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/itimespanutilsoptions.html\">ITimeSpanUtilsOptions</a>)</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICoreHelpers.translatedCaption",
		"notSupportedIn": "",
		"comment": "<p>Given a filetype value, try to return a translated and human readable version.\nIf the filetype is known and recognized by the framework, a translated value will be returned.</p>\n<p><strong>Examples</strong></p>\n<blockquote>\n<p><code>translatedCaption(&#39;doc&#39;) =&gt; Document</code></p>\n<p><code>translatedCaption(&#39;xls&#39;) =&gt; Spreadsheet Document</code></p>\n</blockquote>\n<ul>\n<li><code>value</code>: The string value to translate</li>\n</ul>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent",
		"notSupportedIn": "",
		"comment": "<p>Describes a Coveo Cloud usage analytics <em>custom</em> event.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.actionCause",
		"notSupportedIn": "",
		"comment": "<p>A unique name describing the action that triggered the event.\nSee the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#name\"><code>name</code></a> property of the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\"><code>IAnalyticsActionCause</code></a> interface.</p>\n<p><strong>Example:</strong> <code>pagerNext</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.actionType",
		"notSupportedIn": "",
		"comment": "<p>A name describing the category of actions to which the action that triggered the event belongs.\nSee the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#type\"><code>type</code></a> property of the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\"><code>IAnalyticsActionCause</code></a> interface.</p>\n<p><strong>Example:</strong> <code>getMoreResults</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.anonymous",
		"notSupportedIn": "",
		"comment": "<p>Whether the event should be logged anonymously to the Coveo Cloud usage analytics service.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.anonymous\"><code>anonymous</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.customData",
		"notSupportedIn": "",
		"comment": "<p>Additional metadata to send along with the event.\n<strong>Note:</strong> This field may include custom user context information (see <a href=\"https://docs.coveo.com/en/399/\">Sending Custom Context Information</a>).</p>\n<p><strong>Example:</strong> <code>{ &quot;currentResultsPerPage&quot;: 25, &quot;userRole&quot;: &quot;developer&quot; }</code></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.device",
		"notSupportedIn": "",
		"comment": "<p>The name of the device or browser that triggered the event.\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\n<p><strong>Example:</strong> <code>Chrome</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.eventType",
		"notSupportedIn": "",
		"comment": "<p>A name describing the category of actions to which the action that triggered the event belongs.\n<strong>Note:</strong> Normally, this field is set to the same value as <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsevent.html#actiontype\"><code>actionType</code></a>.</p>\n<p><strong>Example:</strong> <code>getMoreResults</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.eventValue",
		"notSupportedIn": "",
		"comment": "<p>A unique name describing the action that triggered the event.\n<strong>Note:</strong> Normally, this field is set to the same value as <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsevent.html#actioncause\"><code>actionCause</code></a>.</p>\n<p><strong>Example:</strong> <code>pagerNext</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.language",
		"notSupportedIn": "",
		"comment": "<p>The language of the search interface from which the event originates.\nMust be a valid <a href=\"https://en.wikipedia.org/wiki/ISO_639-1\">ISO-639-1 code</a>.</p>\n<p><strong>Note:</strong> By default, the framework sets this field according to the currently loaded culture file (see <a href=\"https://docs.coveo.com/en/421/\">Changing the Language of Your Search Interface</a>).</p>\n<p><strong>Example:</strong> <code>en</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.mobile",
		"notSupportedIn": "",
		"comment": "<p>Whether the event originates from a mobile device.\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.originContext",
		"notSupportedIn": "",
		"comment": "<p>The broad application context from which the event originates.\n<strong>Note:</strong> By default, the framework sets this field to <code>Search</code>. However, you can use the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#setorigincontext\"><code>setOriginContext</code></a> method of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component to modify the default value.</p>\n<p><strong>Example:</strong> <code>Search</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.originLevel1",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the search interface from which the event originates.\n<strong>Note:</strong> This field is normally set through the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.searchhub\"><code>searchHub</code></a> option of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <code>PartnerPortalSearch</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.originLevel2",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the tab from which the event originates.\n<strong>Note:</strong> The framework normally sets this field to the identifier of the currently selected <a href=\"https://coveo.github.io/search-ui/components/tab.html\"><code>Tab</code></a> in the search interface.</p>\n<p><strong>Example:</strong> <code>All</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.originLevel3",
		"notSupportedIn": "",
		"comment": "<p>The address of the webpage that linked to the search interface from which the event originates.\n<strong>Note:</strong> The framework normally sets this field to the current <code>document.referrer</code> value.</p>\n<p><strong>Example:</strong> <code>http://example.com/</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.responseTime",
		"notSupportedIn": "",
		"comment": "<p>The time it took to get a response from the Search API for the query related to the event (in milliseconds).\n<strong>Note:</strong> The framework normally sets this field to <code>0</code>, except for <a href=\"https://coveo.github.io/search-ui/interfaces/isearchevent.html\">search events</a> in which case it sets the field by retrieving the information from the related Search API query response.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.userAgent",
		"notSupportedIn": "",
		"comment": "<p>The software acting on behalf of the end-user whose action triggered the event.\n<strong>Note:</strong> By default, the framework sets this field to the current <code>navigator.userAgent</code> value.</p>\n<p><strong>Example:</strong> <code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.userDisplayName",
		"notSupportedIn": "",
		"comment": "<p>The display name of the end-user whose action triggered the event.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.userdisplayname\"><code>userDisplayName</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <code>Alice Smith</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.userGroups",
		"notSupportedIn": "",
		"comment": "<p>The groups the end-user whose action triggered the event belongs to.\n<strong>Note:</strong> This field is normally left undefined, and the Coveo Cloud usage analytics service attempts to extract the information from the search token when actually recording the event.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ICustomEvent.username",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the end-user whose action triggered the event.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.user\"><code>user</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <a href=\"mailto:`asmith@example.com\">`asmith@example.com</a>`</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDateToStringOptions",
		"notSupportedIn": "",
		"comment": "<p>The <code>IDateToStringOptions</code> interface describes a set of options to use when converting a standard Date object to a\nstring using the <a href=\"https://coveo.github.io/search-ui/classes/dateutils.html#datetostring\"> <code>dateToString</code> </a>, or the\n<a href=\"https://coveo.github.io/search-ui/classes/dateutils.html#datetimetostring\"> <code>dateTimeToString</code> </a> method from the <a href=\"https://coveo.github.io/search-ui/classes/dateutils.html\"> <code>DateUtils</code> </a> class.\nThe precedence orders for the options are:\n<a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#usetodayyesterdayandtomorrow\"> <code>useTodayYesterdayAndTomorrow</code> </a>\n-&gt; <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#useweekdayifthisweek\"> <code>useWeekdayIfThisWeek</code> </a>\n-&gt; <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#omityearifcurrentone\"> <code>omitYearIfCurrentOne</code> </a>\n-&gt; <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#uselongdateformat\"> <code>useLongDateFormat</code> </a>\nand <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#alwaysincludetime\"> <code>alwaysIncludeTime</code> </a>\n-&gt; <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#includetimeifthisweek\"> <code>includeTimeIfThisWeek</code> </a>\n-&gt; <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#includetimeiftoday\"> <code>includeTimeIfToday</code> </a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDateToStringOptions.alwaysIncludeTime",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to always include the time in the resulting string when converting the Date object (e.g. <code>May 15, 4:17 PM</code>)\nThis option takes precedence over <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#includetimeifthisweek\"> <code>includeTimeIfThisWeek</code> </a>.\n<strong>Example</strong></p>\n<p>If <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#includetimeiftoday\"> <code>includeTimeIfToday</code> </a> is <code>true</code>\nand <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#now\"> <code>now</code> </a> contains a Date object equivalent to <code>Monday, March 8, 2017</code>, then:</p>\n<ul>\n<li>If the Date object to convert is equivalent to <code>2010/03/08 17:23:11</code>, the resulting string is <code>3/8/2010, 5:23 PM</code>.</li>\n</ul>\n<p>Default value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDateToStringOptions.includeTimeIfThisWeek",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to include the time in the resulting string when converting the Date object (e.g. <code>May 15, 4:17 PM</code>)\nif the date to convert within a week from <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#now\"> <code>now</code> </a>. This option takes precedence over\n<a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#includetimeiftoday\"> <code>includeTimeIfToday</code> </a>.\n<strong>Examples</strong></p>\n<p>If <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#includetimeiftoday\"> <code>includeTimeIfToday</code> </a> is <code>true</code>\nand <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#now\"> <code>now</code> </a> contains a Date object equivalent to <code>Monday, March 8, 2017</code>, then:</p>\n<ul>\n<li><p>If the Date object to convert is equivalent to <code>2017/03/08 17:23:11</code>, the resulting string is <code>3/8/2017, 5:23 PM</code>.</p>\n</li>\n<li><p>If the Date object to convert is equivalent to <code>2017/03/09 17:23:11</code>, the resulting string is <code>3/9/2017 ,5:23 PM</code>.</p>\n</li>\n</ul>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDateToStringOptions.includeTimeIfToday",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to include the time in the resulting string when converting the Date object (e.g. <code>May 15, 4:17 PM</code>)\nif the date to convert is equivalent to <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#now\"> <code>now</code> </a>.\n<strong>Examples</strong></p>\n<p>If <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#includetimeiftoday\"> <code>includeTimeIfToday</code> </a> is <code>true</code>\nand <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#now\"> <code>now</code> </a> contains a Date object equivalent to <code>Monday, March 8, 2017</code>, then:</p>\n<ul>\n<li><p>If the Date object to convert is equivalent to <code>2017/03/08 17:23:11</code>, the resulting string is <code>3/8/2017, 5:23 PM</code>.</p>\n</li>\n<li><p>If the Date object to convert is equivalent to <code>2017/03/09 17:23:11</code>, the resulting string is <code>3/9/2017</code>.</p>\n</li>\n</ul>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDateToStringOptions.now",
		"notSupportedIn": "",
		"comment": "<p>Contains a standard Date object that specifies the current date and time.\nDefault value is <code>undefined</code>.</p>\n",
		"type": "Date",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDateToStringOptions.omitYearIfCurrentOne",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to omit the year from the resulting string when converting the Date object, if the year\nis the current one. This option takes precedence over\n<a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#uselongdateformat\"> <code>useLongDateFormat</code> </a>.\n<strong>Examples</strong></p>\n<ul>\n<li><p>If the Date object to convert is equivalent to <code>September 22, 2017</code>, the resulting string does not contain\nthe year (e.g., <code>September 22</code>).</p>\n</li>\n<li><p>If the Date object to convert is equivalent to <code>September 22, 2016</code>, the resulting string contains the year\n(e.g., <code>September 22, 2016</code>).</p>\n</li>\n</ul>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDateToStringOptions.predefinedFormat",
		"notSupportedIn": "",
		"comment": "<p>Specifies a custom date format (e.g., dd/MM/yyyy), regardless of browser locale or any other option.\nThis option uses the following syntax. All examples use the April 5th, 2018 14:15:34 time.</p>\n<ul>\n<li><code>yyyy</code>: full length year (e.g., 2018)</li>\n<li><code>yy</code>: short length year (e.g., 18)</li>\n<li><code>MMMM</code>: month name (e.g., April)</li>\n<li><code>MMM</code>: shortened month name (e.g., Apr)</li>\n<li><code>MM</code>: month number (e.g., 04)</li>\n<li><code>M</code>: single digit month number for months before October (e.g., 4)</li>\n<li><code>dddd</code>: day name (e.g., Thursday)</li>\n<li><code>ddd</code>: shortened day name (e.g., Thu)</li>\n<li><code>dd</code>: day number (e.g., 05)</li>\n<li><code>d</code>: single digit day for days before the 10th (e.g., 5)</li>\n<li><code>hh</code>: hour, in the 24-hour format (e.g., 14)</li>\n<li><code>h</code>: hour, in the 12-hour format (e.g., 2)</li>\n<li><code>mm</code>: minutes (e.g., 15)</li>\n<li><code>ss</code>: seconds (e.g., 34)</li>\n</ul>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDateToStringOptions.useLongDateFormat",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to format the resulting string in the long date format (e.g., <code>Friday, August 04, 2017</code>).\nDefault value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDateToStringOptions.useTodayYesterdayAndTomorrow",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to convert the Date object to the localized version of <code>Today</code>, <code>Yesterday</code>, or <code>Tomorrow</code>,\nif possible. This option takes precedence over\n<a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#useweekdayifthisweek\"> <code>useWeekdayIfThisWeek</code> </a>.\n<strong>Examples</strong></p>\n<p>If <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#usetodayyesterdayandtomorrow\"> <code>useTodayYesterdayAndTomorrow</code> </a> is <code>true</code>,\nand <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#now\"> <code>now</code> </a> contains a Date object equivalent to <code>March 8, 2017</code>, then:</p>\n<ul>\n<li><p>If the Date object to convert contains a value equivalent to <code>March 7, 2017</code>, the resulting string is the\nlocalized version of <code>Yesterday</code>.</p>\n</li>\n<li><p>If the Date object to convert contains a value equivalent to <code>March 8, 2017</code>, the resulting string is the\nlocalized version of <code>Today</code>.</p>\n</li>\n<li><p>If the Date object to convert contains a value equivalent to <code>March 9, 2017</code>, the resulting string is the\nlocalized version of <code>Tomorrow</code>.</p>\n</li>\n</ul>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDateToStringOptions.useWeekdayIfThisWeek",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to convert the Date object to the localized version of the corresponding day of the week,\nif the date to convert is part of the current week. This option takes precedence over\n<a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#omityearifcurrentone\"> <code>omitYearIfCurrentOne</code> </a>.\n<strong>Examples</strong></p>\n<p> If <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#useweekdayifthisweek\"> <code>useWeekdayIfThisWeek</code> </a> is <code>true</code>\n and <a href=\"https://coveo.github.io/search-ui/interfaces/idatetostringoptions.html#now\"> <code>now</code> </a> contains a Date object equivalent to <code>Monday, March 8, 2017</code>, then:</p>\n<ul>\n<li><p>If the date to convert is equivalent to <code>Saturday, March 6, 2017</code>, the resulting string is the localized\nversion of <code>Last Saturday</code>.</p>\n</li>\n<li><p>If the date to convert is equivalent to <code>Thursday, March 11, 2017</code>, the resulting string is the localized\nversion of <code>Next Thursday</code>.</p>\n</li>\n</ul>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDisplayedNewResultEventArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IDisplayedNewResultEventArgs</code> interface describes the object that all\n<a href=\"https://coveo.github.io/search-ui/classes/resultlistevents.html#newresultdisplayed\"><code>newResultDisplayed</code></a> event handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDisplayedNewResultEventArgs.item",
		"notSupportedIn": "",
		"comment": "<p>The HTML element which was rendered by the  the displayed result.</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDisplayedNewResultEventArgs.result",
		"notSupportedIn": "",
		"comment": "<p>The query result that was just displayed by the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\"><code>ResultList</code></a> component.</p>\n",
		"type": "IQueryResult",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDoneBuildingQueryEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#donebuildingquery\">QueryEvents.doneBuildingQuery</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDoneBuildingQueryEventArgs.cancel",
		"notSupportedIn": "",
		"comment": "<p>If this property is set to true by any handlers, the query will not be executed.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDoneBuildingQueryEventArgs.queryBuilder",
		"notSupportedIn": "",
		"comment": "<p>Allow handlers to modify the query by using the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a></p>\n",
		"type": "QueryBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDoneBuildingQueryEventArgs.searchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Whether the query is a search-as-you-type</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDuringQueryEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#duringquery\">QueryEvents.duringQuery</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDuringQueryEventArgs.promise",
		"notSupportedIn": "",
		"comment": "<p>A promises for the results that will be returned by the Search API</p>\n",
		"type": "Promise",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDuringQueryEventArgs.query",
		"notSupportedIn": "",
		"comment": "<p>The query that was just executed</p>\n",
		"type": "IQuery",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDuringQueryEventArgs.queryBuilder",
		"notSupportedIn": "",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n",
		"type": "QueryBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IDuringQueryEventArgs.searchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Whether the query is a search-as-you-type</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallOptions",
		"notSupportedIn": "",
		"comment": "<p>Available options when calling against the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallParameters",
		"notSupportedIn": "",
		"comment": "<p>Parameters that can be used when calling an <a href=\"https://coveo.github.io/search-ui/classes/endpointcaller.html\">EndpointCaller</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallParameters.errorsAsSuccess",
		"notSupportedIn": "",
		"comment": "<p>Flag to specify if the endpoint should return different type of error as actual 200 success for the browser, but with the error code/message contained in the response.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallParameters.method",
		"notSupportedIn": "",
		"comment": "<p>Or HTTP verb : GET, POST, PUT, etc.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallParameters.queryString",
		"notSupportedIn": "",
		"comment": "<p>Array of query string params.<br/>\neg: [&#39;foo=1&#39;,&#39;bar=2&#39;]</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallParameters.requestData",
		"notSupportedIn": "",
		"comment": "<p>Body of the request.<br/>\nkey -&gt; value map (JSON)</p>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallParameters.requestDataType",
		"notSupportedIn": "",
		"comment": "<p>Request data type.<br/>\neg: &quot;application/json&quot;, &quot;application/x-www-form-urlencoded; charset=\\&quot;UTF-8\\&quot;&quot;</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallParameters.responseType",
		"notSupportedIn": "",
		"comment": "<p>responseType of the request.</br>\neg: &quot;text&quot;, &quot;arraybuffer&quot; etc.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallParameters.url",
		"notSupportedIn": "",
		"comment": "<p>Url to target</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallerOptions",
		"notSupportedIn": "",
		"comment": "<p>Possible options when creating a <a href=\"https://coveo.github.io/search-ui/classes/endpointcaller.html\">EndpointCaller</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallerOptions.accessToken",
		"notSupportedIn": "",
		"comment": "<p>The access token to use for this endpoint.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallerOptions.password",
		"notSupportedIn": "",
		"comment": "<p>The password to use to log into this endpoint. Used for basic auth.<br/>\nNot used if accessToken is provided.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallerOptions.requestModifier",
		"notSupportedIn": "",
		"comment": "<p>A function which will allow external code to modify all endpoint call parameters before they are sent by the browser.\nUsed in very specific scenario where the network infrastructure require special request headers to be added or removed, for example.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallerOptions.username",
		"notSupportedIn": "",
		"comment": "<p>The username to use to log into this endpoint. Used for basic auth.<br/>\nNot used if accessToken is provided.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IEndpointCallerOptions.xmlHttpRequest",
		"notSupportedIn": "",
		"comment": "<p>The XmlHttpRequest implementation to use instead of the native one.\nIf not specified, the native one is used.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IErrorResponse",
		"notSupportedIn": "",
		"comment": "<p>An error response</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IErrorResponse.data",
		"notSupportedIn": "",
		"comment": "<p>Data about the error</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IErrorResponse.statusCode",
		"notSupportedIn": "",
		"comment": "<p>Status code for the error</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IExtension",
		"notSupportedIn": "",
		"comment": "<p>Information about a query extension</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IExtension.argumentNames",
		"notSupportedIn": "",
		"comment": "<p>An array of all possible arguments</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IExtension.name",
		"notSupportedIn": "",
		"comment": "<p>The name of the extension</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IExternalAdvancedSearchSection",
		"notSupportedIn": "",
		"comment": "<p>Describe a section populated by external code, using the <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\">AdvancedSearchEvents.buildingAdvancedSearch</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IExternalAdvancedSearchSection.content",
		"notSupportedIn": "",
		"comment": "<p>The content to add to the external section, as an HTMLElement.</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IExternalAdvancedSearchSection.inputs",
		"notSupportedIn": "",
		"comment": "<p>The array of inputs to populate.\nExternal code should only push inputs that match the type <a href=\"https://coveo.github.io/search-ui/globals.html#baseformtypes\">BaseFormTypes</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IExternalAdvancedSearchSection.name",
		"notSupportedIn": "",
		"comment": "<p>The name of the section.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IExternalAdvancedSearchSection.updateQuery",
		"notSupportedIn": "",
		"comment": "<p>An handler to execute every time a new query is launched.\nThe handler will receive the inputs used to build the external section, as well as the queryBuilder object to allow to modify the query.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetOptions",
		"notSupportedIn": "",
		"comment": "<p>The available global configuration options when requesting facets through the [facets]{IQuery.facets} array.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetOptions.freezeFacetOrder",
		"notSupportedIn": "",
		"comment": "<p>Describes a request to retrieve user actions in a query response.</p>\n",
		"type": "Boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest",
		"notSupportedIn": "",
		"comment": "<p>A Search API facet request.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest.currentValues",
		"notSupportedIn": "",
		"comment": "<p>The values displayed by the facet in the search interface at the moment of\nthe request.\nSee <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequestvalue.html\">IFacetRequestValue</a>.</p>\n<p><strong>Default (Search API):</strong> <code>[]</code></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest.delimitingCharacter",
		"notSupportedIn": "",
		"comment": "<p>The character to use to split field values into a hierarchical sequence.\n<strong>Example:</strong>\nFor a multi-value field containing the following values: <code>c; c&amp;gt;folder2; c&amp;gt;folder2&amp;gt;folder3;</code>\nThe delimiting character is <code>&amp;gt;</code>.</p>\n<p><strong>Default (Search API):</strong> <code>;</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest.facetId",
		"notSupportedIn": "",
		"comment": "<p>The unique identifier of the facet in the search interface.\n<strong>Note:</strong> Must match <code>^[A-Za-z0-9-_]{1,60}$</code>.</p>\n<p><strong>Example:</strong> <code>author-1</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest.field",
		"notSupportedIn": "",
		"comment": "<p><strong>Required (Search API).</strong> The name of the field on which to base the\nfacet request.\n<strong>Note:</strong> Must reference an index field whose <strong>Facet</strong> option is enabled.</p>\n<p><strong>Example:</strong> <code>author</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest.freezeCurrentValues",
		"notSupportedIn": "",
		"comment": "<p>Whether to include the facet request&#39;s\n<a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html#currentvalues\"><code>currentValues</code></a> in the corresponding\n<a href=\"https://coveo.github.io/search-ui/interfaces/ifacetresponse.html\">facet response</a>&#39;s\n<a href=\"https://coveo.github.io/search-ui/interfaces/ifacetresponse.html#values\"><code>values</code></a> array.\n<strong>Note:</strong> Setting this to <code>true</code> is useful to ensure that the facet does\nnot move around while the end-user is interacting with it in the search\ninterface.</p>\n<p><strong>Default (Search API):</strong> <code>false</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest.generateAutomaticRanges",
		"notSupportedIn": "",
		"comment": "<p>Whether to automatically generate range values for the facet.\n<strong>Notes:</strong></p>\n<ul>\n<li>Setting this to <code>true</code> is only effective when <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html#type\"><code>type</code></a> is set to <code>dateRange</code>\nor <a href=\"https://coveo.github.io/search-ui/enums/facettype.html#numericalrange\"><code>numericalRange</code></a>, and the referenced <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html#field\"><code>field</code></a> is of a corresponding type (i.e., date or numeric).</li>\n<li>Automatic range generation will fail if the referenced <code>field</code> is dynamically generated by a query function.</li>\n<li>Enabling the <strong>Use cache for numeric queries</strong> option on the referenced <code>field</code> will speed up automatic range generation (see <a href=\"https://docs.coveo.com/en/1982/\">Add or Edit Fields</a>).</li>\n</ul>\n<p><strong>Default (Search API):</strong> <code>false</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest.injectionDepth",
		"notSupportedIn": "",
		"comment": "<p>The maximum number of items to scan for facet values.\n<strong>Note:</strong> A high <code>injectionDepth</code> may negatively impact the facet request\nperformance.</p>\n<p><strong>Default (Search API):</strong> <code>1000</code></p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest.isFieldExpanded",
		"notSupportedIn": "",
		"comment": "<p>Whether the facet is expanded in the search interface at the moment of the\nrequest.\n<strong>Default (Search API):</strong> <code>false</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest.numberOfValues",
		"notSupportedIn": "",
		"comment": "<p>The maximum number of facet values to fetch.\n<strong>Note:</strong> If\n<a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html#freezecurrentvalues\"><code>freezeCurrentValues</code></a> is\n<code>true</code>, <code>numberOfValues</code> must be equal to the\n<a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html#currentvalues\"><code>currentValues</code></a> array length.</p>\n<p><strong>Default (Search API):</strong> <code>8</code></p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest.sortCriteria",
		"notSupportedIn": "",
		"comment": "<p>The sort criterion to apply to the returned facet values.\n<strong>Default behavior (Search API):</strong></p>\n<ul>\n<li>When <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html#isfieldexpanded\"><code>isFieldExpanded</code></a> is <code>false</code>\nin the facet request, and\n<a href=\"https://coveo.github.io/search-ui/interfaces/ifacetresponse.html#morevaluesavailable\"><code>moreValuesAvailable</code></a> is\n<code>true</code> in the corresponding <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetresponse.html\">facet response</a>, use\n<code>score</code>.</li>\n<li>Otherwise, use <code>alphanumeric</code>.</li>\n</ul>\n",
		"type": "FacetSortCriteria",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequest.type",
		"notSupportedIn": "",
		"comment": "<p>The kind of values to request for the facet.\n<strong>Default (Search API):</strong> <code>Specific</code></p>\n",
		"type": "FacetType",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequestValue",
		"notSupportedIn": "",
		"comment": "<p>A <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html#currentvalues\"><code>currentValues</code></a> item in a Search API\n<a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html\">facet request</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequestValue.children",
		"notSupportedIn": "",
		"comment": "<p>The children of this category facet value.\nEach child is a full-fledged category facet value that may in turn have its own children and so forth,\nup to a maximum depth of 50 levels</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequestValue.end",
		"notSupportedIn": "",
		"comment": "<p>The value to end the range at.\n<strong>Examples:</strong></p>\n<blockquote>\n<ul>\n<li><code>500</code></li>\n<li><code>2018-12-31T23:59:59.999Z</code></li>\n</ul>\n</blockquote>\n",
		"type": "RangeType",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequestValue.endInclusive",
		"notSupportedIn": "",
		"comment": "<p>Whether to include the <a href=\"https://coveo.github.io/search-ui/interfaces/irangevalue.html#end\"><code>end</code></a> value in the range.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequestValue.label",
		"notSupportedIn": "",
		"comment": "<p>The label to associate with the range value.\n<strong>Examples:</strong></p>\n<blockquote>\n<ul>\n<li><code>0 - 500</code></li>\n<li><code>In 2018</code></li>\n</ul>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequestValue.preventAutoSelect",
		"notSupportedIn": "",
		"comment": "<p>Whether to prevent Coveo ML from automatically selecting the facet value.\n<strong>Default:</strong> <code>false</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequestValue.retrieveChildren",
		"notSupportedIn": "",
		"comment": "<p>Whether to retrieve the children of this category facet value. Can only be used on leaf values in the request (i.e., values with no current children).\n<strong>Default:</strong> <code>false</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequestValue.retrieveCount",
		"notSupportedIn": "",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequestvalue.html#retrievechildren\">retrieveChildren</a> is true, the maximum number of children to retrieve for this leaf value.\n<strong>Default (Search API):</strong> <code>0</code></p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequestValue.start",
		"notSupportedIn": "",
		"comment": "<p>The value to start the range at.\n<strong>Examples:</strong></p>\n<blockquote>\n<ul>\n<li><code>0</code></li>\n<li><code>2018-01-01T00:00:00.000Z</code></li>\n</ul>\n</blockquote>\n",
		"type": "RangeType",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequestValue.state",
		"notSupportedIn": "",
		"comment": "<p>The current facet value state in the search interface.\n<strong>Default (Search API):</strong> <code>idle</code></p>\n",
		"type": "FacetValueState",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetRequestValue.value",
		"notSupportedIn": "",
		"comment": "<p><strong>Required (Search API).</strong> The facet value name.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponse",
		"notSupportedIn": "",
		"comment": "<p>An item in the response of a Search API <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html\">facet request</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponse.facetId",
		"notSupportedIn": "",
		"comment": "<p>The unique facet identifier in the search interface.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponse.field",
		"notSupportedIn": "",
		"comment": "<p>The name of the field on which the facet is based.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponse.moreValuesAvailable",
		"notSupportedIn": "",
		"comment": "<p>Whether additional values are available for the facet.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponse.values",
		"notSupportedIn": "",
		"comment": "<p>The returned facet values.\nSee <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetresponsevalue.html\">IFacetResponseValue</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponseValue",
		"notSupportedIn": "",
		"comment": "<p>A values item in a Search API <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html\">facet response</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponseValue.children",
		"notSupportedIn": "",
		"comment": "<p>The children of this hierarchical facet value.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponseValue.end",
		"notSupportedIn": "",
		"comment": "<p>The value to end the range at.\n<strong>Examples:</strong></p>\n<blockquote>\n<ul>\n<li><code>500</code></li>\n<li><code>2018-12-31T23:59:59.999Z</code></li>\n</ul>\n</blockquote>\n",
		"type": "RangeType",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponseValue.endInclusive",
		"notSupportedIn": "",
		"comment": "<p>Whether to include the <a href=\"https://coveo.github.io/search-ui/interfaces/irangevalue.html#end\"><code>end</code></a> value in the range.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponseValue.label",
		"notSupportedIn": "",
		"comment": "<p>The label to associate with the range value.\n<strong>Examples:</strong></p>\n<blockquote>\n<ul>\n<li><code>0 - 500</code></li>\n<li><code>In 2018</code></li>\n</ul>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponseValue.moreValuesAvailable",
		"notSupportedIn": "",
		"comment": "<p>Whether additional values are available for the facet.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponseValue.numberOfResults",
		"notSupportedIn": "",
		"comment": "<p>The number of query result items matching the facet value.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponseValue.start",
		"notSupportedIn": "",
		"comment": "<p>The value to start the range at.\n<strong>Examples:</strong></p>\n<blockquote>\n<ul>\n<li><code>0</code></li>\n<li><code>2018-01-01T00:00:00.000Z</code></li>\n</ul>\n</blockquote>\n",
		"type": "RangeType",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponseValue.state",
		"notSupportedIn": "",
		"comment": "<p>The facet value state to display in the search interface.</p>\n",
		"type": "FacetValueState",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetResponseValue.value",
		"notSupportedIn": "",
		"comment": "<p>The facet value name.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetSearchRequest",
		"notSupportedIn": "",
		"comment": "<p>A Search API facet search request.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetSearchRequest.captions",
		"notSupportedIn": "",
		"comment": "<p>A dictionary that maps index field values to facet value display names.\n<strong>Example</strong></p>\n<blockquote>\n<p><code>{&quot;acme_productA&quot;: &quot;ACME Product A&quot;, &quot;acme_productB&quot;: &quot;ACME Product B&quot;}</code></p>\n</blockquote>\n",
		"type": "Record",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetSearchRequest.field",
		"notSupportedIn": "",
		"comment": "<p>The name of the field against which to execute the facet search request.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetSearchRequest.ignoreValues",
		"notSupportedIn": "",
		"comment": "<p>A list of index field values to filter out from the facet search results.\n<strong>Example:</strong> <code>[&quot;blue&quot;, &quot;green&quot;]</code></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetSearchRequest.numberOfValues",
		"notSupportedIn": "",
		"comment": "<p>The maximum number of facet values to fetch.\n<strong>Default (Search API):</strong> <code>10</code></p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetSearchRequest.query",
		"notSupportedIn": "",
		"comment": "<p>The string to match.\nTypically, the text entered by the end-user in the facet search box, to which one or more wildcard characters (<code>*</code>) may be added.</p>\n<p><strong>Example:</strong> <code>&quot;*oran*&quot;</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetSearchRequest.searchContext",
		"notSupportedIn": "",
		"comment": "<p>The query parameters representing the current state of the search interface.\nSee the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html\">query</a> documentation.</p>\n",
		"type": "IQuery",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetSearchResponse",
		"notSupportedIn": "",
		"comment": "<p>A Search API facet search response.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetSearchResponse.values",
		"notSupportedIn": "",
		"comment": "<p>The facet values.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetValueSuggestionRow",
		"notSupportedIn": "",
		"comment": "<p>Used to define a row returned by an <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetvaluesuggestionsprovider.html\"><code>IFacetValueSuggestionsProvider</code></a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetValueSuggestionRow.field",
		"notSupportedIn": "",
		"comment": "<p>The field that was used for the suggestions.</p>\n",
		"type": "IFieldOption",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetValueSuggestionRow.keyword",
		"notSupportedIn": "",
		"comment": "<p>The keyword that was used in the query to retrieve results.</p>\n",
		"type": "IQuerySuggestionKeyword",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetValueSuggestionRow.numberOfResults",
		"notSupportedIn": "",
		"comment": "<p>The number of results matching the value for the given keyword.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetValueSuggestionRow.score",
		"notSupportedIn": "",
		"comment": "<p>The score computed by the suggestions provider.\nA higher score means the results is more relevant.</p>\n",
		"type": "IFacetValueSuggestionScore",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetValueSuggestionRow.value",
		"notSupportedIn": "",
		"comment": "<p>The field value returned by the suggestion that should be used to filter the results.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetValueSuggestionsProvider",
		"notSupportedIn": "",
		"comment": "<p>Provides suggestions for the <a href=\"https://coveo.github.io/search-ui/components/facetvaluesuggestions.html\"><code>FacetValueSuggestions</code></a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFacetValueSuggestionsProviderOptions",
		"notSupportedIn": "",
		"comment": "<p>Defines options for the <a href=\"https://coveo.github.io/search-ui/components/facetvaluesuggestions.html\"><code>FacetValueSuggestions</code></a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFetchMoreSuccessEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#fetchmoresuccess\">QueryEvents.fetchMoreSuccess</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFetchMoreSuccessEventArgs.query",
		"notSupportedIn": "",
		"comment": "<p>The query that was just executed</p>\n",
		"type": "IQuery",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFetchMoreSuccessEventArgs.queryBuilder",
		"notSupportedIn": "",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n",
		"type": "QueryBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFetchMoreSuccessEventArgs.results",
		"notSupportedIn": "",
		"comment": "<p>The results returned by the query that was executed</p>\n",
		"type": "IQueryResults",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFetchMoreSuccessEventArgs.searchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Whether the query is a search-as-you-type</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldConditionOption",
		"notSupportedIn": "",
		"comment": "<p>The <code>IFieldConditionOption</code> is a component option expressing a field-based condition that must be satisfied.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldConditionOption.field",
		"notSupportedIn": "",
		"comment": "<p>The name of the field on which the condition is based (e.g., <code>author</code>).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldConditionOption.reverseCondition",
		"notSupportedIn": "",
		"comment": "<p>Whether the condition should disallow the specified <a href=\"https://coveo.github.io/search-ui/interfaces/ifieldconditionoption.html\"><code>values</code></a> rather than allowing them.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldConditionOption.values",
		"notSupportedIn": "",
		"comment": "<p>The field values allowed (or disallowed) by the condition (e.g., <code>[&quot;Alice Smith&quot;, &quot;Bob Jones&quot;]</code>).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription",
		"notSupportedIn": "",
		"comment": "<p>Information about a single field in the index</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription.defaultValue",
		"notSupportedIn": "",
		"comment": "<p>The default value of the field</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription.description",
		"notSupportedIn": "",
		"comment": "<p>A small(ish) description of the field</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription.fieldSourceType",
		"notSupportedIn": "",
		"comment": "<p>It&#39;s fieldSourceType, as a string.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription.fieldType",
		"notSupportedIn": "",
		"comment": "<p>It&#39;s fieldType, as a string.<br/>\neg: Date, Double, Integer, LargeString, Long, SmallString</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription.groupByField",
		"notSupportedIn": "",
		"comment": "<p>Gets whether the field is considered groupBy (facet)</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription.includeInQuery",
		"notSupportedIn": "",
		"comment": "<p>Gets whether the field can be referenced in a query.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription.includeInResults",
		"notSupportedIn": "",
		"comment": "<p>Gets whether the field is returned with results.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription.name",
		"notSupportedIn": "",
		"comment": "<p>It&#39;s name, as a string</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription.sortByField",
		"notSupportedIn": "",
		"comment": "<p>Gets whether the field can be used to sort results</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription.splitGroupByField",
		"notSupportedIn": "",
		"comment": "<p>Gets whether the field is considered splitGroupBy (facet with ; between values)</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldDescription.type",
		"notSupportedIn": "",
		"comment": "<p>It&#39;s type, as a string</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldOption",
		"notSupportedIn": "",
		"comment": "<p>The <code>IFieldOption</code> interface declares a type for options that should contain a field to be used in a query.\nThe only constraint this type has over a basic string is that it should start with the <code>@</code> character.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldOption.String",
		"notSupportedIn": "",
		"comment": "<p>Allows manipulation and formatting of text strings and determination and location of substrings within strings.</p>\n",
		"type": "StringConstructor",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFieldOption.length",
		"notSupportedIn": "",
		"comment": "<p>Returns the length of a String object.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IFormWidget",
		"notSupportedIn": "",
		"comment": "<p>Describe an interface for a simple form widget.\n<a href=\"https://coveo.github.io/search-ui/classes/checkbox.html\">Checkbox</a>, <a href=\"https://coveo.github.io/search-ui/classes/datepicker.html\">DatePicker</a>, <a href=\"https://coveo.github.io/search-ui/classes/dropdown.html\">Dropdown</a> are all examples of <code>IFormWidgets</code>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGeolocationPosition",
		"notSupportedIn": "",
		"comment": "<p>The <code>IGeolocationPosition</code> interface describes a geolocation position\nusable by the <a href=\"https://coveo.github.io/search-ui/components/distanceresources.html\">DistanceResources</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGeolocationPositionProvider",
		"notSupportedIn": "",
		"comment": "<p>The <code>IGeolocationPositionProvider</code> interface describes an object with a method that can provide\na geolocation position to the <a href=\"https://coveo.github.io/search-ui/components/distanceresources.html\">DistanceResources</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGetDocumentOptions",
		"notSupportedIn": "",
		"comment": "<p>The <code>IGetDocumentOptions</code> interface describes the available options when calling against a\n<a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\"><code>SearchEndpoint</code></a> to get an item.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest",
		"notSupportedIn": "",
		"comment": "<p>The <code>IGroupByRequest</code> interface describes a Group By operation to perform against the index.\nSee <a href=\"https://docs.coveo.com/en/1453/\">Group By Operations</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest.allowedValues",
		"notSupportedIn": "",
		"comment": "<p>Explicitly specifies a list of values for which to generate Group By values.\nYou can use trailing wildcards to include ranges of values.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>The array <code>[&quot;foo&quot;, &quot;bar*&quot;]</code> would return Group By values for <code>foo</code> and any value starting with <code>bar</code>.</p>\n</blockquote>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest.allowedValuesPatternType",
		"notSupportedIn": "",
		"comment": "<p>The pattern type to use for the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html#allowedvalues\">IGroupByRequest.allowedValues</a> property (see <a href=\"https://coveo.github.io/search-ui/enums/allowedvaluespatterntype.html\">AllowedValuesPatternType</a>).\nThis option is empty by default, which makes it behave as <a href=\"https://coveo.github.io/search-ui/enums/allowedvaluespatterntype.html#legacy\"><code>legacy</code></a>.</p>\n",
		"type": "AllowedValuesPatternType",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest.computedFields",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of computed fields that should be evaluated for each Group By value that is returned.\nComputed fields are used to perform aggregate operations on other fields for all the matching items having a\nspecific value in the Group By field in the results. See\n<a href=\"https://docs.coveo.com/en/1467/\">Computed Fields</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest.constantQueryOverride",
		"notSupportedIn": "",
		"comment": "<p>Specifies a constant query expression on which to compute the Group By operation.\nThis feature is similar to the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html#queryoverride\"><code>queryOverride</code></a> feature, except that in this\ncase, the index keeps the constant query expression in cache for faster queries. You should avoid specifying a\ndynamic query expression for this parameter, for doing so will negatively impact performance.</p>\n<p>By default, the constant part of the query expression being executed is used.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest.field",
		"notSupportedIn": "",
		"comment": "<p>Specifies the field on which to perform the Group By request. The Group By request returns a Group By value for\neach distinct value of this field within the result set.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest.generateAutomaticRanges",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to let the index calculate the ranges.\nDefault value is <code>false</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest.injectionDepth",
		"notSupportedIn": "",
		"comment": "<p>Specifies how deep the index should scan the results to identify missing Group By values.\nWhen executing a Group By operation, the index uses various heuristics to try to list all of the field values that\nappear in the result set. In some corner cases, certain values might be omitted (it is a classical example of a\ntrade-off between precision and performance). Using <code>injectionDepth</code> forces the index to explicitly scan the field\nvalues of the top n results of the query, and ensure that the field values present in those results are included.</p>\n<p>Consequently, specifying a high value for this parameter may negatively impact query performance.</p>\n<p>Default value is <code>1000</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest.maximumNumberOfValues",
		"notSupportedIn": "",
		"comment": "<p>Specifies the maximum number of values that the Group By operation can return.\nDefault value is <code>10</code>. Minimum value is <code>0</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest.queryOverride",
		"notSupportedIn": "",
		"comment": "<p>Specifies a different query expression on which to compute the Group By operation.\nThis feature is typically used for performance reasons to retrieve Group By values on separate expressions while\nexecuting a normal query in a single operation.</p>\n<p>By default, the query expression being executed is used.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest.rangeValues",
		"notSupportedIn": "",
		"comment": "<p>Explicitly specifies a list of range values for which Group By values should be generated.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByRequest.sortCriteria",
		"notSupportedIn": "",
		"comment": "<p>Specifies how the indexer should sort the Group By values.\nThe possible values are:</p>\n<ul>\n<li><code>score</code>: Sort by score. Score is computed from the number of occurrences of a field value, as well as from the\nposition where results having this field value appear in the ranked result set. When using this sort criterion, a\nfield value with 100 occurrences might appear after one with only 10 occurrences, if the occurrences of the latter\ntend to appear sooner in the ranked result set.</li>\n<li><code>occurrences</code>: Sort by number of occurrences, with values having the highest number of occurrences appearing\nfirst.</li>\n<li><code>alphaascending</code> / <code>alphadescending</code>: Sort alphabetically on the field values.</li>\n<li><code>computedfieldascending</code> / <code>computedfielddescending</code>: Sort on the values of the first computed field for each\nGroup By value (see <a href=\"https://docs.coveo.com/en/1467/\">Computed Fields</a>).</li>\n<li><code>chisquare</code>: Sort based on the relative frequency of values in the result set compared to the frequency in the\nentire index. This means that a value that does not appear often in the index but does appear often in the result\nset will tend to appear first.</li>\n<li><code>nosort</code>: Do not sort the Group By values. When using this sort criterion, the index returns the Group By values\nin a random order.</li>\n</ul>\n<p>Default value is <code>score</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByResult",
		"notSupportedIn": "",
		"comment": "<p>A result for a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>.\nThis is typically what the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component will use to render themselves.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByResult.field",
		"notSupportedIn": "",
		"comment": "<p>The field on which the group by was performed.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByResult.globalComputedFieldResults",
		"notSupportedIn": "",
		"comment": "<p>Available if there was any computed field request.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByResult.values",
		"notSupportedIn": "",
		"comment": "<p>The differents values for this result</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByValue",
		"notSupportedIn": "",
		"comment": "<p>Describe a single group by value, returned by a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyresult.html\">IGroupByResult</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByValue.computedFieldResults",
		"notSupportedIn": "",
		"comment": "<p>If there was ny computed field request, the results will be available here.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByValue.lookupValue",
		"notSupportedIn": "",
		"comment": "<p>The lookup value if it was specified.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByValue.numberOfResults",
		"notSupportedIn": "",
		"comment": "<p>The number of results that match this value in the index for this particular group by request</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByValue.score",
		"notSupportedIn": "",
		"comment": "<p>The relevance score.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IGroupByValue.value",
		"notSupportedIn": "",
		"comment": "<p>The string value. Think : Facet label.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IHighlight",
		"notSupportedIn": "",
		"comment": "<p>An highlight structure, as returned by the index.\nThis structure can be used to do the actual highlighting job.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IHighlight.dataHighlightGroup",
		"notSupportedIn": "",
		"comment": "<p>The group number for the highlight. A single string can have the same term highlighted multiple times.\nThis allows to regroup the different highlights.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IHighlight.dataHighlightGroupTerm",
		"notSupportedIn": "",
		"comment": "<p>The string that represent the highlight. A single string can have the same term highlighted multiple times.\nThis allows to regroup the different highlights.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IHighlight.length",
		"notSupportedIn": "",
		"comment": "<p>The length of the offset.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IHighlight.offset",
		"notSupportedIn": "",
		"comment": "<p>The 0 based offset inside the string where the highlight should start.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IHighlightPhrase",
		"notSupportedIn": "",
		"comment": "<p>The data about a single phrase to highlight.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IHighlightTerm",
		"notSupportedIn": "",
		"comment": "<p>The data about a single term to highlight.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IIconOptions",
		"notSupportedIn": "",
		"comment": "<p>Available options for the <a href=\"https://coveo.github.io/search-ui/components/icon.html\">Icon</a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IImageUtilsOptions",
		"notSupportedIn": "",
		"comment": "<p>Options for building an <code>&lt;img&gt;</code> tag.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IImageUtilsOptions.alt",
		"notSupportedIn": "",
		"comment": "<p>The alternative text for the image (<code>alt</code> attribute).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IImageUtilsOptions.height",
		"notSupportedIn": "",
		"comment": "<p>The height of the image</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IImageUtilsOptions.srcTemplate",
		"notSupportedIn": "",
		"comment": "<p>The template to use for the image source</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IImageUtilsOptions.width",
		"notSupportedIn": "",
		"comment": "<p>The width of the image</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IIndexFieldValue",
		"notSupportedIn": "",
		"comment": "<p>Describe a field value returned by index</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IIndexFieldValue.computedFieldResults",
		"notSupportedIn": "",
		"comment": "<p>The optional computedFieldResults, if requested in the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IIndexFieldValue.lookupValue",
		"notSupportedIn": "",
		"comment": "<p>The optional lookupValue, if requested in the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IIndexFieldValue.numberOfResults",
		"notSupportedIn": "",
		"comment": "<p>The number of results in the index which have this value</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IIndexFieldValue.value",
		"notSupportedIn": "",
		"comment": "<p>The value</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IInitializationEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/initializationevents.html#aftercomponentsinitialization\">InitializationEvents.afterComponentsInitialization</a>, and <a href=\"https://coveo.github.io/search-ui/classes/initializationevents.html#afterinitialization\">InitializationEvents.afterInitialization</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IInitializationParameters",
		"notSupportedIn": "",
		"comment": "<p>Represent the initialization parameters required to init a new component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesBatchRequest",
		"notSupportedIn": "",
		"comment": "<p>Describe a request to list the possible values of multiple fields.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesBatchRequest.batch",
		"notSupportedIn": "",
		"comment": "<p>The list of fields to request.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesRequest",
		"notSupportedIn": "",
		"comment": "<p>Describe a request to list the possible values of a field.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesRequest.constantQueryOverride",
		"notSupportedIn": "",
		"comment": "<p>A query to execute when returning possible field values, put in cache in the index</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesRequest.field",
		"notSupportedIn": "",
		"comment": "<p>The field for which to list values</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesRequest.ignoreAccents",
		"notSupportedIn": "",
		"comment": "<p>Whether to ignore accents in the values</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesRequest.lookupField",
		"notSupportedIn": "",
		"comment": "<p>The lookup field to use</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesRequest.maximumNumberOfValues",
		"notSupportedIn": "",
		"comment": "<p>Maximum number of field values to return</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesRequest.pattern",
		"notSupportedIn": "",
		"comment": "<p>A pattern to filter out results</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesRequest.patternType",
		"notSupportedIn": "",
		"comment": "<p>The type of the pattern (eg: regex)</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesRequest.queryOverride",
		"notSupportedIn": "",
		"comment": "<p>A query to execute when returning possible field values</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IListFieldValuesRequest.sortCriteria",
		"notSupportedIn": "",
		"comment": "<p>The sort order for the returned field.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "INewQueryEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#newquery\">QueryEvents.newQuery</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "INewQueryEventArgs.cancel",
		"notSupportedIn": "",
		"comment": "<p>If this property is set to true by any handlers, the query will not be executed.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "INewQueryEventArgs.searchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Whether the query is a search-as-you-type</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "INoResultsEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#noresults\">QueryEvents.noResults</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "INoResultsEventArgs.query",
		"notSupportedIn": "",
		"comment": "<p>The query that was just executed</p>\n",
		"type": "IQuery",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "INoResultsEventArgs.queryBuilder",
		"notSupportedIn": "",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n",
		"type": "QueryBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "INoResultsEventArgs.results",
		"notSupportedIn": "",
		"comment": "<p>The results returned by the query that was executed</p>\n",
		"type": "IQueryResults",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "INoResultsEventArgs.retryTheQuery",
		"notSupportedIn": "",
		"comment": "<p>If set to true by any handler, the last query will automatically be re-executed again.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "INoResultsEventArgs.searchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Whether the query is a search-as-you-type</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IOmniboxDataRow",
		"notSupportedIn": "",
		"comment": "<p>The content that external code that wants to populate the omnibox need to populate.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IOmniboxDataRow.deferred",
		"notSupportedIn": "",
		"comment": "<p>This is a Promise object. It is used when you want to make an asynchronous call (most likely an Ajax request) to a service in order to retrieve the data that you will use to build your HTML content.</p>\n",
		"type": "Promise",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IOmniboxDataRow.element",
		"notSupportedIn": "",
		"comment": "<p>This an <code>HTMLElement</code> that you want the Omnibox to render.\nIt can be any valid HTML element (div, span, image, table, etc.). You can bind any event you want to this element and also add logic to handle the Omnibox (e.g. should the Omnibox close itself when clicking on your suggestion, should the Omnibox clear itself?).</p>\n<p>This element you provide can be as complex as you want it to be (see Providing Suggestions for the Omnibox).</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IOmniboxDataRow.zIndex",
		"notSupportedIn": "",
		"comment": "<p>This is an optional property. It is used by each component to influence their rendering order in the Omnibox. It works like a normal CSS <code>zIndex</code>: higher value will render at the top most level. Providing no <code>zIndex</code> will make your item render with a low priority.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IOpenQuickviewEventArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IOpenQuickviewEventArgs</code> interface describes the object that all\n<code>openQuickview</code> event handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IOpenQuickviewEventArgs.termsToHighlight",
		"notSupportedIn": "",
		"comment": "<p>The array of query expression terms to highlight in the quickview modal window.</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateBreadcrumbEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Event triggered when populating the breadcrumb</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateOmniboxObject",
		"notSupportedIn": "",
		"comment": "<p>The <code>IPopulateOmniboxObject</code> is an interface that is used by components to interact with the Omnibox and provides a framework for type-ahead suggestions.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateOmniboxObject.allQueryExpressions",
		"notSupportedIn": "",
		"comment": "<p>An array <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulateomniboxqueryexpression.html\">IPopulateOmniboxQueryExpression</a> used to describe each part of the content of the Omnibox component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateOmniboxObject.completeQueryExpression",
		"notSupportedIn": "",
		"comment": "<p>A <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulateomniboxqueryexpression.html\">IPopulateOmniboxQueryExpression</a> object used to describe the complete content of the Querybox component.</p>\n",
		"type": "IPopulateOmniboxQueryExpression",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateOmniboxObject.currentQueryExpression",
		"notSupportedIn": "",
		"comment": "<p>A <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulateomniboxqueryexpression.html\">IPopulateOmniboxQueryExpression</a> object used to describe the current active content (the current position of the cursor/caret) of the Omnibox component.</p>\n",
		"type": "IPopulateOmniboxQueryExpression",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateOmniboxObject.cursorPosition",
		"notSupportedIn": "",
		"comment": "<p>The number representing the current position of the cursor/caret inside the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateOmniboxQueryExpression",
		"notSupportedIn": "",
		"comment": "<p>This object is a simple interface that describes the content of an omnibox query expression.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateOmniboxQueryExpression.regex",
		"notSupportedIn": "",
		"comment": "<p>This is a regex of the content of the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> with some special character escaped.</p>\n",
		"type": "RegExp",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateOmniboxQueryExpression.word",
		"notSupportedIn": "",
		"comment": "<p>This is a simple string with the plain content of the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateOmniboxSuggestionsEventArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IPopulateOmniboxSuggestionsEventArgs</code> interface describes the object that all\n<a href=\"https://coveo.github.io/search-ui/classes/omniboxevents.html#populateomniboxsuggestions\"><code>populateOmniboxSuggestions</code></a> event handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateOmniboxSuggestionsEventArgs.omnibox",
		"notSupportedIn": "",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\"><code>Omnibox</code></a> component instance.</p>\n",
		"type": "Omnibox",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateOmniboxSuggestionsEventArgs.suggestions",
		"notSupportedIn": "",
		"comment": "<p>The list of resolved query completion suggestions, and/or query completion suggestion promises.</p>\n",
		"type": "Array",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateSearchResultPreviewsEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Executed when a Suggestion is focused and waiting for search result previews.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateSearchResultPreviewsEventArgs.previewsQueries",
		"notSupportedIn": "",
		"comment": "<p>The result previews query. This must be set synchronously before the event resolves.\nSetting this to a non-empty array will display the given search result previews.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPopulateSearchResultPreviewsEventArgs.suggestionText",
		"notSupportedIn": "",
		"comment": "<p>The text to look up search result previews for.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPositionResolvedEventArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IPositionResolvedEventArgs</code> interface describes the object that all\n<a href=\"https://coveo.github.io/search-ui/classes/distanceevents.html#onpositionresolved\"><code>onPositionResolved</code></a> event handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPositionResolvedEventArgs.position",
		"notSupportedIn": "",
		"comment": "<p>The position that was resolved.</p>\n",
		"type": "IGeolocationPosition",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPreprocessMoreResultsEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#preprocessmoreresults\">QueryEvents.preprocessMoreResults</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPreprocessMoreResultsEventArgs.results",
		"notSupportedIn": "",
		"comment": "<p>The results returned by the query that was executed</p>\n",
		"type": "IQueryResults",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPreprocessResultsEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#preprocessresults\">QueryEvents.preprocessResults</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPreprocessResultsEventArgs.query",
		"notSupportedIn": "",
		"comment": "<p>The query that was just executed</p>\n",
		"type": "IQuery",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPreprocessResultsEventArgs.queryBuilder",
		"notSupportedIn": "",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n",
		"type": "QueryBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPreprocessResultsEventArgs.results",
		"notSupportedIn": "",
		"comment": "<p>The results returned by the query that was executed</p>\n",
		"type": "IQueryResults",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IPreprocessResultsEventArgs.searchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Whether the query is a search-as-you-type</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery",
		"notSupportedIn": "",
		"comment": "<p>The IQuery interface describes a query that can be performed on the Coveo REST Search API.\nFor basic usage, see the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#q\">IQuery.q</a> and <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#aq\">IQuery.aq</a> properties.</p>\n<p>In a normal scenario, a query is built by the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> class.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.actionsHistory",
		"notSupportedIn": "",
		"comment": "<p>The actions history represents the past actions a user made and is used by the Coveo Machine Learning service to\nsuggest recommendations. It is generated by the page view script (<a href=\"https://github.com/coveo/coveo.analytics.js\">https://github.com/coveo/coveo.analytics.js</a>)</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.allowQueriesWithoutKeywords",
		"notSupportedIn": "",
		"comment": "<p>Specifies if the Search API should perform queries even when no keywords were entered by the end user.\nEnd user keywords are present in either the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#q\">IQuery.q</a> or <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#lq\">IQuery.lq</a> part of the query.</p>\n<p>This parameter is normally controlled by SearchInterface.options.allowEmptyQuery option.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.aq",
		"notSupportedIn": "",
		"comment": "<p>The advanced query expression.<br/>\nThis is the part of the query expression generated by code based on various rules.<br/>\neg: Selecting a facet value will cause an expression to be added to the advanced query expression.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.categoryFacets",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of request to retrieve facet values for the CategoryFacet component</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.childField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the childField when doing parent-child loading (See: <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>)</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.commerce",
		"notSupportedIn": "",
		"comment": "<p>The commerce request to execute.</p>\n",
		"type": "ICommerceRequest",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.context",
		"notSupportedIn": "",
		"comment": "<p>The context is a map of key_value that can be used in the Query pipeline in the Coveo platform.<br/></p>\n",
		"type": "Context",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.cq",
		"notSupportedIn": "",
		"comment": "<p>The constant query expression.<br/>\nThis part of the expression is much alike the advanced query expression, but it is meant to hold expressions that are constant for all users of a search interface/widget.<br/>\nThe results of evaluating those expressions are kept in a special index cache, to avoid re-evaluating them on each query.<br/>\nYou must be careful to not include dynamic parts in this expression, otherwise you risk filling up the cache with useless data and this might have a negative impact on performance.<br/>\nExpressions other than cq also benefit from caching in the index, but using cq allows to explicitly require that a part of the query be included in the cache.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.debug",
		"notSupportedIn": "",
		"comment": "<p>Whether to include debug information from the Search API in the query response.\n<strong>Note:</strong></p>\n<blockquote>\n<p>This debug information does not include ranking information.</p>\n</blockquote>\n<p>Setting this property to <code>true</code> can have an adverse effect on query performance, so it should always be left to\n<code>false</code> in a production environment.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.dq",
		"notSupportedIn": "",
		"comment": "<p>The disjunction query expression.<br/>\nThis is the disjunctive part of the query expression that is merged with the other expression parts using an OR boolean operator.<br/>\nWhen specified, the final expression evaluated by the index ends up being (q aq cq) OR (dq).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.enableCollaborativeRating",
		"notSupportedIn": "",
		"comment": "<p>Whether the index should take collaborative rating in account when ranking result. See: <a href=\"https://coveo.github.io/search-ui/components/resultrating.html\">ResultRating</a></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.enableDidYouMean",
		"notSupportedIn": "",
		"comment": "<p>This enables the query correction feature of the index.<br/>\nBy activating this, the index returns an array of {link IQueryCorrection} with suggested word corrections.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.enableQuerySyntax",
		"notSupportedIn": "",
		"comment": "<p>Whether to enable the special query syntax such as field references for the basic query expression (parameter q).\nIt is equivalent to a No syntax block applied to the basic query expression.\nIf not specified, the parameter defaults to false</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.excerptLength",
		"notSupportedIn": "",
		"comment": "<p>Specifies the length (in number of characters) of the excerpts generated by the indexer based on the keywords present in the query.<br/>\nThe index includes the top most interesting sentences (in the order they appear in the item) that fit in the specified number of characters.<br/>\nWhen not specified, the default value is 200.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.facetOptions",
		"notSupportedIn": "",
		"comment": "<p>A request to retrieve user actions in the query response.</p>\n",
		"type": "IFacetOptions",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.facets",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of request to retrieve facet values for the DynamicFacet component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.fieldsToExclude",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of fields that should be excluded from the query results.<br/>\neg: [&#39;@foo&#39;,&#39;@bar&#39;]</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.fieldsToInclude",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of fields that should be returned for each result.<br/>\neg: [&#39;@foo&#39;,&#39;@bar&#39;]</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.filterField",
		"notSupportedIn": "",
		"comment": "<p>Specifies a field on which <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> should be performed.<br/>\nFolding is a kind of duplicate filtering where only the first result with any given value of the field is included in the result set.<br/>\nIt&#39;s typically used to return only one result in a conversation, for example when forum posts in a thread are indexed as separate items.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.filterFieldRange",
		"notSupportedIn": "",
		"comment": "<p>Number of results that should be folded, using the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#filterfield\">IQuery.filterField</a></p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.firstResult",
		"notSupportedIn": "",
		"comment": "<p>This is the 0-based index of the first result to return.<br/>\nIf not specified, this parameter defaults to 0.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.groupBy",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of Group By operations that can be performed on the query results to extract facets</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.lowercaseOperators",
		"notSupportedIn": "",
		"comment": "<p>Whether to enable the support for operator in lowercase (AND OR -&gt; and or)</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.lq",
		"notSupportedIn": "",
		"comment": "<p>The contextual text.<br/>\nThis is the contextual text part of the query. It uses the Coveo Machine Learning service to pick key keywords from\nthe text and add them to the basic expression.\nThis field is mainly used to pass context such a case description, long textual query or any other form of text that might help in\nrefining the query.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.maximumAge",
		"notSupportedIn": "",
		"comment": "<p>The maximum age for cached query results, in milliseconds.<br/>\nIf results for the exact same request (including user identities) are available in the in-memory cache, they will be used if they are not older than the specified value.<br/>\nOtherwise, the query will be sent to the index.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.numberOfResults",
		"notSupportedIn": "",
		"comment": "<p>This is the number of results to return, starting from <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#firstresult\">IQuery.firstResult</a>.<br/>\nIf not specified, this parameter defaults to 10.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.parentField",
		"notSupportedIn": "",
		"comment": "<p>Specifies the parentField when doing parent-child loading (See: <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>)</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.partialMatch",
		"notSupportedIn": "",
		"comment": "<p>Whether to enable partial matching of the basic expression keywords.<br/>\nBy activating this, when the basic expression contains at least <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#partialmatchkeywords\">IQuery.partialMatchKeywords</a>, items containing only the number of keywords specified by <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#partialmatchthreshold\">IQuery.partialMatchThreshold</a> will also match the query.<br/>\nWithout this option, items are required to contain all the keywords in order to match the query.<br/>\nIf not specified, this parameter defaults to false.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.partialMatchKeywords",
		"notSupportedIn": "",
		"comment": "<p>The minimum number of keywords needed to activate partial match.<br/>\nSpecifies the minimum number of keywords needed for the partial match feature to activate.<br/>\nIf the basic expression contains less than this number of keywords, no transformation is applied on the query.<br/>\nIf not specified, this parameter defaults to 5.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.partialMatchThreshold",
		"notSupportedIn": "",
		"comment": "<p>The threshold to use for matching items when partial match is enabled.<br/>\nSpecifies the minimum number of query keywords that an item must contain when partial match is enabled. This value can either be an absolute number or a percentage value based on the total number of keywords.<br/>\nIf not specified, this parameter defaults to 50%.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.pipeline",
		"notSupportedIn": "",
		"comment": "<p>Name of the query pipeline to use.<br/>\nSpecifies the name of the query pipeline to use for the query. If not specified, the default value is default, which means the default query pipeline will be used.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.q",
		"notSupportedIn": "",
		"comment": "<p>The basic query expression. <br/>\nThis is typically the query expression entered by the user in a query box.<br/>\nSince this part of the query is expected to come from user input, it is processed by the Did You Mean feature.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.queryFunctions",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of Query Function operation that will be executed on the results.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.questionMark",
		"notSupportedIn": "",
		"comment": "<p>Whether to enable question marks with wildcards.<br/>\nThis enables using the question mark ? character within wildcard expressions.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.rankingFunctions",
		"notSupportedIn": "",
		"comment": "<p>Specifies an array of Ranking Function operations that will be executed on the result</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.recommendation",
		"notSupportedIn": "",
		"comment": "<p>This is the id of the recommendation interface that generated the query.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.retrieveFirstSentences",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the first sentences of the item should be included in the results.<br/>\nThe retrieveFirstSentences option is typically used instead of excerpts when displaying email items, where the first sentence of the email might be of more interest than a contextually generated excerpt.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.searchHub",
		"notSupportedIn": "",
		"comment": "<p>The hub value set from the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component.<br/>\nUsed for analytics reporting in the Coveo platform</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.sortCriteria",
		"notSupportedIn": "",
		"comment": "<p>Specifies the sort criterion(s) to use to sort results. If not specified, this parameter defaults to Relevancy.<br/>\nPossible values are : <br/>\n-- relevancy :  This uses all the configured ranking weights as well as any specified ranking expressions to rank results.<br/>\n-- dateascending / datedescending : Sort using the value of the @date field, which is typically the last modification date of an item in the index.<br/>\n-- qre : Sort using only the weights applied through ranking expressions. This is much like using Relevancy except that automatic weights based on keyword proximity etc, are not computed.<br/>\n-- nosort : Do not sort the results. The order in which items are returned is essentially random.<br/>\n-- @field ascending / @field descending : Sort using the value of a custom field.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.tab",
		"notSupportedIn": "",
		"comment": "<p>The tab value set from the <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.userActions",
		"notSupportedIn": "",
		"comment": "<p>The user ID or visitor ID whose item views should be tagged in the query results\n(see the <a href=\"https://coveo.github.io/search-ui/interfaces/iqueryresult.html#isuseractionview\">isUserActionView</a> property of the <a href=\"https://coveo.github.io/search-ui/interfaces/iqueryresult.html\">IQueryResult</a> interface).\n<strong>Examples:</strong></p>\n<ul>\n<li><a href=\"mailto:asmith@example.com\">asmith@example.com</a></li>\n<li>6318b0c6-9397-4d70-b393-cf4770fd1bab</li>\n</ul>\n",
		"type": "IUserActionsRequest",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuery.wildcards",
		"notSupportedIn": "",
		"comment": "<p>Whether to enable wildcards on the basic expression keywords.<br/>\nThis enables the wildcard features of the index. Coveo Platform will expand keywords containing wildcard characters to the possible matching keywords to broaden the query.<br/>\nSee <a href=\"https://docs.coveo.com/en/1580/\">Using Wildcards in Queries</a>.<br/>\nIf not specified, this parameter defaults to false.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryBuilderExpression",
		"notSupportedIn": "",
		"comment": "<p>Describe the expressions part of a QueryBuilder.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryBuilderExpression.advanced",
		"notSupportedIn": "",
		"comment": "<p>The advanced part of the expression</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryBuilderExpression.basic",
		"notSupportedIn": "",
		"comment": "<p>The basic part of the expression</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryBuilderExpression.constant",
		"notSupportedIn": "",
		"comment": "<p>The constant part of the expression</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryBuilderExpression.disjunction",
		"notSupportedIn": "",
		"comment": "<p>The disjunction part of the expression</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryBuilderExpression.full",
		"notSupportedIn": "",
		"comment": "<p>The whole expression</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryBuilderExpression.withoutConstant",
		"notSupportedIn": "",
		"comment": "<p>The full part, but without the constant.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryCorrection",
		"notSupportedIn": "",
		"comment": "<p>Describe correction for a query</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryCorrection.correctedQuery",
		"notSupportedIn": "",
		"comment": "<p>The query once corrected</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryCorrection.wordCorrections",
		"notSupportedIn": "",
		"comment": "<p>Array of correction for each word in the query</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryErrorEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#queryerror\">QueryEvents.queryError</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryErrorEventArgs.endpoint",
		"notSupportedIn": "",
		"comment": "<p>The endpoint on which the error happened.</p>\n",
		"type": "ISearchEndpoint",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryErrorEventArgs.error",
		"notSupportedIn": "",
		"comment": "<p>The error info / message itself.</p>\n",
		"type": "IEndpointError",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryErrorEventArgs.query",
		"notSupportedIn": "",
		"comment": "<p>The query that was just executed</p>\n",
		"type": "IQuery",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryErrorEventArgs.queryBuilder",
		"notSupportedIn": "",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n",
		"type": "QueryBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryErrorEventArgs.searchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Whether the query is a search-as-you-type</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryException",
		"notSupportedIn": "",
		"comment": "<p>Describe an exception that was triggered by the index when performing the query.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryException.code",
		"notSupportedIn": "",
		"comment": "<p>The exception code</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryFunction",
		"notSupportedIn": "",
		"comment": "<p>Describe a query function that can be executed against the index<br/>\nSee: <a href=\"https://docs.coveo.com/en/1451/\">Query Functions</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryFunction.fieldName",
		"notSupportedIn": "",
		"comment": "<p>The field name on which to store the query function result when the query returns</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryFunction.function",
		"notSupportedIn": "",
		"comment": "<p>Function to execute, as a string</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryOptions",
		"notSupportedIn": "",
		"comment": "<p>Possible options when performing a query with the query controller</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryOptions.beforeExecuteQuery",
		"notSupportedIn": "",
		"comment": "<p>Specify a function that you wish to execute just before the query is executed</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryOptions.cancel",
		"notSupportedIn": "",
		"comment": "<p>Cancel the query</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryOptions.ignoreWarningSearchEvent",
		"notSupportedIn": "",
		"comment": "<p>If the analytics component is enabled in the interface, it will look for any query executed by the query controller for which no analytics event was associated.<br/>\nBy setting this property to true, this will cancel this check when the query is performed</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryOptions.logInActionsHistory",
		"notSupportedIn": "",
		"comment": "<p>Whether or not to log the query in the user actions history when using the page view script: <a href=\"https://github.com/coveo/coveo.analytics.js\">https://github.com/coveo/coveo.analytics.js</a>.\nOnly the &#39;q&#39; part of the query will be logged.\nThis option is useful, because it prevents the query to be logged twice when a <a href=\"https://coveo.github.io/search-ui/components/recommendation.html\">Recommendation</a> component is present.\nIt also makes sure that only relevant queries are logged. For exemple, the &#39;empty&#39; interface load query isn&#39;t logged.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryOptions.origin",
		"notSupportedIn": "",
		"comment": "<p>The component from which the query originated. For example the pager will set the property to tweak it&#39;s behaviour</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryOptions.searchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Whether the query to execute is a search-as-you-type. This information will be passed down in the query events for component and external code to determine their behavior</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult",
		"notSupportedIn": "",
		"comment": "<p>The <code>IQueryResult</code> interface describes a single result returned by the Coveo REST Search API.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.absentTerms",
		"notSupportedIn": "",
		"comment": "<p>The query terms that are not matched by the result.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.childResults",
		"notSupportedIn": "",
		"comment": "<p>Contains the child results of the item, if parent-child loading was performed.\nSee the <a href=\"https://coveo.github.io/search-ui/components/folding.html\"><code>Folding</code></a> component.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.clickUri",
		"notSupportedIn": "",
		"comment": "<p>Contains the clickable URI of the item, which you can set on an <code>href</code> in your search interface.\nSee the <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\"><code>ResultLink</code></a> component.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.excerpt",
		"notSupportedIn": "",
		"comment": "<p>Contains an excerpt of the item. Can be empty for certain types of items (e.g., images, videos, etc.).\nSee the <a href=\"https://coveo.github.io/search-ui/components/excerpt.html\"><code>Excerpt</code></a> component.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.flags",
		"notSupportedIn": "",
		"comment": "<p>Contains the list of flags for the item. Values are separated by a semicolon characters (<code>;</code>).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.hasHtmlVersion",
		"notSupportedIn": "",
		"comment": "<p>Contains a value specifying whether the item has an HTML version.\nSee the <a href=\"https://coveo.github.io/search-ui/components/quickview.html\"><code>Quickview</code></a> component.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.index",
		"notSupportedIn": "",
		"comment": "<p>Contains the 0-based index value of the result, as returned by the Coveo REST Search API.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.isRecommendation",
		"notSupportedIn": "",
		"comment": "<p>Contains a value that specifies whether the result was recommended by the Coveo Machine Learning service.\nSee the <a href=\"https://coveo.github.io/search-ui/components/recommendation.html\"><code>Recommendation</code></a> component.</p>\n<p>See also <a href=\"https://docs.coveo.com/en/1727/\">Coveo Machine Learning</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.isTopResult",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether the result is a Featured Result in the Coveo Query Pipeline (see <a href=\"https://docs.coveo.com/en/1961/\">Adding and Managing Query Pipeline Featured Results</a>).</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.isUserActionView",
		"notSupportedIn": "",
		"comment": "<p>Whether the result item was previously viewed by the user specified in the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#useractions\">userActions</a> request of the query.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.parentResult",
		"notSupportedIn": "",
		"comment": "<p>Contains the parent result of the item, if parent-child loading was performed.\nSee the <a href=\"https://coveo.github.io/search-ui/components/folding.html\"><code>Folding</code></a> component.</p>\n",
		"type": "IQueryResult",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.printableUri",
		"notSupportedIn": "",
		"comment": "<p>Contains a printable URI (or path) to the item.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.queryUid",
		"notSupportedIn": "",
		"comment": "<p>Contains the query UID, as returned by the Coveo REST Search API.\nThis value is used mainly for usage analytics.</p>\n<p>The Coveo JavaScript Search Framework adds this property client-side to each result.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.rankingInfo",
		"notSupportedIn": "",
		"comment": "<p>Contains ranking information, which the Coveo REST Search API returns along with the item when the query\n<a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\"><code>debug</code></a> property is <code>true</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.rating",
		"notSupportedIn": "",
		"comment": "<p><strong>Note:</strong></p>\n<blockquote>\n<p>The Coveo Cloud V2 platform does not support collaborative rating. Therefore, this property is obsolete in Coveo Cloud V2.</p>\n</blockquote>\n<p>Contains the collaborative rating value for the item.</p>\n<p>See the <a href=\"https://coveo.github.io/search-ui/components/resultrating.html\"><code>ResultRating</code></a> component.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.raw",
		"notSupportedIn": "",
		"comment": "<p>Contains the raw field values of the item, expressed as key-value pairs.</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\"><code>SearchInterface</code></a> inside which this result is rendered.\nThis value is used mainly to allow for conditional rendering of results templates.</p>\n<p>The Coveo JavaScript Search Framework adds this property client-side to each result.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.state",
		"notSupportedIn": "",
		"comment": "<p>Contains the query state of the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\"><code>SearchInterface</code></a> inside which this result is rendered.\nThis value is used mainly to allow for conditional rendering of results templates.</p>\n<p>The Coveo JavaScript Search Framework adds this property client-side to each result.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.title",
		"notSupportedIn": "",
		"comment": "<p>Contains the title of the item.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.uniqueId",
		"notSupportedIn": "",
		"comment": "<p>Contains the unique ID of the item.\nThis parameter is useful when making certain calls to a <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\"><code>SearchEndpoint</code></a>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResult.uri",
		"notSupportedIn": "",
		"comment": "<p>Contains the URI of the item.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults",
		"notSupportedIn": "",
		"comment": "<p>Describe a set a results returned by the Search API</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.advancedExpression",
		"notSupportedIn": "",
		"comment": "<p>The advanced expression that was executed.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.apiVersion",
		"notSupportedIn": "",
		"comment": "<p>The search api version that was used for this query.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.basicExpression",
		"notSupportedIn": "",
		"comment": "<p>The basic expression that was executed.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.categoryFacets",
		"notSupportedIn": "",
		"comment": "<p>Category facet results of the query</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.clientDuration",
		"notSupportedIn": "",
		"comment": "<p>The duration of the query for the client.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.constantExpression",
		"notSupportedIn": "",
		"comment": "<p>The constant expression that was executed.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.duration",
		"notSupportedIn": "",
		"comment": "<p>The total query duration, which is the sum of the <code>indexDuration</code> and <code>searchAPIDuration</code>, including any latency incurred through the necessary network hops.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.error",
		"notSupportedIn": "",
		"comment": "<p>When an error occurs, and the errorsAsSuccess flag is passed, the error will be returned in the body of the response</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.exception",
		"notSupportedIn": "",
		"comment": "<p>The exception that can be returned by the index if the query triggered an error</p>\n",
		"type": "IQueryException",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.executionReport",
		"notSupportedIn": "",
		"comment": "<p>A detailed execution report sent by the Search API.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n",
		"type": "any",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.facets",
		"notSupportedIn": "",
		"comment": "<p>Facet results of the query</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.groupByResults",
		"notSupportedIn": "",
		"comment": "<p>The group by results of the query</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.indexDuration",
		"notSupportedIn": "",
		"comment": "<p>The part of the total query <code>duration</code> that was spent in the index.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.phrasesToHighlight",
		"notSupportedIn": "",
		"comment": "<p>Phrases to highlight (with stemming) in the results</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.pipeline",
		"notSupportedIn": "",
		"comment": "<p>The pipeline that was used for this query.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.proxyDuration",
		"notSupportedIn": "",
		"comment": "<p>The duration of the query on the proxy (not always applicable, can be optional)</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.queryCorrections",
		"notSupportedIn": "",
		"comment": "<p>Possible query corrections (eg : <a href=\"https://coveo.github.io/search-ui/components/didyoumean.html\">DidYouMean</a>)</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.rankingExpressions",
		"notSupportedIn": "",
		"comment": "<p>A list of ranking expression that were used to tweak the relevance.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.refinedKeywords",
		"notSupportedIn": "",
		"comment": "<p>The keywords selected by Coveo Machine Learning Refined Query feature</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.results",
		"notSupportedIn": "",
		"comment": "<p>The results of the query</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.searchAPIDuration",
		"notSupportedIn": "",
		"comment": "<p>The part of the total query <code>duration</code> that was spent in the Coveo Search API.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.searchUid",
		"notSupportedIn": "",
		"comment": "<p>A unique identifier for this query, used mainly for the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> service.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.splitTestRun",
		"notSupportedIn": "",
		"comment": "<p>The split test run that was used for this query. (A/B tests feature of the Coveo Query Pipeline)</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.termsToHighlight",
		"notSupportedIn": "",
		"comment": "<p>Terms to highlight (with stemming) in the results</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.totalCount",
		"notSupportedIn": "",
		"comment": "<p>The total number of results that matched the query in the index.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.totalCountFiltered",
		"notSupportedIn": "",
		"comment": "<p>The total number of results that matched the query in the index, but with the duplicate filtered.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.triggers",
		"notSupportedIn": "",
		"comment": "<p>The Coveo Query Pipeline triggers, if any were configured.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryResults.userIdentities",
		"notSupportedIn": "",
		"comment": "<p>A list of user identities that were used to perform this query.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuccessEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuccessEventArgs.query",
		"notSupportedIn": "",
		"comment": "<p>The query that was just executed</p>\n",
		"type": "IQuery",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuccessEventArgs.queryBuilder",
		"notSupportedIn": "",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n",
		"type": "QueryBuilder",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuccessEventArgs.results",
		"notSupportedIn": "",
		"comment": "<p>The results returned by the query that was executed</p>\n",
		"type": "IQueryResults",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuccessEventArgs.searchAsYouType",
		"notSupportedIn": "",
		"comment": "<p>Whether the query is a search-as-you-type</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestCompletion",
		"notSupportedIn": "",
		"comment": "<p>The IQuerySuggestCompletion interface describes a completion suggestion from the Coveo Machine Learning\nservice (see <a href=\"https://docs.coveo.com/en/1727/\">Coveo Machine Learning</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestCompletion.executableConfidence",
		"notSupportedIn": "",
		"comment": "<p>Contains a value indicating the confidence level that this suggestion should be executed.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestCompletion.expression",
		"notSupportedIn": "",
		"comment": "<p>Contains the expression to complete.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestCompletion.highlighted",
		"notSupportedIn": "",
		"comment": "<p>Contains the highlighted expression to complete.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestCompletion.score",
		"notSupportedIn": "",
		"comment": "<p>Contains a value indicating how certain the Coveo Machine Learning service is that this suggestion is actually\nrelevant.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest",
		"notSupportedIn": "",
		"comment": "<p>The IQuerySuggestRequest interface describes a request to the Coveo Machine Learning service query suggest.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.actionsHistory",
		"notSupportedIn": "",
		"comment": "<p>Specfies the actions history which represents the past actions a user made. It is generated by the page view script (<a href=\"https://github.com/coveo/coveo.analytics.js\">https://github.com/coveo/coveo.analytics.js</a>)</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.context",
		"notSupportedIn": "",
		"comment": "<p>Specifies the context to use for the request.</p>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.count",
		"notSupportedIn": "",
		"comment": "<p>Specifies the number of suggestions that the Coveo Machine Learning service should return.\nDefault value is <code>5</code>.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.enableWordCompletion",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to attempt to complete the last word of the current &quot;q&quot; parameter and boost the ranking score of the resulting expression so that it is returned as the first query suggestion.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.isGuestUser",
		"notSupportedIn": "",
		"comment": "<p>Whether the current user is anonymous. This can be specified when configuring the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.locale",
		"notSupportedIn": "",
		"comment": "<p>The locale of the current user. Will typically match the &quot;language&quot; parameter that is used to perform standard queries.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.pipeline",
		"notSupportedIn": "",
		"comment": "<p>Specifies the pipeline to use for the request.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.q",
		"notSupportedIn": "",
		"comment": "<p>Specifies the query / word for which to get completion.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.referrer",
		"notSupportedIn": "",
		"comment": "<p>Specifies the third level of origin of the request, typically the URL of the page that linked to the search interface from which the request originates (e.g., in JavaScript, this would correspond to the <code>document.referrer</code> value).</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.searchHub",
		"notSupportedIn": "",
		"comment": "<p>Specifies the search hub for which to get suggestions.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.tab",
		"notSupportedIn": "",
		"comment": "<p>Specifies the second level of origin of the request, typically the identifier of the selected tab from which the request originates.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.timezone",
		"notSupportedIn": "",
		"comment": "<p>The tz database identifier of the time zone to use to correctly interpret dates in the query expression and result items.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestRequest.visitorId",
		"notSupportedIn": "",
		"comment": "<p>A GUID representing the current user, who can be authenticated or anonymous. This GUID is normally generated by the usage analytics service and stored in a non-expiring browser cookie.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestResponse",
		"notSupportedIn": "",
		"comment": "<p>The IQuerySuggestResponse interface describes a response from the Coveo Machine Learning service query\nsuggestions.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestResponse.completions",
		"notSupportedIn": "",
		"comment": "<p>Contains an array of completions.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestSelection",
		"notSupportedIn": "",
		"comment": "<p>Describes the object that all <a href=\"https://coveo.github.io/search-ui/classes/omniboxevents.html#querysuggestgetfocus\"><code>querySuggestGetFocus</code></a> and <a href=\"https://coveo.github.io/search-ui/classes/omniboxevents.html#querysuggestselection\"><code>querySuggestSelection</code></a> event handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySuggestSelection.suggestion",
		"notSupportedIn": "",
		"comment": "<p>The query suggestion that had focus or was selected.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuerySummaryCancelLastActionArgs",
		"notSupportedIn": "",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/querysummaryevents.html#cancellastaction\">QuerySummaryEvents.cancelLastAction</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuickviewLoadedEventArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IQuickviewLoadedEventArgs</code> interface describes the object that all\n<a href=\"https://coveo.github.io/search-ui/classes/quickviewevents.html#quickviewloaded\"><code>quickviewLoaded</code></a> event handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQuickviewLoadedEventArgs.duration",
		"notSupportedIn": "",
		"comment": "<p>The amount of time it took to download the content to display in the quickview modal window (in milliseconds).</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRangeValue",
		"notSupportedIn": "",
		"comment": "<p>Describes a single range value in a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">group by request</a> or <a href=\"https://coveo.github.io/search-ui/interfaces/ifacetrequest.html\">facet request</a>.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRangeValue.end",
		"notSupportedIn": "",
		"comment": "<p>The value to end the range at.\n<strong>Examples:</strong></p>\n<blockquote>\n<ul>\n<li><code>500</code></li>\n<li><code>2018-12-31T23:59:59.999Z</code></li>\n</ul>\n</blockquote>\n",
		"type": "RangeType",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRangeValue.endInclusive",
		"notSupportedIn": "",
		"comment": "<p>Whether to include the <a href=\"https://coveo.github.io/search-ui/interfaces/irangevalue.html#end\"><code>end</code></a> value in the range.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRangeValue.label",
		"notSupportedIn": "",
		"comment": "<p>The label to associate with the range value.\n<strong>Examples:</strong></p>\n<blockquote>\n<ul>\n<li><code>0 - 500</code></li>\n<li><code>In 2018</code></li>\n</ul>\n</blockquote>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRangeValue.start",
		"notSupportedIn": "",
		"comment": "<p>The value to start the range at.\n<strong>Examples:</strong></p>\n<blockquote>\n<ul>\n<li><code>0</code></li>\n<li><code>2018-01-01T00:00:00.000Z</code></li>\n</ul>\n</blockquote>\n",
		"type": "RangeType",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRankingExpression",
		"notSupportedIn": "",
		"comment": "<p>Describe a ranking expression performed against the index (qre)</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRankingExpression.expression",
		"notSupportedIn": "",
		"comment": "<p>The expression that was executed in the ranking expression</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRankingExpression.modifier",
		"notSupportedIn": "",
		"comment": "<p>The relevance modifier that was applied</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRankingFunction",
		"notSupportedIn": "",
		"comment": "<p>Describe a ranking function that can be executed against the index.<br/>\nSee: <a href=\"https://docs.coveo.com/en/1448/\">Ranking Functions</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRankingFunction.expression",
		"notSupportedIn": "",
		"comment": "<p>The mathematical expression that calculates the ranking value to add to the result score.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRankingFunction.normalizeWeight",
		"notSupportedIn": "",
		"comment": "<p>Whether to normalize the value using the standard index scale or not. If you don&#39;t want to completely override the index ranking and use the qrf as a boost, you should turn this on.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRatingRequest",
		"notSupportedIn": "",
		"comment": "<p>The <code>IRatingRequest</code> interface describes a request to rate an item in the index.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRatingRequest.rating",
		"notSupportedIn": "",
		"comment": "<p>Contains the rating description.\nPossible values are <code>Undefined</code> | <code>Lowest</code> | <code>Low</code> | <code>Average</code> | <code>Good</code> | <code>Best</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRatingRequest.uniqueId",
		"notSupportedIn": "",
		"comment": "<p>Contains the unique ID of the item to rate.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRequestInfo",
		"notSupportedIn": "",
		"comment": "<p>Information about a request</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRequestInfo.begun",
		"notSupportedIn": "",
		"comment": "<p>The timestamp at which the request started</p>\n",
		"type": "Date",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRequestInfo.headers",
		"notSupportedIn": "",
		"comment": "<p>The headers for the request.</p>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRequestInfo.method",
		"notSupportedIn": "",
		"comment": "<p>The method that was used for this request</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRequestInfo.queryString",
		"notSupportedIn": "",
		"comment": "<p>The query string parameters that were used for this request</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRequestInfo.requestData",
		"notSupportedIn": "",
		"comment": "<p>The data that was sent for this request</p>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRequestInfo.requestDataType",
		"notSupportedIn": "",
		"comment": "<p>The requestDataType that was used for this request</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IRequestInfo.url",
		"notSupportedIn": "",
		"comment": "<p>Url that was requested</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResolvingPositionEventArgs",
		"notSupportedIn": "",
		"comment": "<p>The <code>IResolvingPositionEventArgs</code> interface describes the object that all\n<a href=\"https://coveo.github.io/search-ui/classes/distanceevents.html#onresolvingposition\"><code>onResolvingPosition</code></a> event handlers receive as an argument.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResolvingPositionEventArgs.providers",
		"notSupportedIn": "",
		"comment": "<p>The array of providers that can provide a position. The first provider that can resolve the position will be used.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResponse",
		"notSupportedIn": "",
		"comment": "<p>A generic response</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResponse.data",
		"notSupportedIn": "",
		"comment": "<p>Data of the response</p>\n",
		"type": "T",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResultsComponentBindings",
		"notSupportedIn": "",
		"comment": "<p>The bindings, or environment in which each component inside the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> exists.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResultsComponentBindings.componentOptionsModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n",
		"type": "ComponentOptionsModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResultsComponentBindings.componentStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n",
		"type": "ComponentStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResultsComponentBindings.queryController",
		"notSupportedIn": "",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n",
		"type": "QueryController",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResultsComponentBindings.queryStateModel",
		"notSupportedIn": "",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Triggers state event when modified. Each component can listen to those events.</p>\n",
		"type": "QueryStateModel",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResultsComponentBindings.root",
		"notSupportedIn": "",
		"comment": "<p>The root HTMLElement of the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> in which the component exists.</p>\n",
		"type": "HTMLElement",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResultsComponentBindings.searchInterface",
		"notSupportedIn": "",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n",
		"type": "SearchInterface",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IResultsComponentBindings.usageAnalytics",
		"notSupportedIn": "",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n",
		"type": "IAnalyticsClient",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEndpointOptions",
		"notSupportedIn": "",
		"comment": "<p>The possible options when creating a <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEndpointOptions.accessToken",
		"notSupportedIn": "",
		"comment": "<p>This allows using an OAuth2 or a search token to authenticate against the Search API.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEndpointOptions.anonymous",
		"notSupportedIn": "",
		"comment": "<p>Specifies that the request (and the Coveo Search API) does not need any kind of authentication.<br/>\nThis flag is only needed for specific setups when your requests are being blocked by your browser. If your queries are executing correctly, you do not need to bother.<br/>\nSetting this flag will prevent the withCredentials option to be set on the XMLHttpRequest, allowing performing cross-domain requests on a server that returns * in the Access-Control-Allow-Origin HTTP header.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEndpointOptions.password",
		"notSupportedIn": "",
		"comment": "<p>This is the password part of the credentials used to authenticate with the REST API.<br/>\nThis option should only be used for development purposes. Including secret credentials in an HTML page that is sent to a client browser is not secure.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEndpointOptions.queryStringArguments",
		"notSupportedIn": "",
		"comment": "<p>Query string arguments to add to every request to the search endpoint.<br/>\neg : {&#39;foo&#39;:&#39;bar&#39;, &#39;a&#39;:&#39;b&#39;}</p>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEndpointOptions.renewAccessToken",
		"notSupportedIn": "",
		"comment": "<p>Specifies a function that, when called, will arrange for a new search token to be generated.<br/>\nIt is expected to return a Promise that should be resolved with the new token once it&#39;s available.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEndpointOptions.requestModifier",
		"notSupportedIn": "",
		"comment": "<p>A function which will allow external code to modify all endpoint call parameters before they are sent by the browser.\nUsed in very specific scenario where the network infrastructure require special request headers to be added or removed, for example.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEndpointOptions.restUri",
		"notSupportedIn": "",
		"comment": "<p>The uri for the search endpoint. eg: cloudplatform.coveo.com/rest/search</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEndpointOptions.searchAlertsUri",
		"notSupportedIn": "",
		"comment": "<p>The uri for the Coveo search alerts service. If not specified, will automatically resolve using the restUri otherwise</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEndpointOptions.username",
		"notSupportedIn": "",
		"comment": "<p>This is the username part of the credentials used to authenticate with the Search API using Basic Authentication.<br/>\nThis option should only be used for development purposes. Including secret credentials in an HTML page that is sent to a client browser is not secure.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEndpointOptions.xmlHttpRequest",
		"notSupportedIn": "",
		"comment": "<p>The XmlHttpRequest implementation to use instead of the native one.\nIf not specified, the native one is used.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent",
		"notSupportedIn": "",
		"comment": "<p>Describes a Coveo Cloud usage analytics <em>search</em> event.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.actionCause",
		"notSupportedIn": "",
		"comment": "<p>A unique name describing the action that triggered the event.\nSee the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#name\"><code>name</code></a> property of the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\"><code>IAnalyticsActionCause</code></a> interface.</p>\n<p><strong>Example:</strong> <code>pagerNext</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.actionType",
		"notSupportedIn": "",
		"comment": "<p>A name describing the category of actions to which the action that triggered the event belongs.\nSee the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#type\"><code>type</code></a> property of the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\"><code>IAnalyticsActionCause</code></a> interface.</p>\n<p><strong>Example:</strong> <code>getMoreResults</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.advancedQuery",
		"notSupportedIn": "",
		"comment": "<p>The original advanced query expression (i.e., <code>aq</code>) sent for the related query.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.anonymous",
		"notSupportedIn": "",
		"comment": "<p>Whether the event should be logged anonymously to the Coveo Cloud usage analytics service.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.anonymous\"><code>anonymous</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.contextual",
		"notSupportedIn": "",
		"comment": "<p>Whether the related query was contextual.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.customData",
		"notSupportedIn": "",
		"comment": "<p>Additional metadata to send along with the event.\n<strong>Note:</strong> This field may include custom user context information (see <a href=\"https://docs.coveo.com/en/399/\">Sending Custom Context Information</a>).</p>\n<p><strong>Example:</strong> <code>{ &quot;currentResultsPerPage&quot;: 25, &quot;userRole&quot;: &quot;developer&quot; }</code></p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.device",
		"notSupportedIn": "",
		"comment": "<p>The name of the device or browser that triggered the event.\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\n<p><strong>Example:</strong> <code>Chrome</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.didYouMean",
		"notSupportedIn": "",
		"comment": "<p>Whether the <em>did you mean</em> feature was enabled for the related query.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\n<p><strong>Example:</strong> <code>@source==&quot;Product Documentation&quot;</code></p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.facetState",
		"notSupportedIn": "",
		"comment": "<p>A representation of the state of each dynamic facet in the search interface when the action that triggered the event was executed.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.language",
		"notSupportedIn": "",
		"comment": "<p>The language of the search interface from which the event originates.\nMust be a valid <a href=\"https://en.wikipedia.org/wiki/ISO_639-1\">ISO-639-1 code</a>.</p>\n<p><strong>Note:</strong> By default, the framework sets this field according to the currently loaded culture file (see <a href=\"https://docs.coveo.com/en/421/\">Changing the Language of Your Search Interface</a>).</p>\n<p><strong>Example:</strong> <code>en</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.mobile",
		"notSupportedIn": "",
		"comment": "<p>Whether the event originates from a mobile device.\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.numberOfResults",
		"notSupportedIn": "",
		"comment": "<p>The number of query result items returned by the related query.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.originContext",
		"notSupportedIn": "",
		"comment": "<p>The broad application context from which the event originates.\n<strong>Note:</strong> By default, the framework sets this field to <code>Search</code>. However, you can use the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#setorigincontext\"><code>setOriginContext</code></a> method of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component to modify the default value.</p>\n<p><strong>Example:</strong> <code>Search</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.originLevel1",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the search interface from which the event originates.\n<strong>Note:</strong> This field is normally set through the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.searchhub\"><code>searchHub</code></a> option of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <code>PartnerPortalSearch</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.originLevel2",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the tab from which the event originates.\n<strong>Note:</strong> The framework normally sets this field to the identifier of the currently selected <a href=\"https://coveo.github.io/search-ui/components/tab.html\"><code>Tab</code></a> in the search interface.</p>\n<p><strong>Example:</strong> <code>All</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.originLevel3",
		"notSupportedIn": "",
		"comment": "<p>The address of the webpage that linked to the search interface from which the event originates.\n<strong>Note:</strong> The framework normally sets this field to the current <code>document.referrer</code> value.</p>\n<p><strong>Example:</strong> <code>http://example.com/</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.pageNumber",
		"notSupportedIn": "",
		"comment": "<p>The 0-based page of results requested for the related query.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.queryPipeline",
		"notSupportedIn": "",
		"comment": "<p>The name of the query pipeline to which the related query was routed.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>PartnerPortalSearchPipeline</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.queryText",
		"notSupportedIn": "",
		"comment": "<p>The original basic query expression (i.e., <code>q</code>) sent for the related query.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\n<p><strong>Example:</strong> <code>coveo machine learning</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.responseTime",
		"notSupportedIn": "",
		"comment": "<p>The time it took to get a response from the Search API for the query related to the event (in milliseconds).\n<strong>Note:</strong> The framework normally sets this field to <code>0</code>, except for <a href=\"https://coveo.github.io/search-ui/interfaces/isearchevent.html\">search events</a> in which case it sets the field by retrieving the information from the related Search API query response.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.resultsPerPage",
		"notSupportedIn": "",
		"comment": "<p>The number of results per page requested for the related query.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.searchQueryUid",
		"notSupportedIn": "",
		"comment": "<p>The unique identifier of the related query.\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>74682726-0e20-46eb-85ac-f37259346f57</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.splitTestRunName",
		"notSupportedIn": "",
		"comment": "<p>The name of the A/B test that applied to the related query.\n<strong>Note:</strong> This field may be set through the <code>splitTestRunName</code> option of the <code>Analytics</code> component. However, if the option is left undefined, the framework attempts to set this field by retrieving information from the related Search API query response.</p>\n<p><strong>Example:</strong> <code>Test new ART model</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.splitTestRunVersion",
		"notSupportedIn": "",
		"comment": "<p>The version of the A/B test that applied to the related query (i.e., version A or version B).\n<strong>Note:</strong> This field may be set through the <code>splitTestRunVersion</code> option of the <code>Analytics</code> component. However, if the option is left undefined and the related Search API query response indicates that an A/B test was applied, the framework sets this field to the name of the query pipeline to which the query was routed.</p>\n<p><strong>Example:</strong> <code>PartnerPortalSearchPipelineWithART</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.userAgent",
		"notSupportedIn": "",
		"comment": "<p>The software acting on behalf of the end-user whose action triggered the event.\n<strong>Note:</strong> By default, the framework sets this field to the current <code>navigator.userAgent</code> value.</p>\n<p><strong>Example:</strong> <code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.userDisplayName",
		"notSupportedIn": "",
		"comment": "<p>The display name of the end-user whose action triggered the event.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.userdisplayname\"><code>userDisplayName</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <code>Alice Smith</code></p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.userGroups",
		"notSupportedIn": "",
		"comment": "<p>The groups the end-user whose action triggered the event belongs to.\n<strong>Note:</strong> This field is normally left undefined, and the Coveo Cloud usage analytics service attempts to extract the information from the search token when actually recording the event.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISearchEvent.username",
		"notSupportedIn": "",
		"comment": "<p>The identifier of the end-user whose action triggered the event.\n<strong>Note:</strong> This field is normally set to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#options.user\"><code>user</code></a> option value of the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\n<p><strong>Example:</strong> <a href=\"mailto:`asmith@example.com\">`asmith@example.com</a>`</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISizeOptions",
		"notSupportedIn": "",
		"comment": "<p>Available options for the size templateHelpers.\nExample:</p>\n<div class=\"CoveoFieldValue\" data-helper=\"helperName\" data-helper-options-optionName=\"option-value\"></div>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISizeOptions.base",
		"notSupportedIn": "",
		"comment": "<p>The base into which to format the value.\nFormula: value <em> 10^(3 </em> base)</p>\n<p><strong>Examples:</strong></p>\n<blockquote>\n<p><strong>Base 0:</strong></p>\n<p>1 =&gt; 1B</p>\n<p>1000 =&gt; 1KB</p>\n</blockquote>\n<blockquote>\n<p><strong>Base 1:</strong></p>\n<p>1 =&gt; 1KB</p>\n<p>1000 =&gt; 1MB</p>\n</blockquote>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISizeOptions.precision",
		"notSupportedIn": "",
		"comment": "<p>The precision to use to format the size (i.e., the number of digits to display after the decimal)\n<strong>Examples:</strong></p>\n<blockquote>\n<p><strong>Precision 0:</strong></p>\n<p>1.0 =&gt; 1</p>\n<p>1.85 =&gt; 1</p>\n</blockquote>\n<blockquote>\n<p><strong>Precision 1:</strong></p>\n<p>1.0 =&gt; 1.0</p>\n<p>1.85 =&gt; 1.8</p>\n</blockquote>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IStreamHighlightOptions",
		"notSupportedIn": "",
		"comment": "<p>The possible options when highlighting a stream.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IStreamHighlightOptions.cssClass",
		"notSupportedIn": "",
		"comment": "<p>The css class that the highlight will generate.\nDefaults to <code>coveo-highlight</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IStreamHighlightOptions.regexFlags",
		"notSupportedIn": "",
		"comment": "<p>The regex flags that should be applied to generate the highlighting.\nDefaults to <code>gi</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IStringMap",
		"notSupportedIn": "",
		"comment": "<p>A JSON which contains type T.\neg :</p>\n<pre><code>IS<span class=\"hljs-function\"><span class=\"hljs-title\">tringMap</span>&lt;<span class=\"hljs-keyword\">boolean</span>&gt; -&gt;</span> {<span class=\"hljs-string\">'foo'</span> : <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'bar'</span> : <span class=\"hljs-literal\">false</span>};\nIS<span class=\"hljs-function\"><span class=\"hljs-title\">tringMap</span>&lt;number&gt; -&gt;</span> {<span class=\"hljs-string\">'foo'</span> : <span class=\"hljs-number\">1</span> , <span class=\"hljs-string\">'bar'</span> : <span class=\"hljs-number\">123</span>}\n</code></pre>",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscription",
		"notSupportedIn": "",
		"comment": "<p>Describe a subscription to the Coveo Search alerts service</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscription.frequency",
		"notSupportedIn": "",
		"comment": "<p>Frequency of the alerts</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscription.id",
		"notSupportedIn": "",
		"comment": "<p>The id of the subscription</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscription.name",
		"notSupportedIn": "",
		"comment": "<p>The name that should be used by the API to identify this subscription</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscription.type",
		"notSupportedIn": "",
		"comment": "<p>Type of subscription.<br/>\nCan be &#39;followQuery&#39; or &#39;followDocument&#39;</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscription.typeConfig",
		"notSupportedIn": "",
		"comment": "<p>Config of the subscription</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscription.user",
		"notSupportedIn": "",
		"comment": "<p>The user associated with the subscription</p>\n",
		"type": "ISubscriptionUser",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionItemRequest",
		"notSupportedIn": "",
		"comment": "<p>The <code>ISubscriptionItemRequest</code> interface describes a subscription to a single item (a result).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionItemRequest.id",
		"notSupportedIn": "",
		"comment": "<p>Contains the unique ID of the item to subscribe to.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionItemRequest.modifiedDateField",
		"notSupportedIn": "",
		"comment": "<p>Indicates which field contains the modification date of the item to subscribe to.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionItemRequest.title",
		"notSupportedIn": "",
		"comment": "<p>Contains the title of the item to subscribe to.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionItemRequest.watchedFields",
		"notSupportedIn": "",
		"comment": "<p>Contains a list of fields to monitor for the item to subscribe to.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionQueryRequest",
		"notSupportedIn": "",
		"comment": "<p>Describe a subscription to a single query</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionQueryRequest.modifiedDateField",
		"notSupportedIn": "",
		"comment": "<p>Which field on the result set represent the modification date for which you wish to receive alerts</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionQueryRequest.query",
		"notSupportedIn": "",
		"comment": "<p>Query to subscribe to</p>\n",
		"type": "IQuery",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionRequest",
		"notSupportedIn": "",
		"comment": "<p>Describe a request to subscribe to the Coveo Search alerts service</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionRequest.frequency",
		"notSupportedIn": "",
		"comment": "<p>Frequency of the alerts</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionRequest.name",
		"notSupportedIn": "",
		"comment": "<p>The name that should be used by the API to identify this subscription</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionRequest.type",
		"notSupportedIn": "",
		"comment": "<p>Type of subscription.<br/>\nCan be &#39;followQuery&#39; or &#39;followDocument&#39;</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionRequest.typeConfig",
		"notSupportedIn": "",
		"comment": "<p>Config of the subscription</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionUser",
		"notSupportedIn": "",
		"comment": "<p>Describe a user associated with a subscription to the Coveo Search alerts service</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionUser.email",
		"notSupportedIn": "",
		"comment": "<p>The email of the user</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISubscriptionUser.manageToken",
		"notSupportedIn": "",
		"comment": "<p>The token used to manage the alerts via email.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISuccessResponse",
		"notSupportedIn": "",
		"comment": "<p>A generic success response</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISuccessResponse.data",
		"notSupportedIn": "",
		"comment": "<p>Data of the response</p>\n",
		"type": "T",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ISuccessResponse.duration",
		"notSupportedIn": "",
		"comment": "<p>The time that the successfull response took to complete</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITaggingRequest",
		"notSupportedIn": "",
		"comment": "<p>The <code>ITaggingRequest</code> interface describes a tag request on an item.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITaggingRequest.doAdd",
		"notSupportedIn": "",
		"comment": "<p>Indicates whether to add the tag value, or to remove the tag value.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITaggingRequest.fieldName",
		"notSupportedIn": "",
		"comment": "<p>Contains the field name to tag.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITaggingRequest.fieldValue",
		"notSupportedIn": "",
		"comment": "<p>Contains the value to tag.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITaggingRequest.uniqueId",
		"notSupportedIn": "",
		"comment": "<p>Contains the unique ID of the item to tag.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITemplateHelperFunction",
		"notSupportedIn": "",
		"comment": "<p>A function that describe a templates.\nIt can take any number of arguments, but needs to return a simple string.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITimeSpanUtilsOptions",
		"notSupportedIn": "",
		"comment": "<p>The possible options to use when calculating a timespan</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITimeSpanUtilsOptions.isMilliseconds",
		"notSupportedIn": "",
		"comment": "<p>Specify if the given timespan is in seconds or milliseconds</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITopQueries",
		"notSupportedIn": "",
		"comment": "<p>Describe a request to get top queries</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITopQueries.pageSize",
		"notSupportedIn": "",
		"comment": "<p>Determine how many suggestions to receive</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITopQueries.queryText",
		"notSupportedIn": "",
		"comment": "<p>The query text for which to receive suggestions</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITrigger",
		"notSupportedIn": "",
		"comment": "<p>A trigger is an action that the interface will perform (show a message, execute a function, redirect users) depending on the query that was performed.<br/>\nA trigger that can be configured in the Coveo Query Pipeline.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITriggerExecute",
		"notSupportedIn": "",
		"comment": "<p>Execute a javascript function present in the page.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITriggerNotify",
		"notSupportedIn": "",
		"comment": "<p>Notify (show a message) to a user</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITriggerQuery",
		"notSupportedIn": "",
		"comment": "<p>Perform a new query with a different query expression</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ITriggerRedirect",
		"notSupportedIn": "",
		"comment": "<p>Redirect the user to another url</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IUpdateResultPreviewsManagerOptionsEventArgs",
		"notSupportedIn": "",
		"comment": "<p>Executed when a Suggestion is focused before PopulateSearchResultPreviews is called to fetch more options.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IUpdateResultPreviewsManagerOptionsEventArgs.displayAfterDuration",
		"notSupportedIn": "",
		"comment": "<p>How many milliseconds should a Suggestion be focused for before PopulateSearchResultPreviews is called.\nIf this is not defined, it will default to 200ms.</p>\n",
		"type": "number",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IUserActionsRequest",
		"notSupportedIn": "",
		"comment": "<p>The information about the user we&#39;d like to check and its actions.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IUserActionsRequest.tagViewsOfUser",
		"notSupportedIn": "",
		"comment": "<p>The id of the user for which we should check the document views.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IUserIdentity",
		"notSupportedIn": "",
		"comment": "<p>Describe the identity of a user on the Coveo platform</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IUserIdentity.name",
		"notSupportedIn": "",
		"comment": "<p>The name of the identity</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IUserIdentity.provider",
		"notSupportedIn": "",
		"comment": "<p>The provider of the identity in the Coveo platform</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IViewAsHtmlOptions",
		"notSupportedIn": "",
		"comment": "<p>The <code>IViewAsHtmlOptions</code> interface describes the available options when calling against a\n<a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\"><code>SearchEndpoint</code></a> to view an item as an HTMLElement (think: quickview).</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "BaseFormTypes",
		"notSupportedIn": "",
		"comment": "<p>The basic types of form available to build an advanced search section.</p>\n",
		"type": "",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "Context",
		"notSupportedIn": "",
		"comment": "<p>A context, as returned by <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#getquerycontext\">SearchInterface.getQueryContext</a> or <a href=\"https://coveo.github.io/search-ui/components/pipelinecontext.html#getcontext\">PipelineContext.getContext</a></p>\n",
		"type": "IStringMap",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "IQueryExpression",
		"notSupportedIn": "",
		"comment": "<p>The <code>IQueryExpression</code> type is a string type dedicated to query expressions.\nThis type is used to build a specific option for query expressions.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ValidLayout",
		"notSupportedIn": "",
		"comment": "<p>The possible valid and supported layouts.\nSee the <a href=\"https://docs.coveo.com/en/360/\">Result Layouts</a> documentation.</p>\n",
		"type": "",
		"constrainedValues": [
			"list,card,table"
		],
		"miscAttributes": {}
	},
	{
		"name": "ValidTooltipPlacement",
		"notSupportedIn": "",
		"comment": "<p>The allowed <a href=\"https://coveo.github.io/search-ui/components/quickview.html\"><code>Quickview</code></a> <a href=\"https://coveo.github.io/search-ui/components/quickview.html#options.tooltipplacement\"><code>tooltipPlacement</code></a> option values. The <code>-start</code> and <code>-end</code> variations indicate relative alignement. Horizontally (<code>top</code>, <code>bottom</code>), <code>-start</code> means <em>left</em> and <code>-end</code> means <em>right</em>. Vertically (<code>left</code>, <code>right</code>), <code>-start</code> means <em>top</em> and <code>-end</code> means <em>bottom</em>. No variation means <em>center</em>.</p>\n",
		"type": "",
		"constrainedValues": [
			"auto-start,auto,auto-end,top-start,top,top-end,right-start,right,right-end,bottom-end,bottom,bottom-start,left-end,left,left-start"
		],
		"miscAttributes": {}
	},
	{
		"name": "ResponsiveFacetOptions",
		"notSupportedIn": "",
		"comment": "<p>ResponsiveFacets options</p>\n",
		"type": "object",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResponsiveFacetOptions.dropdownHeaderLabel",
		"notSupportedIn": "",
		"comment": "<p>If the <code>enableResponsiveMode</code> option is <code>true</code> for all facets and\nFacetSlider.options.enableResponsiveMode is also <code>true</code> for all sliders, specifies the label of the\ndropdown button that allows to display the facets when in responsive mode.\nIf more than one <code>Facet</code> or <a href=\"https://coveo.github.io/search-ui/components/facetslider.html\">FacetSlider</a> component in the search interface specifies a value for this\noption, the framework uses the first occurrence of the option.</p>\n<p>Default value is <code>Filters</code>.</p>\n",
		"type": "string",
		"constrainedValues": [],
		"miscAttributes": {}
	},
	{
		"name": "ResponsiveFacetOptions.enableResponsiveMode",
		"notSupportedIn": "",
		"comment": "<p>Specifies whether to enable <em>responsive mode</em> for facets. Setting this options to <code>false</code> on any <code>Facet</code>, or\n<a href=\"https://coveo.github.io/search-ui/components/facetslider.html\"><code>FacetSlider</code></a> component in a search interface disables responsive mode for all other facets\nin the search interface.\nResponsive mode displays all facets under a single dropdown button whenever the width of the HTML element which\nthe search interface is bound to reaches or falls behind a certain threshold (see\n<a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#responsivecomponents\">SearchInterface.responsiveComponents</a>).</p>\n<p>See also the <code>dropdownHeaderLabel</code> option.</p>\n<p>Default value is <code>true</code>.</p>\n",
		"type": "boolean",
		"constrainedValues": [],
		"miscAttributes": {}
	}
]